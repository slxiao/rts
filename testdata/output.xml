<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20180528 16:48:26.263" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/root/workspace/gerrit/IMP/test/ET" id="s1" name="ET">
<kw type="setup" name="ET Setup">
<kw name="Get Updated Et Timeout" library="common_lib">
<arguments>
<arg>${S_ET_MODE}</arg>
<arg>${S_ET_TIMEOUT}</arg>
</arguments>
<assign>
<var>${updated_timeout}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.077" starttime="20180528 16:48:30.077"></status>
</kw>
<kw name="Start Global ET Timer" library="common_lib">
<arguments>
<arg>${updated_timeout}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.077" starttime="20180528 16:48:30.077"></status>
</kw>
<kw name="Initialize Test Env" library="Common_NetAct_Keyword">
<kw name="Stop Tcpdump Process" library="Common_Mixed_Keyword">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>pkill -x tcpdump</arg>
<arg>shell=${True}</arg>
<arg>cwd=/root/workspace/gerrit/IMP/test/ET/resources</arg>
<arg>timeout=${G_RUN_PROCESS_TIMEOUT}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.078" starttime="20180528 16:48:30.078"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.078" starttime="20180528 16:48:30.077"></status>
</kw>
<kw name="Stop Tail Process" library="Common_Mixed_Keyword">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>pkill -x tail</arg>
<arg>shell=${True}</arg>
<arg>cwd=/root/workspace/gerrit/IMP/test/ET/resources</arg>
<arg>timeout=${G_RUN_PROCESS_TIMEOUT}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.079" starttime="20180528 16:48:30.079"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.079" starttime="20180528 16:48:30.078"></status>
</kw>
<kw name="Terminate NetAct Server Process" library="Common_NetAct_Keyword">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>netstat -apn|grep ${G_NETACT_SERVER_PORT}|grep LISTEN</arg>
<arg>shell=True</arg>
<arg>timeout=10</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.080" starttime="20180528 16:48:30.079"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result.stdout}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.080" starttime="20180528 16:48:30.080"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result.stderr}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.080" starttime="20180528 16:48:30.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result.stdout}'!=''</arg>
<arg>Start Process</arg>
<arg>kill -9 ${result.stdout.split('LISTEN')[-1].strip().split('/')[0]}</arg>
<arg>shell=True</arg>
</arguments>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>kill -9 ${result.stdout.split('LISTEN')[-1].strip().split('/')[0]}</arg>
<arg>shell=True</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.081" starttime="20180528 16:48:30.081"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.081" starttime="20180528 16:48:30.080"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.081" starttime="20180528 16:48:30.079"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.081" starttime="20180528 16:48:30.077"></status>
</kw>
<kw name="Collect Logs" library="Common_Mixed_Keyword">
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${time}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.082" starttime="20180528 16:48:30.082"></status>
</kw>
<kw name="Convert Date" library="DateTime">
<doc>Converts between supported `date formats`.</doc>
<arguments>
<arg>${time}</arg>
<arg>result_format=%Y%m%d%H%M%S</arg>
</arguments>
<assign>
<var>${datetime}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.082" starttime="20180528 16:48:30.082"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/root/workspace/gerrit/IMP/test/ET/resources/../log/Log_${datetime}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.082" starttime="20180528 16:48:30.082"></status>
</kw>
<kw name="Start Wireshark" library="common_lib">
<arguments>
<arg>/root/workspace/gerrit/IMP/test/ET/resources/../log/Log_${datetime}/tcpdump.pcap</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.083" starttime="20180528 16:48:30.083"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
<arg>TCPdump need time to startup</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.083" starttime="20180528 16:48:30.083"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.083" starttime="20180528 16:48:30.081"></status>
</kw>
<kw name="Validate BTSMED Esymac Startup" library="Common_Mixed_Keyword">
<arguments>
<arg>checkport=no</arg>
</arguments>
<kw name="BTSMED Process Should Be Startup" library="common_lib">
<status status="NOT_RUN" endtime="20180528 16:48:30.084" starttime="20180528 16:48:30.084"></status>
</kw>
<kw name="BTSMED Server Should Be Startup" library="Common_Mixed_Keyword">
<arguments>
<arg>port=${port}</arg>
<arg>checkport=${checkport}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${checkport}' == 'yes'</arg>
<arg>Validate BTSMED Special Port Startup</arg>
<arg>port=${port}</arg>
</arguments>
<kw name="Validate BTSMED Special Port Startup" library="Common_Mixed_Keyword">
<arguments>
<arg>port=${port}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>netstat -nap | grep ${port}|grep LISTEN</arg>
<arg>shell=${True}</arg>
<arg>timeout=${G_RUN_PROCESS_TIMEOUT}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.085" starttime="20180528 16:48:30.085"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>msg=verify port ${port} have been occupied</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.086" starttime="20180528 16:48:30.085"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.086" starttime="20180528 16:48:30.085"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.086" starttime="20180528 16:48:30.084"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.086" starttime="20180528 16:48:30.084"></status>
</kw>
<kw name="Validate BTSMED Special Port Startup" library="Common_Mixed_Keyword">
<arguments>
<arg>${G_BTSMED_SPECIAL_PORT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>netstat -nap | grep ${port}|grep LISTEN</arg>
<arg>shell=${True}</arg>
<arg>timeout=${G_RUN_PROCESS_TIMEOUT}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.086" starttime="20180528 16:48:30.086"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>msg=verify port ${port} have been occupied</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.087" starttime="20180528 16:48:30.087"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.087" starttime="20180528 16:48:30.086"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.087" starttime="20180528 16:48:30.083"></status>
</kw>
<kw name="Set Global BTSMED Path" library="Common_Mixed_Keyword">
<kw name="Get Path Of Btsmed" library="common_lib">
<assign>
<var>${G_BTSMED_PATH}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.088" starttime="20180528 16:48:30.088"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${G_BTSMED_PATH}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.088" starttime="20180528 16:48:30.088"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${G_BTSMED_LOG_PATH}</arg>
<arg>${G_BTSMED_PATH}/log/imp.log</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.088" starttime="20180528 16:48:30.088"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.088" starttime="20180528 16:48:30.087"></status>
</kw>
<kw name="Set Global Plugin Version" library="Common_Mixed_Keyword">
<kw name="Read Plugin Version" library="common_swm_lib">
<arguments>
<arg>/root/workspace/gerrit/IMP/test/ET/resources/swVersion.txt</arg>
</arguments>
<assign>
<var>${G_PLUGIN_VERSION}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.090" starttime="20180528 16:48:30.089"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${G_PLUGIN_VERSION}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.090" starttime="20180528 16:48:30.090"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.090" starttime="20180528 16:48:30.089"></status>
</kw>
<kw name="Import New Meta From Plugin" library="Common_Mixed_Keyword">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>rm -rf ../tmp_plugin/</arg>
<arg>shell=${True}</arg>
<arg>timeout=20</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.091" starttime="20180528 16:48:30.091"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>unzip -o ${G_PLUGIN_PATH}/btsmed_${G_PLUGIN_VERSION}.zip -d ../tmp_plugin</arg>
<arg>shell=${True}</arg>
<arg>timeout=20</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.091" starttime="20180528 16:48:30.091"></status>
</kw>
<kw name="Get File Info" library="common_snapshot_lib">
<arguments>
<arg>zip</arg>
<arg>../tmp_plugin/FCT/</arg>
</arguments>
<assign>
<var>${name}</var>
<var>${path}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.091" starttime="20180528 16:48:30.091"></status>
</kw>
<kw name="Import Meta And Generate Proto" library="NbsLibrary">
<doc>:param path: meta.zip path or meta.xml path</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.092" starttime="20180528 16:48:30.092"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.092" starttime="20180528 16:48:30.090"></status>
</kw>
<kw name="Set The Default Value To All BTSMED Parameter" library="Common_CLI_Keyword">
<kw name="Ensure Enter BTSMED Cli" library="Common_CLI_Keyword">
<kw name="Stop BTSMED Cli" library="Common_CLI_Keyword">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>su - Nemuadmin -c "${G_BTSMED_PATH}/cli/bin/imp-cli-control.sh stop"</arg>
<arg>shell=${True}</arg>
<arg>timeout=${G_RUN_PROCESS_TIMEOUT}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.093" starttime="20180528 16:48:30.093"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.093" starttime="20180528 16:48:30.093"></status>
</kw>
<kw name="Startup BTSMED Cli" library="Common_CLI_Keyword">
<kw name="Start Btsmed Cli" library="NbsLibrary">
<doc>startup btsmed cli</doc>
<arguments>
<arg>cmd=su - Nemuadmin -c "${G_BTSMED_PATH}/cli/bin/imp-cli-control.sh start"</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.094" starttime="20180528 16:48:30.094"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.094" starttime="20180528 16:48:30.093"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.094" starttime="20180528 16:48:30.092"></status>
</kw>
<kw name="Config List Via Cli" library="NbsLibrary">
<doc>list configuration for one mo or a path--config list</doc>
<arguments>
<arg>config list</arg>
<arg>--dn all</arg>
</arguments>
<assign>
<var>&amp;{list_result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.094" starttime="20180528 16:48:30.094"></status>
</kw>
<kw name="Change Config Set Value" library="NbsLibrary">
<doc>change default config for set command</doc>
<arguments>
<arg>&amp;{list_result}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.095" starttime="20180528 16:48:30.095"></status>
</kw>
<kw name="Stop BTSMED Cli" library="Common_CLI_Keyword">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>su - Nemuadmin -c "${G_BTSMED_PATH}/cli/bin/imp-cli-control.sh stop"</arg>
<arg>shell=${True}</arg>
<arg>timeout=${G_RUN_PROCESS_TIMEOUT}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.095" starttime="20180528 16:48:30.095"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.095" starttime="20180528 16:48:30.095"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.095" starttime="20180528 16:48:30.092"></status>
</kw>
<kw name="Query The Java Process" library="Common_Mixed_Keyword">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ps -aux|grep java</arg>
<arg>shell=${True}</arg>
<arg>cwd=/root/workspace/gerrit/IMP/test/ET/resources</arg>
<arg>stderr=STDOUT</arg>
<arg>timeout=10</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.096" starttime="20180528 16:48:30.096"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result.stdout}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.096" starttime="20180528 16:48:30.096"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.097" starttime="20180528 16:48:30.096"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Get BTSMED Process ID</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${id}</var>
</assign>
<kw name="Get Btsmed Process Id" library="common_lib">
<status status="NOT_RUN" endtime="20180528 16:48:30.097" starttime="20180528 16:48:30.097"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.097" starttime="20180528 16:48:30.097"></status>
</kw>
<kw name="Config Set IP To BTSMED" library="Common_CM_Keyword">
<kw name="Get The IP And Netmask And Getway Of The Docker" library="Common_CM_Keyword">
<kw name="Get Local Ip" library="CM_lib">
<arguments>
<arg>eth0</arg>
</arguments>
<assign>
<var>${G_NB_IP_Docker}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.098" starttime="20180528 16:48:30.098"></status>
</kw>
<kw name="Get Local Ip" library="CM_lib">
<arguments>
<arg>eth1</arg>
</arguments>
<assign>
<var>${G_SB_IP_Docker}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.099" starttime="20180528 16:48:30.098"></status>
</kw>
<kw name="Get Mask Ip" library="CM_lib">
<arguments>
<arg>eth0</arg>
</arguments>
<assign>
<var>${G_NB_MASK_Docker_INT}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.099" starttime="20180528 16:48:30.099"></status>
</kw>
<kw name="Get Mask Ip" library="CM_lib">
<arguments>
<arg>eth1</arg>
</arguments>
<assign>
<var>${G_SB_MASK_Docker_INT}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.099" starttime="20180528 16:48:30.099"></status>
</kw>
<kw name="Get Gateway From Local Ip" library="CM_lib">
<arguments>
<arg>${G_NB_IP_Docker}</arg>
</arguments>
<assign>
<var>${G_NB_GATEWAY_Docker}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.100" starttime="20180528 16:48:30.099"></status>
</kw>
<kw name="Get Gateway From Local Ip" library="CM_lib">
<arguments>
<arg>${G_SB_IP_Docker}</arg>
</arguments>
<assign>
<var>${G_SB_GATEWAY_Docker}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.100" starttime="20180528 16:48:30.100"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${G_NB_MASK_Docker_INT}</arg>
</arguments>
<assign>
<var>${G_NB_MASK_Docker}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.100" starttime="20180528 16:48:30.100"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${G_SB_MASK_Docker_INT}</arg>
</arguments>
<assign>
<var>${G_SB_MASK_Docker}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.101" starttime="20180528 16:48:30.100"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${G_NB_IP_Docker}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.101" starttime="20180528 16:48:30.101"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${G_SB_IP_Docker}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.101" starttime="20180528 16:48:30.101"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${G_NB_MASK_Docker}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.102" starttime="20180528 16:48:30.101"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${G_SB_MASK_Docker}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.102" starttime="20180528 16:48:30.102"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${G_NB_GATEWAY_Docker}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.102" starttime="20180528 16:48:30.102"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${G_SB_GATEWAY_Docker}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.103" starttime="20180528 16:48:30.103"></status>
</kw>
<kw name="Get Local Ipv6" library="CM_lib">
<arguments>
<arg>eth0</arg>
</arguments>
<assign>
<var>${G_NB_IPV6_Docker}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.103" starttime="20180528 16:48:30.103"></status>
</kw>
<kw name="Get Local Ipv6" library="CM_lib">
<arguments>
<arg>eth1</arg>
</arguments>
<assign>
<var>${G_SB_IPV6_Docker}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.103" starttime="20180528 16:48:30.103"></status>
</kw>
<kw name="Get Mask Ipv6" library="CM_lib">
<arguments>
<arg>eth0</arg>
</arguments>
<assign>
<var>${G_NB_IPV6_MASK_Docker_INT}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.104" starttime="20180528 16:48:30.104"></status>
</kw>
<kw name="Get Mask Ipv6" library="CM_lib">
<arguments>
<arg>eth1</arg>
</arguments>
<assign>
<var>${G_SB_IPV6_MASK_Docker_INT}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.104" starttime="20180528 16:48:30.104"></status>
</kw>
<kw name="Get Gateway From Local Ipv6" library="CM_lib">
<arguments>
<arg>${G_NB_IPV6_Docker}</arg>
</arguments>
<assign>
<var>${G_NB_IPV6_GATEWAY_Docker}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.104" starttime="20180528 16:48:30.104"></status>
</kw>
<kw name="Get Gateway From Local Ipv6" library="CM_lib">
<arguments>
<arg>${G_SB_IPV6_Docker}</arg>
</arguments>
<assign>
<var>${G_SB_IPV6_GATEWAY_Docker}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.105" starttime="20180528 16:48:30.104"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${G_NB_IPV6_MASK_Docker_INT}</arg>
</arguments>
<assign>
<var>${G_NB_IPV6_MASK_Docker}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.105" starttime="20180528 16:48:30.105"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${G_SB_IPV6_MASK_Docker_INT}</arg>
</arguments>
<assign>
<var>${G_SB_IPV6_MASK_Docker}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.105" starttime="20180528 16:48:30.105"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${G_NB_IPV6_Docker}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.106" starttime="20180528 16:48:30.105"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${G_SB_IPV6_Docker}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.106" starttime="20180528 16:48:30.106"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${G_NB_IPV6_MASK_Docker}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.106" starttime="20180528 16:48:30.106"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${G_SB_IPV6_MASK_Docker}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.107" starttime="20180528 16:48:30.106"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${G_NB_IPV6_GATEWAY_Docker}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.107" starttime="20180528 16:48:30.107"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${G_SB_IPV6_GATEWAY_Docker}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.107" starttime="20180528 16:48:30.107"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>{'uri':'https://${G_SB_IP_Docker}:8001/PM.BTS-1.20161128.010000.LTE.xml.gz','size':'50','operation':'0'}</arg>
</arguments>
<assign>
<var>${G_BTS_CONTENT_DEFAULT}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.108" starttime="20180528 16:48:30.107"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>{'uri':'https://[${G_SB_IPV6_Docker}]:8001/PM.BTS-1.20161128.010000.LTE.xml.gz','size':'50','operation':'0'}</arg>
</arguments>
<assign>
<var>${G_BTS_CONTENT_BY_IPV6_DEFAULT}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.108" starttime="20180528 16:48:30.108"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${G_BTS_CONTENT_DEFAULT}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.108" starttime="20180528 16:48:30.108"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${G_BTS_CONTENT_BY_IPV6_DEFAULT}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.109" starttime="20180528 16:48:30.109"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>[${G_NB_IPV6_Docker}]</arg>
</arguments>
<assign>
<var>${G_NETACT_SERVER_IPV6}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.109" starttime="20180528 16:48:30.109"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${G_NETACT_SERVER_IPV6}:${G_NETACT_SERVER_PORT}/services</arg>
</arguments>
<assign>
<var>${G_NBS_SERVER_LINK_IPV6}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.109" starttime="20180528 16:48:30.109"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${G_NETACT_SERVER_IPV6}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.110" starttime="20180528 16:48:30.110"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${G_NBS_SERVER_LINK_IPV6}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.110" starttime="20180528 16:48:30.110"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>{'#text': u'${G_SB_IP_Docker}', u'@name': u'ntpServerIpAddr'}, {'#text': u'available', u'@name': u'ntpStatus'}</arg>
</arguments>
<assign>
<var>${G_NTP_IP_REACHABLE_CONTENT_1}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.110" starttime="20180528 16:48:30.110"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>{'#text': u'${G_NB_IP_Docker}', u'@name': u'ntpServerIpAddr'}, {'#text': u'available', u'@name': u'ntpStatus'}</arg>
</arguments>
<assign>
<var>${G_NTP_IP_REACHABLE_CONTENT_2}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.111" starttime="20180528 16:48:30.111"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${G_NTP_IP_REACHABLE_CONTENT_1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.111" starttime="20180528 16:48:30.111"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${G_NTP_IP_REACHABLE_CONTENT_2}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.111" starttime="20180528 16:48:30.111"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.111" starttime="20180528 16:48:30.098"></status>
</kw>
<kw name="Config Set Default IP And Validate It" library="Common_CM_Keyword">
<arguments>
<arg>${G_FUZZY_MATCH_IP}</arg>
<arg>${G_FUZZY_MATCH_IP}</arg>
</arguments>
<kw name="Ensure Enter BTSMED Cli" library="Common_CLI_Keyword">
<kw name="Stop BTSMED Cli" library="Common_CLI_Keyword">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>su - Nemuadmin -c "${G_BTSMED_PATH}/cli/bin/imp-cli-control.sh stop"</arg>
<arg>shell=${True}</arg>
<arg>timeout=${G_RUN_PROCESS_TIMEOUT}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.113" starttime="20180528 16:48:30.113"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.113" starttime="20180528 16:48:30.112"></status>
</kw>
<kw name="Startup BTSMED Cli" library="Common_CLI_Keyword">
<kw name="Start Btsmed Cli" library="NbsLibrary">
<doc>startup btsmed cli</doc>
<arguments>
<arg>cmd=su - Nemuadmin -c "${G_BTSMED_PATH}/cli/bin/imp-cli-control.sh start"</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.114" starttime="20180528 16:48:30.114"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.114" starttime="20180528 16:48:30.113"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.114" starttime="20180528 16:48:30.112"></status>
</kw>
<kw name="Change Config Set Value" library="NbsLibrary">
<doc>change default config for set command</doc>
<arguments>
<arg>northboundIpv4Address=${G_NB_IP_Docker}</arg>
<arg>northboundIpv4Gateway=${G_NB_GATEWAY_Docker}</arg>
<arg>northboundIpv4PrefixLength=${G_NB_MASK_Docker}</arg>
<arg>southboundIpv4Address=${G_SB_IP_Docker}</arg>
<arg>southboundIpv4Gateway=${G_SB_GATEWAY_Docker}</arg>
<arg>southboundIpv4PrefixLength=${G_SB_MASK_Docker}</arg>
<arg>dnsIPAddress=127.0.0.11</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.114" starttime="20180528 16:48:30.114"></status>
</kw>
<kw name="Set Part Of Parameters" library="Common_CLI_Keyword">
<kw name="Config Set Via Cli" library="NbsLibrary">
<doc>set configuration for one mo or a path--config set</doc>
<arguments>
<arg>config set</arg>
<arg>${object}</arg>
<arg>${path}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.115" starttime="20180528 16:48:30.115"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${G_RESTART_MSG}</arg>
<arg>msg=Validate config set sucessfully.</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.115" starttime="20180528 16:48:30.115"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.115" starttime="20180528 16:48:30.115"></status>
</kw>
<kw name="Validate BTSMED Server Listener IP In OS" library="Common_BTSMED_Keyword">
<arguments>
<arg>${G_SB_IP_Docker}</arg>
<arg>${G_NB_IP_Docker}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${G_BTSMED_START_TIMEOUT_300}</arg>
<arg>200ms</arg>
<arg>Validate BTSMED Special Port Startup</arg>
<arg>${G_BTSMED_SPECIAL_PORT}</arg>
</arguments>
<kw name="Validate BTSMED Special Port Startup" library="Common_Mixed_Keyword">
<arguments>
<arg>${G_BTSMED_SPECIAL_PORT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>netstat -nap | grep ${port}|grep LISTEN</arg>
<arg>shell=${True}</arg>
<arg>timeout=${G_RUN_PROCESS_TIMEOUT}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.117" starttime="20180528 16:48:30.117"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>msg=verify port ${port} have been occupied</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.117" starttime="20180528 16:48:30.117"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.117" starttime="20180528 16:48:30.116"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.117" starttime="20180528 16:48:30.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${iptype}" == "ipv4"</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>${G_BTSMED_START_TIMEOUT_90}</arg>
<arg>200ms</arg>
<arg>Validate BTSMED Port Startup</arg>
<arg>${southip}</arg>
<arg>port=8102</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>${G_BTSMED_START_TIMEOUT_90}</arg>
<arg>200ms</arg>
<arg>Verify Ip Service Startup</arg>
<arg>${southip}</arg>
<arg>8102</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${G_BTSMED_START_TIMEOUT_90}</arg>
<arg>200ms</arg>
<arg>Validate BTSMED Port Startup</arg>
<arg>${southip}</arg>
<arg>port=8102</arg>
</arguments>
<kw name="Validate BTSMED Port Startup" library="Common_BTSMED_Keyword">
<arguments>
<arg>${southip}</arg>
<arg>port=8102</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>netstat -ntpl | grep -E ${ip} | grep ${port}</arg>
<arg>shell=True</arg>
<arg>timeout=${G_RUN_PROCESS_TIMEOUT}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.119" starttime="20180528 16:48:30.119"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${result.stderr}</arg>
<arg>msg=Verify the port is listen</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.119" starttime="20180528 16:48:30.119"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>msg=Verify the port is listen</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.119" starttime="20180528 16:48:30.119"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>0.0.0.0:${port}</arg>
<arg>msg=Verify the port is not listen in 0.0.0.0:${port}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.120" starttime="20180528 16:48:30.120"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.120" starttime="20180528 16:48:30.118"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.120" starttime="20180528 16:48:30.118"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${G_BTSMED_START_TIMEOUT_90}</arg>
<arg>200ms</arg>
<arg>Verify Ip Service Startup</arg>
<arg>${southip}</arg>
<arg>8102</arg>
</arguments>
<kw name="Verify Ip Service Startup" library="common_lib">
<arguments>
<arg>${southip}</arg>
<arg>8102</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.121" starttime="20180528 16:48:30.120"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.121" starttime="20180528 16:48:30.120"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.121" starttime="20180528 16:48:30.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${iptype}" == "ipv4"</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>${G_BTSMED_START_TIMEOUT}</arg>
<arg>200ms</arg>
<arg>Validate BTSMED Port Startup</arg>
<arg>${southip}</arg>
<arg>port=8103</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>${G_BTSMED_START_TIMEOUT}</arg>
<arg>200ms</arg>
<arg>Verify Ip Service Startup</arg>
<arg>${southip}</arg>
<arg>8103</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${G_BTSMED_START_TIMEOUT}</arg>
<arg>200ms</arg>
<arg>Validate BTSMED Port Startup</arg>
<arg>${southip}</arg>
<arg>port=8103</arg>
</arguments>
<kw name="Validate BTSMED Port Startup" library="Common_BTSMED_Keyword">
<arguments>
<arg>${southip}</arg>
<arg>port=8103</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>netstat -ntpl | grep -E ${ip} | grep ${port}</arg>
<arg>shell=True</arg>
<arg>timeout=${G_RUN_PROCESS_TIMEOUT}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.122" starttime="20180528 16:48:30.122"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${result.stderr}</arg>
<arg>msg=Verify the port is listen</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.122" starttime="20180528 16:48:30.122"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>msg=Verify the port is listen</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.123" starttime="20180528 16:48:30.123"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>0.0.0.0:${port}</arg>
<arg>msg=Verify the port is not listen in 0.0.0.0:${port}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.123" starttime="20180528 16:48:30.123"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.123" starttime="20180528 16:48:30.122"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.123" starttime="20180528 16:48:30.121"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${G_BTSMED_START_TIMEOUT}</arg>
<arg>200ms</arg>
<arg>Verify Ip Service Startup</arg>
<arg>${southip}</arg>
<arg>8103</arg>
</arguments>
<kw name="Verify Ip Service Startup" library="common_lib">
<arguments>
<arg>${southip}</arg>
<arg>8103</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.124" starttime="20180528 16:48:30.124"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.124" starttime="20180528 16:48:30.123"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.124" starttime="20180528 16:48:30.121"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${iptype}" == "ipv4"</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>${G_BTSMED_START_TIMEOUT}</arg>
<arg>200ms</arg>
<arg>Validate BTSMED Port Startup</arg>
<arg>${northip}</arg>
<arg>port=8443</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>${G_BTSMED_START_TIMEOUT}</arg>
<arg>200ms</arg>
<arg>Verify Ip Service Startup</arg>
<arg>${northip}</arg>
<arg>8443</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${G_BTSMED_START_TIMEOUT}</arg>
<arg>200ms</arg>
<arg>Validate BTSMED Port Startup</arg>
<arg>${northip}</arg>
<arg>port=8443</arg>
</arguments>
<kw name="Validate BTSMED Port Startup" library="Common_BTSMED_Keyword">
<arguments>
<arg>${northip}</arg>
<arg>port=8443</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>netstat -ntpl | grep -E ${ip} | grep ${port}</arg>
<arg>shell=True</arg>
<arg>timeout=${G_RUN_PROCESS_TIMEOUT}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.125" starttime="20180528 16:48:30.125"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${result.stderr}</arg>
<arg>msg=Verify the port is listen</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.126" starttime="20180528 16:48:30.126"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>msg=Verify the port is listen</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.126" starttime="20180528 16:48:30.126"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>0.0.0.0:${port}</arg>
<arg>msg=Verify the port is not listen in 0.0.0.0:${port}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.126" starttime="20180528 16:48:30.126"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.126" starttime="20180528 16:48:30.125"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.127" starttime="20180528 16:48:30.125"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${G_BTSMED_START_TIMEOUT}</arg>
<arg>200ms</arg>
<arg>Verify Ip Service Startup</arg>
<arg>${northip}</arg>
<arg>8443</arg>
</arguments>
<kw name="Verify Ip Service Startup" library="common_lib">
<arguments>
<arg>${northip}</arg>
<arg>8443</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.127" starttime="20180528 16:48:30.127"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.127" starttime="20180528 16:48:30.127"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.127" starttime="20180528 16:48:30.124"></status>
</kw>
<kw name="BTSMED Process Should Be Startup" library="common_lib">
<status status="NOT_RUN" endtime="20180528 16:48:30.128" starttime="20180528 16:48:30.127"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.128" starttime="20180528 16:48:30.116"></status>
</kw>
<kw name="Close Btsmed Cli" library="NbsLibrary">
<doc>close btsmed cli operation</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.128" starttime="20180528 16:48:30.128"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.128" starttime="20180528 16:48:30.112"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.128" starttime="20180528 16:48:30.097"></status>
</kw>
<kw name="Netact Server Retry" library="common_lib">
<arguments>
<arg>port=${G_NETACT_SERVER_PORT}</arg>
<arg>certfile=${G_SOUTH_CER_PATH}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.128" starttime="20180528 16:48:30.128"></status>
</kw>
<kw name="CMP Initialization Via Cli" library="Common_Security_Keyword">
<kw name="Enter Cli And Put The Temp File" library="Common_Security_Keyword">
<arguments>
<arg>${G_IMPORT_PATH}</arg>
<arg>${G_IMPORT_FILE}</arg>
</arguments>
<kw name="Put The Temp File" library="Common_Security_Keyword">
<arguments>
<arg>${path}</arg>
<arg>${object}</arg>
</arguments>
<kw name="Get Path Of Btsmed" library="common_lib">
<assign>
<var>${btsmed_path}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.130" starttime="20180528 16:48:30.130"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${btsmed_path}/${path}</arg>
</arguments>
<assign>
<var>${filepath}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.130" starttime="20180528 16:48:30.130"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>cp -f /root/workspace/gerrit/IMP/test/ET/resources/SecurityCertificate/${object}/* .</arg>
<arg>shell=True</arg>
<arg>cwd=${filepath}</arg>
<arg>timeout=${G_TIMEOUT}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.130" starttime="20180528 16:48:30.130"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ls</arg>
<arg>shell=True</arg>
<arg>cwd=${filepath}</arg>
<arg>timeout=${G_TIMEOUT}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.131" starttime="20180528 16:48:30.131"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result.stdout}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.131" starttime="20180528 16:48:30.131"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.131" starttime="20180528 16:48:30.129"></status>
</kw>
<kw name="Ensure Enter BTSMED Cli" library="Common_CLI_Keyword">
<kw name="Stop BTSMED Cli" library="Common_CLI_Keyword">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>su - Nemuadmin -c "${G_BTSMED_PATH}/cli/bin/imp-cli-control.sh stop"</arg>
<arg>shell=${True}</arg>
<arg>timeout=${G_RUN_PROCESS_TIMEOUT}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.132" starttime="20180528 16:48:30.132"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.132" starttime="20180528 16:48:30.132"></status>
</kw>
<kw name="Startup BTSMED Cli" library="Common_CLI_Keyword">
<kw name="Start Btsmed Cli" library="NbsLibrary">
<doc>startup btsmed cli</doc>
<arguments>
<arg>cmd=su - Nemuadmin -c "${G_BTSMED_PATH}/cli/bin/imp-cli-control.sh start"</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.133" starttime="20180528 16:48:30.133"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.134" starttime="20180528 16:48:30.133"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.134" starttime="20180528 16:48:30.131"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.134" starttime="20180528 16:48:30.129"></status>
</kw>
<kw name="CMP And LDAP Server Status Is Normal" library="Common_Security_Keyword">
<kw name="Get CMP Server CA Page Status" library="CA_ENV_Check">
<status status="NOT_RUN" endtime="20180528 16:48:30.134" starttime="20180528 16:48:30.134"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.134" starttime="20180528 16:48:30.134"></status>
</kw>
<kw name="Configure And Activate The CMP Parameter To BTSMED Via Command" library="Common_Security_Keyword">
<kw name="Change Config Set Value" library="NbsLibrary">
<doc>change default config for set command</doc>
<arguments>
<arg>serverPath=${serverPath}</arg>
<arg>neCertificateUpdateTime=${neCertificateUpdateTime}</arg>
<arg>caSubjectName=${caSubjectName}</arg>
<arg>serverPort=${serverPort}</arg>
<arg>caCertificateUpdateTime=${caCertificateUpdateTime}</arg>
<arg>eeSubjectName=${eeSubjectName}</arg>
<arg>serverHost=${serverHost}</arg>
<arg>cmpRefNum=${G_REFNUM}</arg>
<arg>cmpPreSharedKey=${G_PRESHAREDKEY}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.135" starttime="20180528 16:48:30.135"></status>
</kw>
<kw name="Config Set Via Cli" library="NbsLibrary">
<doc>set configuration for one mo or a path--config set</doc>
<arguments>
<arg>config set</arg>
<arg>${object}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.136" starttime="20180528 16:48:30.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${check}' == 'True'</arg>
<arg>Filter Msg From String</arg>
<arg>${result}</arg>
<arg>${serverPort_2}</arg>
<arg>${serverPath_2}</arg>
<arg>${neCertificateUpdateTime_2}</arg>
<arg>${caSubjectName_2}</arg>
<arg>${caCertificateUpdateTime_2}</arg>
<arg>${serverHost_2}</arg>
<arg>${eeSubjectName_2}</arg>
</arguments>
<kw name="Filter Msg From String" library="Security_Certificate">
<arguments>
<arg>${result}</arg>
<arg>${serverPort_2}</arg>
<arg>${serverPath_2}</arg>
<arg>${neCertificateUpdateTime_2}</arg>
<arg>${caSubjectName_2}</arg>
<arg>${caCertificateUpdateTime_2}</arg>
<arg>${serverHost_2}</arg>
<arg>${eeSubjectName_2}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.136" starttime="20180528 16:48:30.136"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.136" starttime="20180528 16:48:30.136"></status>
</kw>
<kw name="Validate The Configuration Result" library="Common_Security_Keyword">
<arguments>
<arg>${serverPath}</arg>
<arg>${neCertificateUpdateTime}</arg>
<arg>${caSubjectName}</arg>
<arg>${serverPort}</arg>
<arg>${caCertificateUpdateTime}</arg>
<arg>${eeSubjectName}</arg>
<arg>${serverHost}</arg>
<arg>${object}</arg>
</arguments>
<kw name="Config List Via Cli" library="NbsLibrary">
<doc>list configuration for one mo or a path--config list</doc>
<arguments>
<arg>config list</arg>
<arg>${object}</arg>
</arguments>
<assign>
<var>${list_result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.137" starttime="20180528 16:48:30.137"></status>
</kw>
<kw name="Validate CMP Configuration Result List" library="Common_Security_Keyword">
<arguments>
<arg>${list_result}</arg>
<arg>${serverPath}</arg>
<arg>${neCertificateUpdateTime}</arg>
<arg>${caSubjectName}</arg>
<arg>${serverPort}</arg>
<arg>${caCertificateUpdateTime}</arg>
<arg>${eeSubjectName}</arg>
<arg>${serverHost}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${list_result['serverPath']}</arg>
<arg>${serverPath}</arg>
<arg>msg=CLI operator receive configuration result and verify serverPath should be ${serverPath}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.138" starttime="20180528 16:48:30.138"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${list_result['neCertificateUpdateTime']}</arg>
<arg>${neCertificateUpdateTime}</arg>
<arg>msg=CLI operator receive configuration result and verify neCertificateUpdateTime should be ${neCertificateUpdateTime}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.138" starttime="20180528 16:48:30.138"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${list_result['caSubjectName']}</arg>
<arg>${caSubjectName}</arg>
<arg>msg=CLI operator receive configuration result and verify caSubjectName should be ${caSubjectName}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.139" starttime="20180528 16:48:30.138"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${list_result['serverPort']}</arg>
<arg>${serverPort}</arg>
<arg>msg=CLI operator receive configuration result and verify serverPort should be ${serverPort}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.139" starttime="20180528 16:48:30.139"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${list_result['caCertificateUpdateTime']}</arg>
<arg>${caCertificateUpdateTime}</arg>
<arg>msg=CLI operator receive configuration result and verify caCertificateUpdateTime should be ${caCertificateUpdateTime}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.139" starttime="20180528 16:48:30.139"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${list_result['eeSubjectName']}</arg>
<arg>${eeSubjectName}</arg>
<arg>msg=CLI operator receive configuration result and verify eeSubjectName should be ${eeSubjectName}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.140" starttime="20180528 16:48:30.140"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${list_result['serverHost']}</arg>
<arg>${serverHost}</arg>
<arg>msg=CLI operator receive configuration result and verify serverHost should be ${serverHost}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.140" starttime="20180528 16:48:30.140"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.140" starttime="20180528 16:48:30.137"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.140" starttime="20180528 16:48:30.136"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.140" starttime="20180528 16:48:30.135"></status>
</kw>
<kw name="BTSMED Perform CMP Initialization Via Cli" library="Common_Security_Keyword">
<arguments>
<arg>cmp initialize</arg>
</arguments>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Send Command To The BTSMED And Validate The Result</arg>
<arg>${action}</arg>
<arg>${status}</arg>
<arg>${object}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Send Command To The BTSMED And Validate The Result" library="Common_Security_Keyword">
<arguments>
<arg>${action}</arg>
<arg>${status}</arg>
<arg>${object}</arg>
</arguments>
<kw name="Common Config Via Cli" library="NbsLibrary">
<doc>common operation via cli</doc>
<arguments>
<arg>${action}</arg>
</arguments>
<assign>
<var>${init_result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.142" starttime="20180528 16:48:30.142"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${init_result}</arg>
<arg>msg=The BTSMED CLI return the feedback in time and it should be empty</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.142" starttime="20180528 16:48:30.142"></status>
</kw>
<kw name="Validate The Operation Result" library="Common_CLI_Keyword">
<arguments>
<arg>${status}</arg>
<arg>${object}</arg>
</arguments>
<kw name="Config List Via Cli" library="NbsLibrary">
<doc>list configuration for one mo or a path--config list</doc>
<arguments>
<arg>config list</arg>
<arg>${object}</arg>
</arguments>
<assign>
<var>${list_result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.143" starttime="20180528 16:48:30.143"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${list_result['state']}</arg>
<arg>${state}</arg>
<arg>msg=The BTSMED CLI return the feedback in time and the state should be ${state}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.143" starttime="20180528 16:48:30.143"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.143" starttime="20180528 16:48:30.142"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.143" starttime="20180528 16:48:30.141"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.143" starttime="20180528 16:48:30.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>3x</arg>
<arg>4sec</arg>
<arg>Send Command To The BTSMED And Validate The Result</arg>
<arg>${action}</arg>
<arg>${status}</arg>
<arg>${object}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3x</arg>
<arg>4sec</arg>
<arg>Send Command To The BTSMED And Validate The Result</arg>
<arg>${action}</arg>
<arg>${status}</arg>
<arg>${object}</arg>
</arguments>
<kw name="Send Command To The BTSMED And Validate The Result" library="Common_Security_Keyword">
<arguments>
<arg>${action}</arg>
<arg>${status}</arg>
<arg>${object}</arg>
</arguments>
<kw name="Common Config Via Cli" library="NbsLibrary">
<doc>common operation via cli</doc>
<arguments>
<arg>${action}</arg>
</arguments>
<assign>
<var>${init_result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.145" starttime="20180528 16:48:30.145"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${init_result}</arg>
<arg>msg=The BTSMED CLI return the feedback in time and it should be empty</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.145" starttime="20180528 16:48:30.145"></status>
</kw>
<kw name="Validate The Operation Result" library="Common_CLI_Keyword">
<arguments>
<arg>${status}</arg>
<arg>${object}</arg>
</arguments>
<kw name="Config List Via Cli" library="NbsLibrary">
<doc>list configuration for one mo or a path--config list</doc>
<arguments>
<arg>config list</arg>
<arg>${object}</arg>
</arguments>
<assign>
<var>${list_result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.146" starttime="20180528 16:48:30.146"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${list_result['state']}</arg>
<arg>${state}</arg>
<arg>msg=The BTSMED CLI return the feedback in time and the state should be ${state}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.146" starttime="20180528 16:48:30.146"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.146" starttime="20180528 16:48:30.145"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.146" starttime="20180528 16:48:30.144"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.146" starttime="20180528 16:48:30.144"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.146" starttime="20180528 16:48:30.143"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.147" starttime="20180528 16:48:30.140"></status>
</kw>
<kw name="Close Btsmed Cli" library="NbsLibrary">
<doc>close btsmed cli operation</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.147" starttime="20180528 16:48:30.147"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.147" starttime="20180528 16:48:30.129"></status>
</kw>
<kw name="Set Btsmed Ip With Dns" library="NbsLibrary">
<doc>set btsmed ip or btsmed_id with dns in /etc/hosts</doc>
<arguments>
<arg>impnhost=${G_NB_IP_Docker}</arg>
<arg>impshost=${G_SB_IP_Docker}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.147" starttime="20180528 16:48:30.147"></status>
</kw>
<kw name="Register Common BTSMED" library="Common_NetAct_Keyword">
<kw name="Registration" library="Common_NetAct_Keyword">
<arguments>
<arg>${G_BTSMED_ID}</arg>
</arguments>
<kw name="Enable The TLS And Set The Server Certificate" library="Common_NetAct_Keyword">
<arguments>
<arg>${G_CA_CERTIFICATE}</arg>
</arguments>
<kw name="Set Btsmed Cert" library="NbsLibrary">
<doc>:param port: set the NetAct client port</doc>
<arguments>
<arg>8443</arg>
<arg>${ca_certs}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.149" starttime="20180528 16:48:30.149"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.149" starttime="20180528 16:48:30.148"></status>
</kw>
<kw name="Add The DNS For BTSMED" library="Common_NetAct_Keyword">
<arguments>
<arg>${mrbts-id}</arg>
<arg>${btsmed_northboundvip}</arg>
</arguments>
<kw name="Addhost" library="common_lib">
<arguments>
<arg>${ip}</arg>
<arg>${id}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.150" starttime="20180528 16:48:30.150"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.150" starttime="20180528 16:48:30.149"></status>
</kw>
<kw name="Set Netact Default Response" library="NbsLibrary">
<doc>Simulate the NetAct server,translate these flat parameters to nested ones,</doc>
<arguments>
<arg>managerRegistrationId=${mgr}</arg>
<arg>managerRegistrationKey=${managerRegistrationKey}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.150" starttime="20180528 16:48:30.150"></status>
</kw>
<kw name="Set Btsmed Basic Auth" library="NbsLibrary">
<doc>set the NetAct</doc>
<arguments>
<arg>wsuser</arg>
<arg>wspassword</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.151" starttime="20180528 16:48:30.150"></status>
</kw>
<kw name="NetAct Process The Start Registration To BTSMED Then Validate The Response" library="Common_NetAct_Keyword">
<arguments>
<arg>${mrbts-id}</arg>
<arg>${managerRegistrationKey}</arg>
<arg>${mgr}</arg>
<arg>nbs_server_link=${nbs_server_link}</arg>
</arguments>
<kw name="Start Registration" library="NbsLibrary">
<arguments>
<arg>managerIdentity.uniqueId=${mgr}</arg>
<arg>managerIdentity.type=demo</arg>
<arg>managerIdentity.release=1.0</arg>
<arg>managerIdentity.vendor=NOKIA</arg>
<arg>agentUniqueId=${mrbts-id}</arg>
<arg>notificationConsumerURL=${nbs_server_link}</arg>
<arg>managerNonce=${managerRegistrationKey}</arg>
<arg>reRegisterInterval=20</arg>
<arg>soc=cid:12345</arg>
<arg>cid:12345=file:////root/workspace/gerrit/IMP/test/ET/resources/soc.xml</arg>
</arguments>
<assign>
<var>${registration response}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.151" starttime="20180528 16:48:30.151"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${registration response}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.152" starttime="20180528 16:48:30.152"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${registration response['agentCertificate']}</arg>
</arguments>
<assign>
<var>${file}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.152" starttime="20180528 16:48:30.152"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${registration response['${file}']}</arg>
</arguments>
<assign>
<var>${agentCertificate}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.152" starttime="20180528 16:48:30.152"></status>
</kw>
<kw name="Validate Registration Response" library="Common_NetAct_Keyword">
<arguments>
<arg>${registration response}</arg>
<arg>${mrbts-id}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${regitration response['agentIdentity']['vendor']}</arg>
<arg>NOKIA</arg>
<arg>msg=NetAct receive start regitration response and verify the value of vendor in response is 'NOKIA'</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.153" starttime="20180528 16:48:30.153"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${regitration response['agentIdentity']['type']}</arg>
<arg>BTSMED</arg>
<arg>msg=NetAct receive start regitration response and verify the value of type in response is 'BTSMED'</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.153" starttime="20180528 16:48:30.153"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${regitration response['agentIdentity']['uniqueId']}</arg>
<arg>${mrbts-id}</arg>
<arg>msg=NetAct receive start regitration response and verify the value of uniqueId in response is ${mrbts-id}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.154" starttime="20180528 16:48:30.154"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${regitration response['registrationComplete']}</arg>
<arg>${False}</arg>
<arg>msg=NetAct receive strat regitration response and verify the value of registrationComplete in response is ${False}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.154" starttime="20180528 16:48:30.154"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.154" starttime="20180528 16:48:30.153"></status>
</kw>
<kw name="Write To File" library="common_lib">
<arguments>
<arg>${registration response['${file}']}</arg>
<arg>${G_NE_DER}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.154" starttime="20180528 16:48:30.154"></status>
</kw>
<kw name="Agent Cert Verify" library="NbsLibrary">
<doc>refer to registration phase of NE3S_WS_Common_Interface_Specification</doc>
<arguments>
<arg>${G_NE_DER}</arg>
<arg>/root/workspace/gerrit/IMP/test/ET/resources/SecurityCertificate/CaCertificate/</arg>
</arguments>
<assign>
<var>${agent cert}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.155" starttime="20180528 16:48:30.155"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${agent cert}</arg>
<arg>msg=NetAct receive BTSMED certificate via start registration response then NetAct verfify this certify is valid</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.155" starttime="20180528 16:48:30.155"></status>
</kw>
<kw name="Public Key Verify" library="NbsLibrary">
<doc>refer to registration phase of NE3S_WS_Common_Interface_Specification</doc>
<arguments>
<arg>${registration response['agentResponse']}</arg>
<arg>${managerRegistrationKey}</arg>
<arg>${G_NE_DER}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.156" starttime="20180528 16:48:30.155"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.156" starttime="20180528 16:48:30.151"></status>
</kw>
<kw name="NetAct Process The Completeregistration To BTSMED Then Validate The Response" library="Common_NetAct_Keyword">
<arguments>
<arg>${mrbts-id}</arg>
<arg>${mgr}</arg>
</arguments>
<kw name="Private Key Sign" library="NbsLibrary">
<doc>refer to registration phase of NE3S_WS_Common_Interface_Specification</doc>
<arguments>
<arg>${registration response['agentNonce']}</arg>
<arg>/root/workspace/gerrit/IMP/test/ET/resources/SecurityCertificate/manager.key.der</arg>
</arguments>
<assign>
<var>${managerResponse}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.157" starttime="20180528 16:48:30.157"></status>
</kw>
<kw name="Complete Registration" library="NbsLibrary">
<arguments>
<arg>managerIdentity.uniqueId=${mgr}</arg>
<arg>managerIdentity.type=NetAct</arg>
<arg>managerIdentity.release=1.0</arg>
<arg>managerIdentity.vendor=NOKIA</arg>
<arg>managerResponse=${managerResponse}</arg>
<arg>agentUniqueId=${mrbts-id}</arg>
<arg>managerCertificate=cid:123</arg>
<arg>cid:123=file:///${G_MANAGER_DER}</arg>
</arguments>
<assign>
<var>${completeRegistration}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.157" starttime="20180528 16:48:30.157"></status>
</kw>
<kw name="Check Completeregistrationresponse" library="Common_NetAct_Keyword">
<arguments>
<arg>${completeRegistration}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${completeRegistration}</arg>
<arg>${None}</arg>
<arg>msg=NetAct receive complete registration response and verify the value of response is None</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.158" starttime="20180528 16:48:30.158"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.158" starttime="20180528 16:48:30.157"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.158" starttime="20180528 16:48:30.156"></status>
</kw>
<kw name="Switch To Hostname" library="NbsLibrary">
<doc>:param hostname: switch to the specific hostname like 127.0.0.1</doc>
<arguments>
<arg>${mrbts-id}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.158" starttime="20180528 16:48:30.158"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${start_session}'=='${True}'</arg>
<arg>Start Agent Session</arg>
<arg>${mrbts-id}</arg>
</arguments>
<kw name="Start Agent Session" library="NbsLibrary">
<doc>setup session with BTSMED</doc>
<arguments>
<arg>${mrbts-id}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.159" starttime="20180528 16:48:30.159"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.159" starttime="20180528 16:48:30.159"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.159" starttime="20180528 16:48:30.148"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.159" starttime="20180528 16:48:30.147"></status>
</kw>
<kw name="Register Common BTS" library="Common_NetAct_Keyword">
<kw name="Registration" library="Common_NetAct_Keyword">
<arguments>
<arg>${G_MRBTS_ID}</arg>
</arguments>
<kw name="Enable The TLS And Set The Server Certificate" library="Common_NetAct_Keyword">
<arguments>
<arg>${G_CA_CERTIFICATE}</arg>
</arguments>
<kw name="Set Btsmed Cert" library="NbsLibrary">
<doc>:param port: set the NetAct client port</doc>
<arguments>
<arg>8443</arg>
<arg>${ca_certs}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.160" starttime="20180528 16:48:30.160"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.160" starttime="20180528 16:48:30.160"></status>
</kw>
<kw name="Add The DNS For BTSMED" library="Common_NetAct_Keyword">
<arguments>
<arg>${mrbts-id}</arg>
<arg>${btsmed_northboundvip}</arg>
</arguments>
<kw name="Addhost" library="common_lib">
<arguments>
<arg>${ip}</arg>
<arg>${id}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.161" starttime="20180528 16:48:30.161"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.161" starttime="20180528 16:48:30.161"></status>
</kw>
<kw name="Set Netact Default Response" library="NbsLibrary">
<doc>Simulate the NetAct server,translate these flat parameters to nested ones,</doc>
<arguments>
<arg>managerRegistrationId=${mgr}</arg>
<arg>managerRegistrationKey=${managerRegistrationKey}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.162" starttime="20180528 16:48:30.161"></status>
</kw>
<kw name="Set Btsmed Basic Auth" library="NbsLibrary">
<doc>set the NetAct</doc>
<arguments>
<arg>wsuser</arg>
<arg>wspassword</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.162" starttime="20180528 16:48:30.162"></status>
</kw>
<kw name="NetAct Process The Start Registration To BTSMED Then Validate The Response" library="Common_NetAct_Keyword">
<arguments>
<arg>${mrbts-id}</arg>
<arg>${managerRegistrationKey}</arg>
<arg>${mgr}</arg>
<arg>nbs_server_link=${nbs_server_link}</arg>
</arguments>
<kw name="Start Registration" library="NbsLibrary">
<arguments>
<arg>managerIdentity.uniqueId=${mgr}</arg>
<arg>managerIdentity.type=demo</arg>
<arg>managerIdentity.release=1.0</arg>
<arg>managerIdentity.vendor=NOKIA</arg>
<arg>agentUniqueId=${mrbts-id}</arg>
<arg>notificationConsumerURL=${nbs_server_link}</arg>
<arg>managerNonce=${managerRegistrationKey}</arg>
<arg>reRegisterInterval=20</arg>
<arg>soc=cid:12345</arg>
<arg>cid:12345=file:////root/workspace/gerrit/IMP/test/ET/resources/soc.xml</arg>
</arguments>
<assign>
<var>${registration response}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.163" starttime="20180528 16:48:30.162"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${registration response}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.163" starttime="20180528 16:48:30.163"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${registration response['agentCertificate']}</arg>
</arguments>
<assign>
<var>${file}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.163" starttime="20180528 16:48:30.163"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${registration response['${file}']}</arg>
</arguments>
<assign>
<var>${agentCertificate}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.164" starttime="20180528 16:48:30.164"></status>
</kw>
<kw name="Validate Registration Response" library="Common_NetAct_Keyword">
<arguments>
<arg>${registration response}</arg>
<arg>${mrbts-id}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${regitration response['agentIdentity']['vendor']}</arg>
<arg>NOKIA</arg>
<arg>msg=NetAct receive start regitration response and verify the value of vendor in response is 'NOKIA'</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.164" starttime="20180528 16:48:30.164"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${regitration response['agentIdentity']['type']}</arg>
<arg>BTSMED</arg>
<arg>msg=NetAct receive start regitration response and verify the value of type in response is 'BTSMED'</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.165" starttime="20180528 16:48:30.164"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${regitration response['agentIdentity']['uniqueId']}</arg>
<arg>${mrbts-id}</arg>
<arg>msg=NetAct receive start regitration response and verify the value of uniqueId in response is ${mrbts-id}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.165" starttime="20180528 16:48:30.165"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${regitration response['registrationComplete']}</arg>
<arg>${False}</arg>
<arg>msg=NetAct receive strat regitration response and verify the value of registrationComplete in response is ${False}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.165" starttime="20180528 16:48:30.165"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.165" starttime="20180528 16:48:30.164"></status>
</kw>
<kw name="Write To File" library="common_lib">
<arguments>
<arg>${registration response['${file}']}</arg>
<arg>${G_NE_DER}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.166" starttime="20180528 16:48:30.166"></status>
</kw>
<kw name="Agent Cert Verify" library="NbsLibrary">
<doc>refer to registration phase of NE3S_WS_Common_Interface_Specification</doc>
<arguments>
<arg>${G_NE_DER}</arg>
<arg>/root/workspace/gerrit/IMP/test/ET/resources/SecurityCertificate/CaCertificate/</arg>
</arguments>
<assign>
<var>${agent cert}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.166" starttime="20180528 16:48:30.166"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${agent cert}</arg>
<arg>msg=NetAct receive BTSMED certificate via start registration response then NetAct verfify this certify is valid</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.166" starttime="20180528 16:48:30.166"></status>
</kw>
<kw name="Public Key Verify" library="NbsLibrary">
<doc>refer to registration phase of NE3S_WS_Common_Interface_Specification</doc>
<arguments>
<arg>${registration response['agentResponse']}</arg>
<arg>${managerRegistrationKey}</arg>
<arg>${G_NE_DER}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.167" starttime="20180528 16:48:30.167"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.167" starttime="20180528 16:48:30.162"></status>
</kw>
<kw name="NetAct Process The Completeregistration To BTSMED Then Validate The Response" library="Common_NetAct_Keyword">
<arguments>
<arg>${mrbts-id}</arg>
<arg>${mgr}</arg>
</arguments>
<kw name="Private Key Sign" library="NbsLibrary">
<doc>refer to registration phase of NE3S_WS_Common_Interface_Specification</doc>
<arguments>
<arg>${registration response['agentNonce']}</arg>
<arg>/root/workspace/gerrit/IMP/test/ET/resources/SecurityCertificate/manager.key.der</arg>
</arguments>
<assign>
<var>${managerResponse}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.167" starttime="20180528 16:48:30.167"></status>
</kw>
<kw name="Complete Registration" library="NbsLibrary">
<arguments>
<arg>managerIdentity.uniqueId=${mgr}</arg>
<arg>managerIdentity.type=NetAct</arg>
<arg>managerIdentity.release=1.0</arg>
<arg>managerIdentity.vendor=NOKIA</arg>
<arg>managerResponse=${managerResponse}</arg>
<arg>agentUniqueId=${mrbts-id}</arg>
<arg>managerCertificate=cid:123</arg>
<arg>cid:123=file:///${G_MANAGER_DER}</arg>
</arguments>
<assign>
<var>${completeRegistration}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.168" starttime="20180528 16:48:30.168"></status>
</kw>
<kw name="Check Completeregistrationresponse" library="Common_NetAct_Keyword">
<arguments>
<arg>${completeRegistration}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${completeRegistration}</arg>
<arg>${None}</arg>
<arg>msg=NetAct receive complete registration response and verify the value of response is None</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.168" starttime="20180528 16:48:30.168"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.169" starttime="20180528 16:48:30.168"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.169" starttime="20180528 16:48:30.167"></status>
</kw>
<kw name="Switch To Hostname" library="NbsLibrary">
<doc>:param hostname: switch to the specific hostname like 127.0.0.1</doc>
<arguments>
<arg>${mrbts-id}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.169" starttime="20180528 16:48:30.169"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${start_session}'=='${True}'</arg>
<arg>Start Agent Session</arg>
<arg>${mrbts-id}</arg>
</arguments>
<kw name="Start Agent Session" library="NbsLibrary">
<doc>setup session with BTSMED</doc>
<arguments>
<arg>${mrbts-id}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.169" starttime="20180528 16:48:30.169"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.170" starttime="20180528 16:48:30.169"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.170" starttime="20180528 16:48:30.160"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.170" starttime="20180528 16:48:30.159"></status>
</kw>
<kw name="Set Global Event ID" library="Common_Mixed_Keyword">
<kw name="Get Id" library="common_lib">
<assign>
<var>${EVENTID}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.170" starttime="20180528 16:48:30.170"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${EVENTID}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.171" starttime="20180528 16:48:30.170"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.171" starttime="20180528 16:48:30.170"></status>
</kw>
<kw name="Software Download For PreCommissioned BTS" library="Common_SWM_Keyword">
<kw name="Start Http File Server" library="NbsLibrary">
<doc>:param port: server port</doc>
<arguments>
<arg>${G_HTTP_PORT}</arg>
<arg>${G_PLUGIN_PATH}</arg>
<arg>certfile=${cerPath}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.171" starttime="20180528 16:48:30.171"></status>
</kw>
<kw name="Setup PreCommissioned BTS" library="Common_SWM_Keyword">
<arguments>
<arg>mrbts-${pre_bts_id}</arg>
<arg>pre_btsmed_northboundvip=${btsmed_northboundvip}</arg>
<arg>nbs_server_link=${nbs_server_link}</arg>
</arguments>
<kw name="Registration" library="Common_NetAct_Keyword">
<arguments>
<arg>${pre_mrbts_id}</arg>
<arg>btsmed_northboundvip=${pre_btsmed_northboundvip}</arg>
<arg>nbs_server_link=${nbs_server_link}</arg>
</arguments>
<kw name="Enable The TLS And Set The Server Certificate" library="Common_NetAct_Keyword">
<arguments>
<arg>${G_CA_CERTIFICATE}</arg>
</arguments>
<kw name="Set Btsmed Cert" library="NbsLibrary">
<doc>:param port: set the NetAct client port</doc>
<arguments>
<arg>8443</arg>
<arg>${ca_certs}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.173" starttime="20180528 16:48:30.173"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.173" starttime="20180528 16:48:30.172"></status>
</kw>
<kw name="Add The DNS For BTSMED" library="Common_NetAct_Keyword">
<arguments>
<arg>${mrbts-id}</arg>
<arg>${btsmed_northboundvip}</arg>
</arguments>
<kw name="Addhost" library="common_lib">
<arguments>
<arg>${ip}</arg>
<arg>${id}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.173" starttime="20180528 16:48:30.173"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.173" starttime="20180528 16:48:30.173"></status>
</kw>
<kw name="Set Netact Default Response" library="NbsLibrary">
<doc>Simulate the NetAct server,translate these flat parameters to nested ones,</doc>
<arguments>
<arg>managerRegistrationId=${mgr}</arg>
<arg>managerRegistrationKey=${managerRegistrationKey}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.174" starttime="20180528 16:48:30.174"></status>
</kw>
<kw name="Set Btsmed Basic Auth" library="NbsLibrary">
<doc>set the NetAct</doc>
<arguments>
<arg>wsuser</arg>
<arg>wspassword</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.174" starttime="20180528 16:48:30.174"></status>
</kw>
<kw name="NetAct Process The Start Registration To BTSMED Then Validate The Response" library="Common_NetAct_Keyword">
<arguments>
<arg>${mrbts-id}</arg>
<arg>${managerRegistrationKey}</arg>
<arg>${mgr}</arg>
<arg>nbs_server_link=${nbs_server_link}</arg>
</arguments>
<kw name="Start Registration" library="NbsLibrary">
<arguments>
<arg>managerIdentity.uniqueId=${mgr}</arg>
<arg>managerIdentity.type=demo</arg>
<arg>managerIdentity.release=1.0</arg>
<arg>managerIdentity.vendor=NOKIA</arg>
<arg>agentUniqueId=${mrbts-id}</arg>
<arg>notificationConsumerURL=${nbs_server_link}</arg>
<arg>managerNonce=${managerRegistrationKey}</arg>
<arg>reRegisterInterval=20</arg>
<arg>soc=cid:12345</arg>
<arg>cid:12345=file:////root/workspace/gerrit/IMP/test/ET/resources/soc.xml</arg>
</arguments>
<assign>
<var>${registration response}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.175" starttime="20180528 16:48:30.175"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${registration response}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.176" starttime="20180528 16:48:30.176"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${registration response['agentCertificate']}</arg>
</arguments>
<assign>
<var>${file}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.176" starttime="20180528 16:48:30.176"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${registration response['${file}']}</arg>
</arguments>
<assign>
<var>${agentCertificate}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.176" starttime="20180528 16:48:30.176"></status>
</kw>
<kw name="Validate Registration Response" library="Common_NetAct_Keyword">
<arguments>
<arg>${registration response}</arg>
<arg>${mrbts-id}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${regitration response['agentIdentity']['vendor']}</arg>
<arg>NOKIA</arg>
<arg>msg=NetAct receive start regitration response and verify the value of vendor in response is 'NOKIA'</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.177" starttime="20180528 16:48:30.177"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${regitration response['agentIdentity']['type']}</arg>
<arg>BTSMED</arg>
<arg>msg=NetAct receive start regitration response and verify the value of type in response is 'BTSMED'</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.177" starttime="20180528 16:48:30.177"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${regitration response['agentIdentity']['uniqueId']}</arg>
<arg>${mrbts-id}</arg>
<arg>msg=NetAct receive start regitration response and verify the value of uniqueId in response is ${mrbts-id}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.178" starttime="20180528 16:48:30.178"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${regitration response['registrationComplete']}</arg>
<arg>${False}</arg>
<arg>msg=NetAct receive strat regitration response and verify the value of registrationComplete in response is ${False}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.178" starttime="20180528 16:48:30.178"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.178" starttime="20180528 16:48:30.176"></status>
</kw>
<kw name="Write To File" library="common_lib">
<arguments>
<arg>${registration response['${file}']}</arg>
<arg>${G_NE_DER}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.178" starttime="20180528 16:48:30.178"></status>
</kw>
<kw name="Agent Cert Verify" library="NbsLibrary">
<doc>refer to registration phase of NE3S_WS_Common_Interface_Specification</doc>
<arguments>
<arg>${G_NE_DER}</arg>
<arg>/root/workspace/gerrit/IMP/test/ET/resources/SecurityCertificate/CaCertificate/</arg>
</arguments>
<assign>
<var>${agent cert}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.179" starttime="20180528 16:48:30.179"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${agent cert}</arg>
<arg>msg=NetAct receive BTSMED certificate via start registration response then NetAct verfify this certify is valid</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.179" starttime="20180528 16:48:30.179"></status>
</kw>
<kw name="Public Key Verify" library="NbsLibrary">
<doc>refer to registration phase of NE3S_WS_Common_Interface_Specification</doc>
<arguments>
<arg>${registration response['agentResponse']}</arg>
<arg>${managerRegistrationKey}</arg>
<arg>${G_NE_DER}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.179" starttime="20180528 16:48:30.179"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.179" starttime="20180528 16:48:30.174"></status>
</kw>
<kw name="NetAct Process The Completeregistration To BTSMED Then Validate The Response" library="Common_NetAct_Keyword">
<arguments>
<arg>${mrbts-id}</arg>
<arg>${mgr}</arg>
</arguments>
<kw name="Private Key Sign" library="NbsLibrary">
<doc>refer to registration phase of NE3S_WS_Common_Interface_Specification</doc>
<arguments>
<arg>${registration response['agentNonce']}</arg>
<arg>/root/workspace/gerrit/IMP/test/ET/resources/SecurityCertificate/manager.key.der</arg>
</arguments>
<assign>
<var>${managerResponse}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.180" starttime="20180528 16:48:30.180"></status>
</kw>
<kw name="Complete Registration" library="NbsLibrary">
<arguments>
<arg>managerIdentity.uniqueId=${mgr}</arg>
<arg>managerIdentity.type=NetAct</arg>
<arg>managerIdentity.release=1.0</arg>
<arg>managerIdentity.vendor=NOKIA</arg>
<arg>managerResponse=${managerResponse}</arg>
<arg>agentUniqueId=${mrbts-id}</arg>
<arg>managerCertificate=cid:123</arg>
<arg>cid:123=file:///${G_MANAGER_DER}</arg>
</arguments>
<assign>
<var>${completeRegistration}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.180" starttime="20180528 16:48:30.180"></status>
</kw>
<kw name="Check Completeregistrationresponse" library="Common_NetAct_Keyword">
<arguments>
<arg>${completeRegistration}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${completeRegistration}</arg>
<arg>${None}</arg>
<arg>msg=NetAct receive complete registration response and verify the value of response is None</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.181" starttime="20180528 16:48:30.181"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.181" starttime="20180528 16:48:30.181"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.181" starttime="20180528 16:48:30.180"></status>
</kw>
<kw name="Switch To Hostname" library="NbsLibrary">
<doc>:param hostname: switch to the specific hostname like 127.0.0.1</doc>
<arguments>
<arg>${mrbts-id}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.181" starttime="20180528 16:48:30.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${start_session}'=='${True}'</arg>
<arg>Start Agent Session</arg>
<arg>${mrbts-id}</arg>
</arguments>
<kw name="Start Agent Session" library="NbsLibrary">
<doc>setup session with BTSMED</doc>
<arguments>
<arg>${mrbts-id}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.182" starttime="20180528 16:48:30.182"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.182" starttime="20180528 16:48:30.182"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.182" starttime="20180528 16:48:30.172"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.182" starttime="20180528 16:48:30.171"></status>
</kw>
<kw name="Generate Plugin Version And Request Plan For Test" library="common_swm_lib">
<arguments>
<arg>${G_PLUGIN_VERSION}</arg>
<arg>SWDownload</arg>
<arg>${netact_ip}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.183" starttime="20180528 16:48:30.183"></status>
</kw>
<kw name="Parse Pm Xml File" library="common_pm_lib">
<arguments>
<arg>pmData=/root/workspace/gerrit/IMP/test/ET/resources/SWM/${G_PLUGIN_VERSION}.xml</arg>
</arguments>
<assign>
<var>${plugin_xml}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.183" starttime="20180528 16:48:30.183"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${plugin_xml}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.183" starttime="20180528 16:48:30.183"></status>
</kw>
<kw name="NetAct Send Opeation Request To BTSMED" library="Common_SWM_Keyword">
<arguments>
<arg>${G_PLUGIN_VERSION}.xml</arg>
<arg>${EVENTID()}</arg>
</arguments>
<kw name="Provision" library="NbsLibrary">
<arguments>
<arg>managerRegistrationId=mgr</arg>
<arg>managerRegistrationKey=${manager_registration_key}</arg>
<arg>operationId=${operation id}</arg>
<arg>timeout=30</arg>
<arg>progressFeedback.objectAmount=100</arg>
<arg>progressFeedback.timeInterval=60</arg>
<arg>attachmentProperties.compression=none</arg>
<arg>attachmentProperties.contentType=ocos</arg>
<arg>attachmentProperties.primaryDocument=sampleOCos.xml</arg>
<arg>planId=${plan_id}</arg>
<arg>blockLocalChanges=false</arg>
<arg>fallbackId=x</arg>
<arg>takeFallback=false</arg>
<arg>provisionContent=cid:provision1234</arg>
<arg>cid:provision1234=file:///${attachment_path}/${attachment}</arg>
</arguments>
<assign>
<var>${repquest}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.184" starttime="20180528 16:48:30.184"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.184" starttime="20180528 16:48:30.183"></status>
</kw>
<kw name="NetAct Receive Feedback 'SWDownload' 'ok' Reported By BTS '${pre_bts_id}' From BTSMED" library="Common_SWM_Keyword">
<assign>
<var>${msg}</var>
</assign>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>5</arg>
<arg>agentRegistrationId=mrbts-${bts id} and attachmentProperties.contentType=feedback</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.185" starttime="20180528 16:48:30.185"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${msg}</arg>
<arg>agentRegistrationId=mrbts-${bts id} and attachmentProperties.contentType=feedback</arg>
</arguments>
<assign>
<var>${reportOperationStatus}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.185" starttime="20180528 16:48:30.185"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='ok'</arg>
<arg>Validate Feedback</arg>
<arg>${reportOperationStatus[0]}</arg>
<arg>${class}</arg>
<arg>${status}</arg>
<arg>${G_SUCCESSFUL}</arg>
<arg>${G_UNSUCCESSFUL}</arg>
</arguments>
<kw name="Validate Feedback" library="Common_SWM_Keyword">
<arguments>
<arg>${reportOperationStatus[0]}</arg>
<arg>${class}</arg>
<arg>${status}</arg>
<arg>${G_SUCCESSFUL}</arg>
<arg>${G_UNSUCCESSFUL}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${reportOperationStatus['operationStatusContent']}</arg>
</arguments>
<assign>
<var>${NE3SFeedback_cid}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.186" starttime="20180528 16:48:30.186"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${reportOperationStatus['${NE3SFeedback_cid}']['NE3SFeedback']['managedObjects']['managedObject']['@class']}</arg>
<arg>${class}</arg>
<arg>msg=Validate feedbcak class should be equal with ${class}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.186" starttime="20180528 16:48:30.186"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${reportOperationStatus['${NE3SFeedback_cid}']['NE3SFeedback']['@status']}</arg>
<arg>${status}</arg>
<arg>msg=Validate feedbcak class should be equal with ${class}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.187" starttime="20180528 16:48:30.187"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${reportOperationStatus['${NE3SFeedback_cid}']['NE3SFeedback']['@successful']}</arg>
<arg>${successful}</arg>
<arg>msg=Validate feedbcak successful should be equal with ${successful}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.187" starttime="20180528 16:48:30.187"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${reportOperationStatus['${NE3SFeedback_cid}']['NE3SFeedback']['@unsuccessful']}</arg>
<arg>${unsuccessful}</arg>
<arg>msg=Validate feedbcak unsuccessful should be equal with ${unsuccessful}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.187" starttime="20180528 16:48:30.187"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${errorCode}</arg>
<arg>${reportOperationStatus['${NE3SFeedback_cid}']['NE3SFeedback']['managedObjects']['managedObject']['errorCode']}</arg>
</arguments>
<assign>
<var>${errorCode in feedback}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.188" starttime="20180528 16:48:30.188"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${errorCode}</arg>
<arg>Should Be Equal</arg>
<arg>${errorCode}</arg>
<arg>'${errorCode in feedback}'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${errorCode}</arg>
<arg>'${errorCode in feedback}'</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.188" starttime="20180528 16:48:30.188"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.188" starttime="20180528 16:48:30.188"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${errorText}</arg>
<arg>${reportOperationStatus['${NE3SFeedback_cid}']['NE3SFeedback']['managedObjects']['managedObject']['errorText']}</arg>
</arguments>
<assign>
<var>${errorText in feedback}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.189" starttime="20180528 16:48:30.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${errorText}</arg>
<arg>Split String</arg>
<arg>${errorText}</arg>
<arg>'</arg>
</arguments>
<assign>
<var>${text}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${errorText}</arg>
<arg>'</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.189" starttime="20180528 16:48:30.189"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.189" starttime="20180528 16:48:30.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${errorText}</arg>
<arg>Should Contain</arg>
<arg>${errorText in feedback}</arg>
<arg>${text[1]}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${errorText in feedback}</arg>
<arg>${text[1]}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.190" starttime="20180528 16:48:30.190"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.190" starttime="20180528 16:48:30.190"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.190" starttime="20180528 16:48:30.186"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.190" starttime="20180528 16:48:30.185"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='not_ok'</arg>
<arg>Validate Feedback</arg>
<arg>${reportOperationStatus[0]}</arg>
<arg>${class}</arg>
<arg>${status}</arg>
<arg>${G_UNSUCCESSFUL}</arg>
<arg>${G_SUCCESSFUL}</arg>
<arg>'swm.wrongMOState'</arg>
<arg>'${G_BTSMED_REJECT_ERRORTEXT}'</arg>
</arguments>
<kw name="Validate Feedback" library="Common_SWM_Keyword">
<arguments>
<arg>${reportOperationStatus[0]}</arg>
<arg>${class}</arg>
<arg>${status}</arg>
<arg>${G_UNSUCCESSFUL}</arg>
<arg>${G_SUCCESSFUL}</arg>
<arg>'swm.wrongMOState'</arg>
<arg>'${G_BTSMED_REJECT_ERRORTEXT}'</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${reportOperationStatus['operationStatusContent']}</arg>
</arguments>
<assign>
<var>${NE3SFeedback_cid}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.191" starttime="20180528 16:48:30.191"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${reportOperationStatus['${NE3SFeedback_cid}']['NE3SFeedback']['managedObjects']['managedObject']['@class']}</arg>
<arg>${class}</arg>
<arg>msg=Validate feedbcak class should be equal with ${class}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.192" starttime="20180528 16:48:30.192"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${reportOperationStatus['${NE3SFeedback_cid}']['NE3SFeedback']['@status']}</arg>
<arg>${status}</arg>
<arg>msg=Validate feedbcak class should be equal with ${class}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.192" starttime="20180528 16:48:30.192"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${reportOperationStatus['${NE3SFeedback_cid}']['NE3SFeedback']['@successful']}</arg>
<arg>${successful}</arg>
<arg>msg=Validate feedbcak successful should be equal with ${successful}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.192" starttime="20180528 16:48:30.192"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${reportOperationStatus['${NE3SFeedback_cid}']['NE3SFeedback']['@unsuccessful']}</arg>
<arg>${unsuccessful}</arg>
<arg>msg=Validate feedbcak unsuccessful should be equal with ${unsuccessful}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.193" starttime="20180528 16:48:30.192"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${errorCode}</arg>
<arg>${reportOperationStatus['${NE3SFeedback_cid}']['NE3SFeedback']['managedObjects']['managedObject']['errorCode']}</arg>
</arguments>
<assign>
<var>${errorCode in feedback}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.193" starttime="20180528 16:48:30.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${errorCode}</arg>
<arg>Should Be Equal</arg>
<arg>${errorCode}</arg>
<arg>'${errorCode in feedback}'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${errorCode}</arg>
<arg>'${errorCode in feedback}'</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.194" starttime="20180528 16:48:30.193"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.194" starttime="20180528 16:48:30.193"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${errorText}</arg>
<arg>${reportOperationStatus['${NE3SFeedback_cid}']['NE3SFeedback']['managedObjects']['managedObject']['errorText']}</arg>
</arguments>
<assign>
<var>${errorText in feedback}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.194" starttime="20180528 16:48:30.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${errorText}</arg>
<arg>Split String</arg>
<arg>${errorText}</arg>
<arg>'</arg>
</arguments>
<assign>
<var>${text}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${errorText}</arg>
<arg>'</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.195" starttime="20180528 16:48:30.194"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.195" starttime="20180528 16:48:30.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${errorText}</arg>
<arg>Should Contain</arg>
<arg>${errorText in feedback}</arg>
<arg>${text[1]}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${errorText in feedback}</arg>
<arg>${text[1]}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.195" starttime="20180528 16:48:30.195"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.195" starttime="20180528 16:48:30.195"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.195" starttime="20180528 16:48:30.191"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.195" starttime="20180528 16:48:30.190"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.195" starttime="20180528 16:48:30.184"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${operation_tag}'=='remote'</arg>
<arg>Check Plugin Files Downloaded Successful Remotely</arg>
<arg>${G_PLUGIN_VERSION}</arg>
<arg>${btsmed_northboundip}</arg>
<arg>ELSE</arg>
<arg>Check Plugin Files Downloaded Successfully</arg>
<arg>${G_PLUGIN_VERSION}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<kw name="Check Plugin Files Downloaded Successful Remotely" library="Common_SWM_Keyword">
<arguments>
<arg>${G_PLUGIN_VERSION}</arg>
<arg>${btsmed_northboundip}</arg>
</arguments>
<kw name="Ssh Connect" library="NbsLibrary">
<doc>setup ssh connection to remote machine</doc>
<arguments>
<arg>ip=${ip}</arg>
<arg>username=${G_USERNAME_ROOT}</arg>
<arg>password=${G_PASSWD_ROOT}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.196" starttime="20180528 16:48:30.196"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>0</arg>
<arg>Run Ssh Cmd And Check BTSMED Plugins Download Sucessfully</arg>
<arg>cd ${G_REMOTE_BTSMED_PATH}/data/plugins/${packageversion}</arg>
<arg>${packageversion}</arg>
</arguments>
<kw name="Run Ssh Cmd And Check BTSMED Plugins Download Sucessfully" library="Common_SWM_Keyword">
<arguments>
<arg>cd ${G_REMOTE_BTSMED_PATH}/data/plugins/${packageversion}</arg>
<arg>${packageversion}</arg>
</arguments>
<kw name="Ssh Command" library="NbsLibrary">
<doc>execute command on remote machine</doc>
<arguments>
<arg>command=${cmd}</arg>
</arguments>
<assign>
<var>${msgin}</var>
<var>${msgout}</var>
<var>${msgerr}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.197" starttime="20180528 16:48:30.197"></status>
</kw>
<kw name="Get Stand Output Message" library="common_resiliency_lib">
<arguments>
<arg>${msgerr}</arg>
</arguments>
<assign>
<var>${msgerr}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.198" starttime="20180528 16:48:30.198"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${msgerr}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${msgerr}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.199" starttime="20180528 16:48:30.198"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.199" starttime="20180528 16:48:30.198"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
<arg>msg=verify ${result} is true</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.199" starttime="20180528 16:48:30.199"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.199" starttime="20180528 16:48:30.197"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.199" starttime="20180528 16:48:30.197"></status>
</kw>
<kw name="Ssh Close" library="NbsLibrary">
<doc>close the ssh connection with remote machine</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.200" starttime="20180528 16:48:30.200"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.200" starttime="20180528 16:48:30.196"></status>
</kw>
<kw name="Check Plugin Files Downloaded Successfully" library="Common_SWM_Keyword">
<arguments>
<arg>${G_PLUGIN_VERSION}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>1</arg>
<arg>Directory Should Exist</arg>
<arg>${G_BTSMED_PATH}/data/plugins/${packageversion}</arg>
</arguments>
<kw name="Directory Should Exist" library="OperatingSystem">
<doc>Fails unless the given path points to an existing directory.</doc>
<arguments>
<arg>${G_BTSMED_PATH}/data/plugins/${packageversion}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.201" starttime="20180528 16:48:30.201"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.201" starttime="20180528 16:48:30.200"></status>
</kw>
<kw name="Directory Should Not Be Empty" library="OperatingSystem">
<doc>Fails if the specified directory is empty.</doc>
<arguments>
<arg>${G_BTSMED_PATH}/data/plugins/${packageversion}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.201" starttime="20180528 16:48:30.201"></status>
</kw>
<kw name="Get Modified Time" library="OperatingSystem">
<doc>Returns the last modification time of a file or directory.</doc>
<arguments>
<arg>${G_BTSMED_PATH}/data/plugins/${packageversion}</arg>
</arguments>
<assign>
<var>${File Modified Time}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.201" starttime="20180528 16:48:30.201"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.202" starttime="20180528 16:48:30.200"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.202" starttime="20180528 16:48:30.196"></status>
</kw>
<kw name="NetAct Receive TransferNotification Indicate Download For PreCommissioned BTS Successfully From BTSMED" library="Common_SWM_Keyword">
<arguments>
<arg>mrbts-${pre_bts_id}</arg>
<arg>${msg}</arg>
</arguments>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${msg}</arg>
<arg>notificationType=ne3s_common_changeNotification</arg>
</arguments>
<assign>
<var>${transferNotification}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.202" starttime="20180528 16:48:30.202"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Validate TransferNotification Cid</arg>
<arg>${transferNotification[0]}</arg>
<arg>SWDownload</arg>
<arg>${G_STATUS_SUCCEEDED}</arg>
<arg>${G_100}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Validate TransferNotification Cid" library="Common_SWM_Keyword">
<arguments>
<arg>${transferNotification[0]}</arg>
<arg>SWDownload</arg>
<arg>${G_STATUS_SUCCEEDED}</arg>
<arg>${G_100}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${transferNotification['notificationContent']}</arg>
</arguments>
<assign>
<var>${key}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.203" starttime="20180528 16:48:30.203"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${transferNotification['${key}']['raml']['cmData']['managedObject']['@class']}</arg>
<arg>${class}</arg>
<arg>msg=TransferNotificationCID class should be equal with ${class}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.204" starttime="20180528 16:48:30.203"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}!=0</arg>
<arg>Validate Value In TransferNotification Cid</arg>
<arg>${transferNotification['${key}']}</arg>
<arg>status</arg>
<arg>${status}</arg>
</arguments>
<kw name="Validate Value In TransferNotification Cid" library="Common_SWM_Keyword">
<arguments>
<arg>${transferNotification['${key}']}</arg>
<arg>status</arg>
<arg>${status}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cid['raml']['cmData']['managedObject']['p']}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.205" starttime="20180528 16:48:30.204"></status>
</kw>
<kw name="Transfer To List" library="common_lib">
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.205" starttime="20180528 16:48:30.205"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${list}</arg>
<arg>@name=${name}</arg>
</arguments>
<assign>
<var>${element}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.205" starttime="20180528 16:48:30.205"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${name}</arg>
<arg>errorCode</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${name}</arg>
<arg>errorCode</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.206" starttime="20180528 16:48:30.206"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.206" starttime="20180528 16:48:30.206"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
<arg>Should Be Equal As Strings</arg>
<arg>'${element[0]['#text']}'</arg>
<arg>${text}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>'${element[0]['#text']}'</arg>
<arg>${text}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.207" starttime="20180528 16:48:30.207"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.207" starttime="20180528 16:48:30.206"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${result}</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${element[0]['#text']}</arg>
<arg>${text}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${element[0]['#text']}</arg>
<arg>${text}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.207" starttime="20180528 16:48:30.207"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.207" starttime="20180528 16:48:30.207"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.207" starttime="20180528 16:48:30.204"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.207" starttime="20180528 16:48:30.204"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${progress}!=0</arg>
<arg>Validate Value In TransferNotification Cid</arg>
<arg>${transferNotification['${key}']}</arg>
<arg>progress</arg>
<arg>${progress}</arg>
</arguments>
<kw name="Validate Value In TransferNotification Cid" library="Common_SWM_Keyword">
<arguments>
<arg>${transferNotification['${key}']}</arg>
<arg>progress</arg>
<arg>${progress}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cid['raml']['cmData']['managedObject']['p']}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.208" starttime="20180528 16:48:30.208"></status>
</kw>
<kw name="Transfer To List" library="common_lib">
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.209" starttime="20180528 16:48:30.209"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${list}</arg>
<arg>@name=${name}</arg>
</arguments>
<assign>
<var>${element}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.209" starttime="20180528 16:48:30.209"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${name}</arg>
<arg>errorCode</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${name}</arg>
<arg>errorCode</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.210" starttime="20180528 16:48:30.210"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.210" starttime="20180528 16:48:30.209"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
<arg>Should Be Equal As Strings</arg>
<arg>'${element[0]['#text']}'</arg>
<arg>${text}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>'${element[0]['#text']}'</arg>
<arg>${text}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.210" starttime="20180528 16:48:30.210"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.210" starttime="20180528 16:48:30.210"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${result}</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${element[0]['#text']}</arg>
<arg>${text}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${element[0]['#text']}</arg>
<arg>${text}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.211" starttime="20180528 16:48:30.211"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.211" starttime="20180528 16:48:30.211"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.211" starttime="20180528 16:48:30.208"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.211" starttime="20180528 16:48:30.208"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${errorCode}</arg>
<arg>Validate Value In TransferNotification Cid</arg>
<arg>${transferNotification['${key}']}</arg>
<arg>errorCode</arg>
<arg>${errorCode}</arg>
</arguments>
<kw name="Validate Value In TransferNotification Cid" library="Common_SWM_Keyword">
<arguments>
<arg>${transferNotification['${key}']}</arg>
<arg>errorCode</arg>
<arg>${errorCode}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cid['raml']['cmData']['managedObject']['p']}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.212" starttime="20180528 16:48:30.212"></status>
</kw>
<kw name="Transfer To List" library="common_lib">
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.212" starttime="20180528 16:48:30.212"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${list}</arg>
<arg>@name=${name}</arg>
</arguments>
<assign>
<var>${element}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.213" starttime="20180528 16:48:30.213"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${name}</arg>
<arg>errorCode</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${name}</arg>
<arg>errorCode</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.213" starttime="20180528 16:48:30.213"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.213" starttime="20180528 16:48:30.213"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
<arg>Should Be Equal As Strings</arg>
<arg>'${element[0]['#text']}'</arg>
<arg>${text}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>'${element[0]['#text']}'</arg>
<arg>${text}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.214" starttime="20180528 16:48:30.214"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.214" starttime="20180528 16:48:30.214"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${result}</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${element[0]['#text']}</arg>
<arg>${text}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${element[0]['#text']}</arg>
<arg>${text}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.215" starttime="20180528 16:48:30.215"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.215" starttime="20180528 16:48:30.214"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.215" starttime="20180528 16:48:30.212"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.215" starttime="20180528 16:48:30.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${textualResponse}</arg>
<arg>Validate Value In TransferNotification Cid</arg>
<arg>${transferNotification['${key}']}</arg>
<arg>textualResponse</arg>
<arg>${textualResponse}</arg>
</arguments>
<kw name="Validate Value In TransferNotification Cid" library="Common_SWM_Keyword">
<arguments>
<arg>${transferNotification['${key}']}</arg>
<arg>textualResponse</arg>
<arg>${textualResponse}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cid['raml']['cmData']['managedObject']['p']}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.216" starttime="20180528 16:48:30.216"></status>
</kw>
<kw name="Transfer To List" library="common_lib">
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.216" starttime="20180528 16:48:30.216"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${list}</arg>
<arg>@name=${name}</arg>
</arguments>
<assign>
<var>${element}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.216" starttime="20180528 16:48:30.216"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${name}</arg>
<arg>errorCode</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${name}</arg>
<arg>errorCode</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.217" starttime="20180528 16:48:30.217"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.217" starttime="20180528 16:48:30.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
<arg>Should Be Equal As Strings</arg>
<arg>'${element[0]['#text']}'</arg>
<arg>${text}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>'${element[0]['#text']}'</arg>
<arg>${text}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.218" starttime="20180528 16:48:30.218"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.218" starttime="20180528 16:48:30.217"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${result}</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${element[0]['#text']}</arg>
<arg>${text}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${element[0]['#text']}</arg>
<arg>${text}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.218" starttime="20180528 16:48:30.218"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.218" starttime="20180528 16:48:30.218"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.218" starttime="20180528 16:48:30.215"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.218" starttime="20180528 16:48:30.215"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.219" starttime="20180528 16:48:30.203"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.219" starttime="20180528 16:48:30.202"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Receive And Validate TransferNotification Indicate Download For PreCommissioned BTS Successfully</arg>
<arg>${pre_mrbts_id}</arg>
</arguments>
<kw name="Receive And Validate TransferNotification Indicate Download For PreCommissioned BTS Successfully" library="Common_SWM_Keyword">
<arguments>
<arg>${pre_mrbts_id}</arg>
</arguments>
<kw name="NetAct Receive Report Messages From BTSMED" library="Common_SWM_Keyword">
<arguments>
<arg>5</arg>
<arg>${pre_mrbts_id}</arg>
</arguments>
<assign>
<var>${transferNotification}</var>
</assign>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>agentRegistrationId=${id} and ${filter_type}</arg>
<arg>${count}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.220" starttime="20180528 16:48:30.220"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${msg}</arg>
<arg>agentRegistrationId=${id} and ${filter_type}</arg>
</arguments>
<assign>
<var>${transferNotification}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.221" starttime="20180528 16:48:30.220"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.221" starttime="20180528 16:48:30.219"></status>
</kw>
<kw name="Validate TransferNotification Cid" library="Common_SWM_Keyword">
<arguments>
<arg>${transferNotification[0]}</arg>
<arg>SWDownload</arg>
<arg>${G_STATUS_SUCCEEDED}</arg>
<arg>${G_100}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${transferNotification['notificationContent']}</arg>
</arguments>
<assign>
<var>${key}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.221" starttime="20180528 16:48:30.221"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${transferNotification['${key}']['raml']['cmData']['managedObject']['@class']}</arg>
<arg>${class}</arg>
<arg>msg=TransferNotificationCID class should be equal with ${class}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.222" starttime="20180528 16:48:30.222"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}!=0</arg>
<arg>Validate Value In TransferNotification Cid</arg>
<arg>${transferNotification['${key}']}</arg>
<arg>status</arg>
<arg>${status}</arg>
</arguments>
<kw name="Validate Value In TransferNotification Cid" library="Common_SWM_Keyword">
<arguments>
<arg>${transferNotification['${key}']}</arg>
<arg>status</arg>
<arg>${status}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cid['raml']['cmData']['managedObject']['p']}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.223" starttime="20180528 16:48:30.223"></status>
</kw>
<kw name="Transfer To List" library="common_lib">
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.223" starttime="20180528 16:48:30.223"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${list}</arg>
<arg>@name=${name}</arg>
</arguments>
<assign>
<var>${element}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.223" starttime="20180528 16:48:30.223"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${name}</arg>
<arg>errorCode</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${name}</arg>
<arg>errorCode</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.224" starttime="20180528 16:48:30.224"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.224" starttime="20180528 16:48:30.224"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
<arg>Should Be Equal As Strings</arg>
<arg>'${element[0]['#text']}'</arg>
<arg>${text}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>'${element[0]['#text']}'</arg>
<arg>${text}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.225" starttime="20180528 16:48:30.225"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.225" starttime="20180528 16:48:30.224"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${result}</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${element[0]['#text']}</arg>
<arg>${text}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${element[0]['#text']}</arg>
<arg>${text}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.225" starttime="20180528 16:48:30.225"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.225" starttime="20180528 16:48:30.225"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.225" starttime="20180528 16:48:30.222"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.225" starttime="20180528 16:48:30.222"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${progress}!=0</arg>
<arg>Validate Value In TransferNotification Cid</arg>
<arg>${transferNotification['${key}']}</arg>
<arg>progress</arg>
<arg>${progress}</arg>
</arguments>
<kw name="Validate Value In TransferNotification Cid" library="Common_SWM_Keyword">
<arguments>
<arg>${transferNotification['${key}']}</arg>
<arg>progress</arg>
<arg>${progress}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cid['raml']['cmData']['managedObject']['p']}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.226" starttime="20180528 16:48:30.226"></status>
</kw>
<kw name="Transfer To List" library="common_lib">
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.227" starttime="20180528 16:48:30.227"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${list}</arg>
<arg>@name=${name}</arg>
</arguments>
<assign>
<var>${element}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.227" starttime="20180528 16:48:30.227"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${name}</arg>
<arg>errorCode</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${name}</arg>
<arg>errorCode</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.228" starttime="20180528 16:48:30.228"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.228" starttime="20180528 16:48:30.227"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
<arg>Should Be Equal As Strings</arg>
<arg>'${element[0]['#text']}'</arg>
<arg>${text}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>'${element[0]['#text']}'</arg>
<arg>${text}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.228" starttime="20180528 16:48:30.228"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.228" starttime="20180528 16:48:30.228"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${result}</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${element[0]['#text']}</arg>
<arg>${text}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${element[0]['#text']}</arg>
<arg>${text}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.229" starttime="20180528 16:48:30.229"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.229" starttime="20180528 16:48:30.229"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.229" starttime="20180528 16:48:30.226"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.229" starttime="20180528 16:48:30.226"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${errorCode}</arg>
<arg>Validate Value In TransferNotification Cid</arg>
<arg>${transferNotification['${key}']}</arg>
<arg>errorCode</arg>
<arg>${errorCode}</arg>
</arguments>
<kw name="Validate Value In TransferNotification Cid" library="Common_SWM_Keyword">
<arguments>
<arg>${transferNotification['${key}']}</arg>
<arg>errorCode</arg>
<arg>${errorCode}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cid['raml']['cmData']['managedObject']['p']}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.230" starttime="20180528 16:48:30.230"></status>
</kw>
<kw name="Transfer To List" library="common_lib">
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.230" starttime="20180528 16:48:30.230"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${list}</arg>
<arg>@name=${name}</arg>
</arguments>
<assign>
<var>${element}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.231" starttime="20180528 16:48:30.231"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${name}</arg>
<arg>errorCode</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${name}</arg>
<arg>errorCode</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.231" starttime="20180528 16:48:30.231"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.231" starttime="20180528 16:48:30.231"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
<arg>Should Be Equal As Strings</arg>
<arg>'${element[0]['#text']}'</arg>
<arg>${text}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>'${element[0]['#text']}'</arg>
<arg>${text}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.232" starttime="20180528 16:48:30.232"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.232" starttime="20180528 16:48:30.232"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${result}</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${element[0]['#text']}</arg>
<arg>${text}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${element[0]['#text']}</arg>
<arg>${text}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.233" starttime="20180528 16:48:30.233"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.233" starttime="20180528 16:48:30.232"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.233" starttime="20180528 16:48:30.230"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.233" starttime="20180528 16:48:30.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${textualResponse}</arg>
<arg>Validate Value In TransferNotification Cid</arg>
<arg>${transferNotification['${key}']}</arg>
<arg>textualResponse</arg>
<arg>${textualResponse}</arg>
</arguments>
<kw name="Validate Value In TransferNotification Cid" library="Common_SWM_Keyword">
<arguments>
<arg>${transferNotification['${key}']}</arg>
<arg>textualResponse</arg>
<arg>${textualResponse}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cid['raml']['cmData']['managedObject']['p']}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.234" starttime="20180528 16:48:30.234"></status>
</kw>
<kw name="Transfer To List" library="common_lib">
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.234" starttime="20180528 16:48:30.234"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${list}</arg>
<arg>@name=${name}</arg>
</arguments>
<assign>
<var>${element}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.235" starttime="20180528 16:48:30.234"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${name}</arg>
<arg>errorCode</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${name}</arg>
<arg>errorCode</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.235" starttime="20180528 16:48:30.235"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.235" starttime="20180528 16:48:30.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
<arg>Should Be Equal As Strings</arg>
<arg>'${element[0]['#text']}'</arg>
<arg>${text}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>'${element[0]['#text']}'</arg>
<arg>${text}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.236" starttime="20180528 16:48:30.236"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.236" starttime="20180528 16:48:30.235"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${result}</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${element[0]['#text']}</arg>
<arg>${text}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${element[0]['#text']}</arg>
<arg>${text}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.236" starttime="20180528 16:48:30.236"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.236" starttime="20180528 16:48:30.236"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.237" starttime="20180528 16:48:30.233"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.237" starttime="20180528 16:48:30.233"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.237" starttime="20180528 16:48:30.221"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.237" starttime="20180528 16:48:30.219"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.237" starttime="20180528 16:48:30.219"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.237" starttime="20180528 16:48:30.202"></status>
</kw>
<kw type="teardown" name="PreCommissioned BTS Case Teardown" library="Common_SWM_Keyword">
<arguments>
<arg>mrbts-${pre_bts_id}</arg>
</arguments>
<kw name="Stop Http File Server" library="NbsLibrary">
<doc>stop the http file server</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.237" starttime="20180528 16:48:30.237"></status>
</kw>
<kw name="Switch To Hostname" library="NbsLibrary">
<doc>:param hostname: switch to the specific hostname like 127.0.0.1</doc>
<arguments>
<arg>${G_MRBTS_ID}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.238" starttime="20180528 16:48:30.238"></status>
</kw>
<kw name="Stop Http File Server" library="NbsLibrary">
<doc>stop the http file server</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.238" starttime="20180528 16:48:30.238"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.238" starttime="20180528 16:48:30.237"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.238" starttime="20180528 16:48:30.171"></status>
</kw>
<kw name="NetAct Send CM Upload Configuration To BTS For Commissioned BTS" library="Common_CM_Keyword">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${initFlag}'=='Yes'</arg>
<arg>BTS Start Up</arg>
<arg>${btsid}</arg>
<arg>CCN_MRBTS_DISTNAME=${CCN_MRBTS_DISTNAME}</arg>
<arg>protocol=${protocol}</arg>
</arguments>
<kw name="BTS Start Up" library="Common_Bts_Keyword">
<arguments>
<arg>${btsid}</arg>
<arg>CCN_MRBTS_DISTNAME=${CCN_MRBTS_DISTNAME}</arg>
<arg>protocol=${protocol}</arg>
</arguments>
<kw name="BTS Connect To BTSMED" library="Common_Bts_Keyword">
<arguments>
<arg>${btsid}</arg>
<arg>${heartbeatInterval}</arg>
<arg>${heartbeatLostThreshold}</arg>
<arg>${SessionID}</arg>
<arg>port=${port}</arg>
<arg>cerpath=${cerpath}</arg>
<arg>enb_sw_version=${enb_sw_version}</arg>
<arg>protocol=${protocol}</arg>
<arg>version=${version}</arg>
</arguments>
<kw name="BTS Send Version Response To BTSMED" library="Common_Bts_Keyword">
<arguments>
<arg>${btsid}</arg>
<arg>port=${port}</arg>
<arg>cerpath=${cerpath}</arg>
<arg>enb_sw_version=${enb_sw_version}</arg>
<arg>protocol=${protocol}</arg>
<arg>btsmedid=${btsmedid}</arg>
<arg>option=${option}</arg>
<arg>version=${version}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${port}==8102</arg>
<arg>Init BTS</arg>
<arg>${port}</arg>
<arg>${btsid}</arg>
<arg>protocol=${protocol}</arg>
<arg>version=${version}</arg>
</arguments>
<kw name="Init Bts" library="NbsLibrary">
<doc>init  a single bts with default setting;</doc>
<arguments>
<arg>${port}</arg>
<arg>${btsid}</arg>
<arg>protocol=${protocol}</arg>
<arg>version=${version}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.241" starttime="20180528 16:48:30.241"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.241" starttime="20180528 16:48:30.240"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${port}==8103</arg>
<arg>Init BTS</arg>
<arg>${port}</arg>
<arg>${btsid}</arg>
<arg>${cerpath}</arg>
<arg>protocol=${protocol}</arg>
<arg>version=${version}</arg>
</arguments>
<kw name="Init Bts" library="NbsLibrary">
<doc>init  a single bts with default setting;</doc>
<arguments>
<arg>${port}</arg>
<arg>${btsid}</arg>
<arg>${cerpath}</arg>
<arg>protocol=${protocol}</arg>
<arg>version=${version}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.242" starttime="20180528 16:48:30.242"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.242" starttime="20180528 16:48:30.241"></status>
</kw>
<kw name="Specified Messages Received BTS" library="Common_Bts_Keyword">
<arguments>
<arg>${G_WAIT_TIMEOUT}</arg>
<arg>@type=VersionRequest</arg>
<arg>1</arg>
<arg>${btsid}</arg>
<arg>${btsmedid}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<kw name="Get Specified Messages Received Bts" library="NbsLibrary">
<doc>:param timeout:exhausted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${expr}</arg>
<arg>${amount}</arg>
<arg>${alias}</arg>
<arg>${btsmedid}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.243" starttime="20180528 16:48:30.243"></status>
</kw>
<kw type="for" name="${m} IN [ @{msg} ]">
<kw type="foritem" name="${m} = ${m}">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${m["@type"]}'=='IMContent'</arg>
<arg>Send Back Received IMContent Message</arg>
<arg>${alias}</arg>
<arg>${m}</arg>
<arg>${option}</arg>
</arguments>
<kw name="Send Back Received IMContent Message" library="Common_Bts_Keyword">
<arguments>
<arg>${alias}</arg>
<arg>${m}</arg>
<arg>${option}</arg>
</arguments>
<kw name="Copy Dictionary" library="Collections">
<doc>Returns a copy of the given dictionary.</doc>
<arguments>
<arg>${msg}</arg>
</arguments>
<assign>
<var>${m}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.244" starttime="20180528 16:48:30.244"></status>
</kw>
<kw name="Remove From Dictionary" library="Collections">
<doc>Removes the given ``keys`` from the ``dictionary``.</doc>
<arguments>
<arg>${m}</arg>
<arg>@type</arg>
<arg>@id</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.244" starttime="20180528 16:48:30.244"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${m})</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.245" starttime="20180528 16:48:30.245"></status>
</kw>
<kw name="Send Back Message To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send message flow to BTSMED</doc>
<arguments>
<arg>IMContent</arg>
<arg>${alias}</arg>
<arg>${str}</arg>
<arg>${option}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.245" starttime="20180528 16:48:30.245"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.245" starttime="20180528 16:48:30.243"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.245" starttime="20180528 16:48:30.243"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.245" starttime="20180528 16:48:30.243"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.245" starttime="20180528 16:48:30.243"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.245" starttime="20180528 16:48:30.242"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${msg[-1]['@type']}</arg>
<arg>VersionRequest</arg>
<arg>msg=Verify BTS receive version request message from BTSMED</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.245" starttime="20180528 16:48:30.245"></status>
</kw>
<kw name="Get Current Timestamp" library="common_lib">
<assign>
<var>${timestamp}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.246" starttime="20180528 16:48:30.246"></status>
</kw>
<kw name="Send Message To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send message flow to BTSMED</doc>
<arguments>
<arg>msg_type=VersionResponse</arg>
<arg>option=${option}</arg>
<arg>header={'timestamp':'${timestamp}'}</arg>
<arg>soamIfVersion=${G_SOAMIFVERSION}</arg>
<arg>btsId=${btsid}</arg>
<arg>swVersion=${enb_sw_version}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.246" starttime="20180528 16:48:30.246"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.246" starttime="20180528 16:48:30.240"></status>
</kw>
<kw name="BTS Establish Session With BTSMED" library="Common_Bts_Keyword">
<arguments>
<arg>${heartbeatInterval}</arg>
<arg>${heartbeatLostThreshold}</arg>
<arg>${SessionID}</arg>
<arg>${btsid}</arg>
<arg>${btsmedid}</arg>
<arg>option=${option}</arg>
</arguments>
<kw name="Specified Messages Received BTS" library="Common_Bts_Keyword">
<arguments>
<arg>${G_BTS_SESSION_ESTABLISHMENT_TIMEOUT_ADAPTATION}</arg>
<arg>@type=EstablishSession</arg>
<arg>1</arg>
<arg>${btsid}</arg>
<arg>${btsmedid}</arg>
<arg>${option}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<kw name="Get Specified Messages Received Bts" library="NbsLibrary">
<doc>:param timeout:exhausted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${expr}</arg>
<arg>${amount}</arg>
<arg>${alias}</arg>
<arg>${btsmedid}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.247" starttime="20180528 16:48:30.247"></status>
</kw>
<kw type="for" name="${m} IN [ @{msg} ]">
<kw type="foritem" name="${m} = ${m}">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${m["@type"]}'=='IMContent'</arg>
<arg>Send Back Received IMContent Message</arg>
<arg>${alias}</arg>
<arg>${m}</arg>
<arg>${option}</arg>
</arguments>
<kw name="Send Back Received IMContent Message" library="Common_Bts_Keyword">
<arguments>
<arg>${alias}</arg>
<arg>${m}</arg>
<arg>${option}</arg>
</arguments>
<kw name="Copy Dictionary" library="Collections">
<doc>Returns a copy of the given dictionary.</doc>
<arguments>
<arg>${msg}</arg>
</arguments>
<assign>
<var>${m}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.248" starttime="20180528 16:48:30.248"></status>
</kw>
<kw name="Remove From Dictionary" library="Collections">
<doc>Removes the given ``keys`` from the ``dictionary``.</doc>
<arguments>
<arg>${m}</arg>
<arg>@type</arg>
<arg>@id</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.249" starttime="20180528 16:48:30.249"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${m})</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.249" starttime="20180528 16:48:30.249"></status>
</kw>
<kw name="Send Back Message To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send message flow to BTSMED</doc>
<arguments>
<arg>IMContent</arg>
<arg>${alias}</arg>
<arg>${str}</arg>
<arg>${option}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.249" starttime="20180528 16:48:30.249"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.249" starttime="20180528 16:48:30.248"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.249" starttime="20180528 16:48:30.248"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.250" starttime="20180528 16:48:30.247"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.250" starttime="20180528 16:48:30.247"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.250" starttime="20180528 16:48:30.247"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${msg[0]['@type']}</arg>
<arg>EstablishSession</arg>
<arg>msg=Verify BTS receive establish session message from BTSMED</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.250" starttime="20180528 16:48:30.250"></status>
</kw>
<kw name="Get Current Timestamp" library="common_lib">
<assign>
<var>${timestamp}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.250" starttime="20180528 16:48:30.250"></status>
</kw>
<kw name="Send Message To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send message flow to BTSMED</doc>
<arguments>
<arg>msg_type=SessionEstablished</arg>
<arg>option=${option}</arg>
<arg>header={'timestamp':'${timestamp}'}</arg>
<arg>result=1</arg>
<arg>successResp={'assignedSessionId':'${SessionID}', 'sessionObjectDistname':'/MRBTS-1/RAT-1/URI-1/SESSION-1', 'embeddedClientVersion':'1', 'embeddedClientVersionHash':'1', 'updateIntervalMin':'10', 'heartbeatInterval':${heartbeatInterval}, 'heartbeatLostThreshold':${heartbeatLostThreshold}}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.251" starttime="20180528 16:48:30.250"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.251" starttime="20180528 16:48:30.246"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.251" starttime="20180528 16:48:30.239"></status>
</kw>
<kw name="BTS Get Then Validate Reveiced Sync Message From BTSMED" library="Common_Bts_Keyword">
<arguments>
<arg>${G_SYNC_MSG}</arg>
<arg>${btsid}</arg>
<arg>timeout=10</arg>
<arg>btsmedid=${btsmedid}</arg>
<arg>option=${option}</arg>
</arguments>
<assign>
<var>${synctype}</var>
<var>${ackseq}</var>
</assign>
<kw name="Specified Messages Received BTS" library="Common_Bts_Keyword">
<arguments>
<arg>${timeout}</arg>
<arg>${msg_type}</arg>
<arg>alias=${btsid}</arg>
<arg>btsmedid=${btsmedid}</arg>
<arg>option=${option}</arg>
</arguments>
<assign>
<var>${Msg}</var>
</assign>
<kw name="Get Specified Messages Received Bts" library="NbsLibrary">
<doc>:param timeout:exhausted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${expr}</arg>
<arg>${amount}</arg>
<arg>${alias}</arg>
<arg>${btsmedid}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.252" starttime="20180528 16:48:30.252"></status>
</kw>
<kw type="for" name="${m} IN [ @{msg} ]">
<kw type="foritem" name="${m} = ${m}">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${m["@type"]}'=='IMContent'</arg>
<arg>Send Back Received IMContent Message</arg>
<arg>${alias}</arg>
<arg>${m}</arg>
<arg>${option}</arg>
</arguments>
<kw name="Send Back Received IMContent Message" library="Common_Bts_Keyword">
<arguments>
<arg>${alias}</arg>
<arg>${m}</arg>
<arg>${option}</arg>
</arguments>
<kw name="Copy Dictionary" library="Collections">
<doc>Returns a copy of the given dictionary.</doc>
<arguments>
<arg>${msg}</arg>
</arguments>
<assign>
<var>${m}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.253" starttime="20180528 16:48:30.253"></status>
</kw>
<kw name="Remove From Dictionary" library="Collections">
<doc>Removes the given ``keys`` from the ``dictionary``.</doc>
<arguments>
<arg>${m}</arg>
<arg>@type</arg>
<arg>@id</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.253" starttime="20180528 16:48:30.253"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${m})</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.254" starttime="20180528 16:48:30.254"></status>
</kw>
<kw name="Send Back Message To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send message flow to BTSMED</doc>
<arguments>
<arg>IMContent</arg>
<arg>${alias}</arg>
<arg>${str}</arg>
<arg>${option}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.254" starttime="20180528 16:48:30.254"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.254" starttime="20180528 16:48:30.253"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.254" starttime="20180528 16:48:30.252"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.254" starttime="20180528 16:48:30.252"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.254" starttime="20180528 16:48:30.252"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.254" starttime="20180528 16:48:30.251"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${Msg}</arg>
<arg>${msg_type}</arg>
</arguments>
<assign>
<var>${message}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.254" starttime="20180528 16:48:30.254"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${message}</arg>
<arg>msg=Validate BTS receive sync message is not empty from BTSMED</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.255" starttime="20180528 16:48:30.255"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${message[0]['type']}</arg>
</arguments>
<assign>
<var>${synctype}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.255" starttime="20180528 16:48:30.255"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${message[0]['header']['ackInfo']['ackSeq']}</arg>
</arguments>
<assign>
<var>${ackseq}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.255" starttime="20180528 16:48:30.255"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.255" starttime="20180528 16:48:30.251"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int("${ackseq}")+1</arg>
</arguments>
<assign>
<var>${newseq}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.256" starttime="20180528 16:48:30.256"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${synctype}" == "DELTA_SYNC"</arg>
<arg>BTS Send Initial MO To BTSMED</arg>
<arg>${btsid}</arg>
<arg>CCN_MRBTS_DISTNAME=${CCN_MRBTS_DISTNAME}</arg>
<arg>seq=${newseq}</arg>
<arg>ELSE</arg>
<arg>BTS Send Initial Full Plan To BTSMED</arg>
<arg>${scf}</arg>
</arguments>
<kw name="BTS Send Initial MO To BTSMED" library="Common_Bts_Keyword">
<arguments>
<arg>${btsid}</arg>
<arg>CCN_MRBTS_DISTNAME=${CCN_MRBTS_DISTNAME}</arg>
<arg>seq=${newseq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>alias=${bts_id_num}</arg>
<arg>distname=${G_CCN_MRBTS_DISTNAME_BTS_CONF}</arg>
<arg>content=${G_CCN_MRBTS_CONTENT_BTS_CONF}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.257" starttime="20180528 16:48:30.257"></status>
</kw>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>alias=${bts_id_num}</arg>
<arg>distname=${CCN_MRBTS_DISTNAME}</arg>
<arg>content=${G_CCN_MRBTS_CONTENT}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.257" starttime="20180528 16:48:30.257"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.257" starttime="20180528 16:48:30.256"></status>
</kw>
<kw name="BTS Send Initial Full Plan To BTSMED" library="Common_Bts_Keyword">
<arguments>
<arg>${scf}</arg>
</arguments>
<kw name="Send Scf To BTSMED" library="NbsLibrary">
<doc>SOAM BTS send IM Updates in SCF file to BTSMED</doc>
<arguments>
<arg>rootpath=/</arg>
<arg>scf=${scf}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.258" starttime="20180528 16:48:30.258"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.258" starttime="20180528 16:48:30.257"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.258" starttime="20180528 16:48:30.256"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.258" starttime="20180528 16:48:30.239"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.258" starttime="20180528 16:48:30.239"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EVENTID()}</arg>
</arguments>
<assign>
<var>${operation_id}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.258" starttime="20180528 16:48:30.258"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
<arg>Wait time for ensuring mos exists in hcache then do upload request or error feedback will be return</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.259" starttime="20180528 16:48:30.259"></status>
</kw>
<kw name="Switch To Hostname" library="NbsLibrary">
<doc>:param hostname: switch to the specific hostname like 127.0.0.1</doc>
<arguments>
<arg>mrbts-${btsid}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.259" starttime="20180528 16:48:30.259"></status>
</kw>
<kw name="NetAct Send Upload Request To BTSMED" library="Common_CM_Keyword">
<arguments>
<arg>${operation_id}</arg>
</arguments>
<kw name="Upload" library="NbsLibrary">
<arguments>
<arg>managerRegistrationId=${mgr}</arg>
<arg>managerRegistrationKey=ODYzNTQ0NTg0</arg>
<arg>operationId=${operation_id}</arg>
<arg>timeout=15</arg>
<arg>compressionThreshold=1024</arg>
<arg>progressFeedback.objectAmount=1</arg>
<arg>progressFeedback.timeInterval=15</arg>
<arg>filter.uploadType=configuration</arg>
<arg>filter.objects.sdn=${sdn}</arg>
<arg>filter.objects.depth=${depth}</arg>
</arguments>
<assign>
<var>${CMuploadresponse}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.260" starttime="20180528 16:48:30.260"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.260" starttime="20180528 16:48:30.259"></status>
</kw>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>10</arg>
<arg>@type=reportOperationStatus</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${OperationStatusreport}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.260" starttime="20180528 16:48:30.260"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${initFlag}'=='Yes'</arg>
<arg>Stop BTS</arg>
<arg>${btsid}</arg>
</arguments>
<kw name="Stop Bts" library="NbsLibrary">
<doc>stop the specified bts, default is present running bts.</doc>
<arguments>
<arg>${btsid}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.261" starttime="20180528 16:48:30.261"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.261" starttime="20180528 16:48:30.260"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.261" starttime="20180528 16:48:30.238"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.261" starttime="20180528 16:48:30.076"></status>
</kw>
<suite source="/root/workspace/gerrit/IMP/test/ET/FM_Upload.robot" id="s1-s1" name="FM Upload">
<kw type="setup" name="Prepare Env">
<kw name="BTS Start Up" library="Common_Bts_Keyword">
<kw name="BTS Connect To BTSMED" library="Common_Bts_Keyword">
<arguments>
<arg>${btsid}</arg>
<arg>${heartbeatInterval}</arg>
<arg>${heartbeatLostThreshold}</arg>
<arg>${SessionID}</arg>
<arg>port=${port}</arg>
<arg>cerpath=${cerpath}</arg>
<arg>enb_sw_version=${enb_sw_version}</arg>
<arg>protocol=${protocol}</arg>
<arg>version=${version}</arg>
</arguments>
<kw name="BTS Send Version Response To BTSMED" library="Common_Bts_Keyword">
<arguments>
<arg>${btsid}</arg>
<arg>port=${port}</arg>
<arg>cerpath=${cerpath}</arg>
<arg>enb_sw_version=${enb_sw_version}</arg>
<arg>protocol=${protocol}</arg>
<arg>btsmedid=${btsmedid}</arg>
<arg>option=${option}</arg>
<arg>version=${version}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${port}==8102</arg>
<arg>Init BTS</arg>
<arg>${port}</arg>
<arg>${btsid}</arg>
<arg>protocol=${protocol}</arg>
<arg>version=${version}</arg>
</arguments>
<kw name="Init Bts" library="NbsLibrary">
<doc>init  a single bts with default setting;</doc>
<arguments>
<arg>${port}</arg>
<arg>${btsid}</arg>
<arg>protocol=${protocol}</arg>
<arg>version=${version}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.333" starttime="20180528 16:48:30.333"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.333" starttime="20180528 16:48:30.333"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${port}==8103</arg>
<arg>Init BTS</arg>
<arg>${port}</arg>
<arg>${btsid}</arg>
<arg>${cerpath}</arg>
<arg>protocol=${protocol}</arg>
<arg>version=${version}</arg>
</arguments>
<kw name="Init Bts" library="NbsLibrary">
<doc>init  a single bts with default setting;</doc>
<arguments>
<arg>${port}</arg>
<arg>${btsid}</arg>
<arg>${cerpath}</arg>
<arg>protocol=${protocol}</arg>
<arg>version=${version}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.334" starttime="20180528 16:48:30.334"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.334" starttime="20180528 16:48:30.333"></status>
</kw>
<kw name="Specified Messages Received BTS" library="Common_Bts_Keyword">
<arguments>
<arg>${G_WAIT_TIMEOUT}</arg>
<arg>@type=VersionRequest</arg>
<arg>1</arg>
<arg>${btsid}</arg>
<arg>${btsmedid}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<kw name="Get Specified Messages Received Bts" library="NbsLibrary">
<doc>:param timeout:exhausted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${expr}</arg>
<arg>${amount}</arg>
<arg>${alias}</arg>
<arg>${btsmedid}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.335" starttime="20180528 16:48:30.334"></status>
</kw>
<kw type="for" name="${m} IN [ @{msg} ]">
<kw type="foritem" name="${m} = ${m}">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${m["@type"]}'=='IMContent'</arg>
<arg>Send Back Received IMContent Message</arg>
<arg>${alias}</arg>
<arg>${m}</arg>
<arg>${option}</arg>
</arguments>
<kw name="Send Back Received IMContent Message" library="Common_Bts_Keyword">
<arguments>
<arg>${alias}</arg>
<arg>${m}</arg>
<arg>${option}</arg>
</arguments>
<kw name="Copy Dictionary" library="Collections">
<doc>Returns a copy of the given dictionary.</doc>
<arguments>
<arg>${msg}</arg>
</arguments>
<assign>
<var>${m}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.336" starttime="20180528 16:48:30.336"></status>
</kw>
<kw name="Remove From Dictionary" library="Collections">
<doc>Removes the given ``keys`` from the ``dictionary``.</doc>
<arguments>
<arg>${m}</arg>
<arg>@type</arg>
<arg>@id</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.336" starttime="20180528 16:48:30.336"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${m})</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.336" starttime="20180528 16:48:30.336"></status>
</kw>
<kw name="Send Back Message To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send message flow to BTSMED</doc>
<arguments>
<arg>IMContent</arg>
<arg>${alias}</arg>
<arg>${str}</arg>
<arg>${option}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.337" starttime="20180528 16:48:30.337"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.337" starttime="20180528 16:48:30.335"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.337" starttime="20180528 16:48:30.335"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.337" starttime="20180528 16:48:30.335"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.337" starttime="20180528 16:48:30.335"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.337" starttime="20180528 16:48:30.334"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${msg[-1]['@type']}</arg>
<arg>VersionRequest</arg>
<arg>msg=Verify BTS receive version request message from BTSMED</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.337" starttime="20180528 16:48:30.337"></status>
</kw>
<kw name="Get Current Timestamp" library="common_lib">
<assign>
<var>${timestamp}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.338" starttime="20180528 16:48:30.337"></status>
</kw>
<kw name="Send Message To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send message flow to BTSMED</doc>
<arguments>
<arg>msg_type=VersionResponse</arg>
<arg>option=${option}</arg>
<arg>header={'timestamp':'${timestamp}'}</arg>
<arg>soamIfVersion=${G_SOAMIFVERSION}</arg>
<arg>btsId=${btsid}</arg>
<arg>swVersion=${enb_sw_version}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.338" starttime="20180528 16:48:30.338"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.338" starttime="20180528 16:48:30.332"></status>
</kw>
<kw name="BTS Establish Session With BTSMED" library="Common_Bts_Keyword">
<arguments>
<arg>${heartbeatInterval}</arg>
<arg>${heartbeatLostThreshold}</arg>
<arg>${SessionID}</arg>
<arg>${btsid}</arg>
<arg>${btsmedid}</arg>
<arg>option=${option}</arg>
</arguments>
<kw name="Specified Messages Received BTS" library="Common_Bts_Keyword">
<arguments>
<arg>${G_BTS_SESSION_ESTABLISHMENT_TIMEOUT_ADAPTATION}</arg>
<arg>@type=EstablishSession</arg>
<arg>1</arg>
<arg>${btsid}</arg>
<arg>${btsmedid}</arg>
<arg>${option}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<kw name="Get Specified Messages Received Bts" library="NbsLibrary">
<doc>:param timeout:exhausted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${expr}</arg>
<arg>${amount}</arg>
<arg>${alias}</arg>
<arg>${btsmedid}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.339" starttime="20180528 16:48:30.339"></status>
</kw>
<kw type="for" name="${m} IN [ @{msg} ]">
<kw type="foritem" name="${m} = ${m}">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${m["@type"]}'=='IMContent'</arg>
<arg>Send Back Received IMContent Message</arg>
<arg>${alias}</arg>
<arg>${m}</arg>
<arg>${option}</arg>
</arguments>
<kw name="Send Back Received IMContent Message" library="Common_Bts_Keyword">
<arguments>
<arg>${alias}</arg>
<arg>${m}</arg>
<arg>${option}</arg>
</arguments>
<kw name="Copy Dictionary" library="Collections">
<doc>Returns a copy of the given dictionary.</doc>
<arguments>
<arg>${msg}</arg>
</arguments>
<assign>
<var>${m}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.340" starttime="20180528 16:48:30.340"></status>
</kw>
<kw name="Remove From Dictionary" library="Collections">
<doc>Removes the given ``keys`` from the ``dictionary``.</doc>
<arguments>
<arg>${m}</arg>
<arg>@type</arg>
<arg>@id</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.341" starttime="20180528 16:48:30.340"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${m})</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.341" starttime="20180528 16:48:30.341"></status>
</kw>
<kw name="Send Back Message To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send message flow to BTSMED</doc>
<arguments>
<arg>IMContent</arg>
<arg>${alias}</arg>
<arg>${str}</arg>
<arg>${option}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.341" starttime="20180528 16:48:30.341"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.341" starttime="20180528 16:48:30.340"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.341" starttime="20180528 16:48:30.339"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.341" starttime="20180528 16:48:30.339"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.341" starttime="20180528 16:48:30.339"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.341" starttime="20180528 16:48:30.339"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${msg[0]['@type']}</arg>
<arg>EstablishSession</arg>
<arg>msg=Verify BTS receive establish session message from BTSMED</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.342" starttime="20180528 16:48:30.342"></status>
</kw>
<kw name="Get Current Timestamp" library="common_lib">
<assign>
<var>${timestamp}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.342" starttime="20180528 16:48:30.342"></status>
</kw>
<kw name="Send Message To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send message flow to BTSMED</doc>
<arguments>
<arg>msg_type=SessionEstablished</arg>
<arg>option=${option}</arg>
<arg>header={'timestamp':'${timestamp}'}</arg>
<arg>result=1</arg>
<arg>successResp={'assignedSessionId':'${SessionID}', 'sessionObjectDistname':'/MRBTS-1/RAT-1/URI-1/SESSION-1', 'embeddedClientVersion':'1', 'embeddedClientVersionHash':'1', 'updateIntervalMin':'10', 'heartbeatInterval':${heartbeatInterval}, 'heartbeatLostThreshold':${heartbeatLostThreshold}}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.342" starttime="20180528 16:48:30.342"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.342" starttime="20180528 16:48:30.338"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.343" starttime="20180528 16:48:30.332"></status>
</kw>
<kw name="BTS Get Then Validate Reveiced Sync Message From BTSMED" library="Common_Bts_Keyword">
<arguments>
<arg>${G_SYNC_MSG}</arg>
<arg>${btsid}</arg>
<arg>timeout=10</arg>
<arg>btsmedid=${btsmedid}</arg>
<arg>option=${option}</arg>
</arguments>
<assign>
<var>${synctype}</var>
<var>${ackseq}</var>
</assign>
<kw name="Specified Messages Received BTS" library="Common_Bts_Keyword">
<arguments>
<arg>${timeout}</arg>
<arg>${msg_type}</arg>
<arg>alias=${btsid}</arg>
<arg>btsmedid=${btsmedid}</arg>
<arg>option=${option}</arg>
</arguments>
<assign>
<var>${Msg}</var>
</assign>
<kw name="Get Specified Messages Received Bts" library="NbsLibrary">
<doc>:param timeout:exhausted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${expr}</arg>
<arg>${amount}</arg>
<arg>${alias}</arg>
<arg>${btsmedid}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.344" starttime="20180528 16:48:30.344"></status>
</kw>
<kw type="for" name="${m} IN [ @{msg} ]">
<kw type="foritem" name="${m} = ${m}">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${m["@type"]}'=='IMContent'</arg>
<arg>Send Back Received IMContent Message</arg>
<arg>${alias}</arg>
<arg>${m}</arg>
<arg>${option}</arg>
</arguments>
<kw name="Send Back Received IMContent Message" library="Common_Bts_Keyword">
<arguments>
<arg>${alias}</arg>
<arg>${m}</arg>
<arg>${option}</arg>
</arguments>
<kw name="Copy Dictionary" library="Collections">
<doc>Returns a copy of the given dictionary.</doc>
<arguments>
<arg>${msg}</arg>
</arguments>
<assign>
<var>${m}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.345" starttime="20180528 16:48:30.345"></status>
</kw>
<kw name="Remove From Dictionary" library="Collections">
<doc>Removes the given ``keys`` from the ``dictionary``.</doc>
<arguments>
<arg>${m}</arg>
<arg>@type</arg>
<arg>@id</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.345" starttime="20180528 16:48:30.345"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${m})</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.345" starttime="20180528 16:48:30.345"></status>
</kw>
<kw name="Send Back Message To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send message flow to BTSMED</doc>
<arguments>
<arg>IMContent</arg>
<arg>${alias}</arg>
<arg>${str}</arg>
<arg>${option}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.346" starttime="20180528 16:48:30.346"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.346" starttime="20180528 16:48:30.344"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.346" starttime="20180528 16:48:30.344"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.346" starttime="20180528 16:48:30.344"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.346" starttime="20180528 16:48:30.344"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.346" starttime="20180528 16:48:30.343"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${Msg}</arg>
<arg>${msg_type}</arg>
</arguments>
<assign>
<var>${message}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.346" starttime="20180528 16:48:30.346"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${message}</arg>
<arg>msg=Validate BTS receive sync message is not empty from BTSMED</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.347" starttime="20180528 16:48:30.347"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${message[0]['type']}</arg>
</arguments>
<assign>
<var>${synctype}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.347" starttime="20180528 16:48:30.347"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${message[0]['header']['ackInfo']['ackSeq']}</arg>
</arguments>
<assign>
<var>${ackseq}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.347" starttime="20180528 16:48:30.347"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.347" starttime="20180528 16:48:30.343"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int("${ackseq}")+1</arg>
</arguments>
<assign>
<var>${newseq}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.348" starttime="20180528 16:48:30.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${synctype}" == "DELTA_SYNC"</arg>
<arg>BTS Send Initial MO To BTSMED</arg>
<arg>${btsid}</arg>
<arg>CCN_MRBTS_DISTNAME=${CCN_MRBTS_DISTNAME}</arg>
<arg>seq=${newseq}</arg>
<arg>ELSE</arg>
<arg>BTS Send Initial Full Plan To BTSMED</arg>
<arg>${scf}</arg>
</arguments>
<kw name="BTS Send Initial MO To BTSMED" library="Common_Bts_Keyword">
<arguments>
<arg>${btsid}</arg>
<arg>CCN_MRBTS_DISTNAME=${CCN_MRBTS_DISTNAME}</arg>
<arg>seq=${newseq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>alias=${bts_id_num}</arg>
<arg>distname=${G_CCN_MRBTS_DISTNAME_BTS_CONF}</arg>
<arg>content=${G_CCN_MRBTS_CONTENT_BTS_CONF}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.349" starttime="20180528 16:48:30.349"></status>
</kw>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>alias=${bts_id_num}</arg>
<arg>distname=${CCN_MRBTS_DISTNAME}</arg>
<arg>content=${G_CCN_MRBTS_CONTENT}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.349" starttime="20180528 16:48:30.349"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.349" starttime="20180528 16:48:30.348"></status>
</kw>
<kw name="BTS Send Initial Full Plan To BTSMED" library="Common_Bts_Keyword">
<arguments>
<arg>${scf}</arg>
</arguments>
<kw name="Send Scf To BTSMED" library="NbsLibrary">
<doc>SOAM BTS send IM Updates in SCF file to BTSMED</doc>
<arguments>
<arg>rootpath=/</arg>
<arg>scf=${scf}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.350" starttime="20180528 16:48:30.350"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.350" starttime="20180528 16:48:30.350"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.350" starttime="20180528 16:48:30.348"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.350" starttime="20180528 16:48:30.331"></status>
</kw>
<kw name="Calculator The Time Value When BTSMED Received No Report Response">
<assign>
<var>${S_TIME_NO_RESPONSE}</var>
</assign>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${Dict__FM_Timer_Configuration['OpertionStatusRetryInterval']}</arg>
</arguments>
<assign>
<var>${operationstatusretryinterval}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.351" starttime="20180528 16:48:30.351"></status>
</kw>
<kw name="Calculator Waiting Response The Time Value" library="Common_FM_Keyword">
<assign>
<var>${timeout}</var>
</assign>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${Dict__FM_Timer_Configuration['ClientReceiveTimeout']}</arg>
</arguments>
<assign>
<var>${ClientReceiveTimeout}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.352" starttime="20180528 16:48:30.351"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${ClientReceiveTimeout}+${G_DELAY_TIME}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.352" starttime="20180528 16:48:30.352"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.352" starttime="20180528 16:48:30.351"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${timeout}+${operationstatusretryinterval}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.352" starttime="20180528 16:48:30.352"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.352" starttime="20180528 16:48:30.350"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${S_TIME_NO_RESPONSE}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.353" starttime="20180528 16:48:30.353"></status>
</kw>
<kw name="Calculator The Time Value When BTSMED Received Fail Report Response">
<assign>
<var>${S_TIME_FAIL_RESPONSE}</var>
</assign>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${Dict__FM_Timer_Configuration['OpertionStatusRetryInterval']}</arg>
</arguments>
<assign>
<var>${operationstatusretryinterval}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.353" starttime="20180528 16:48:30.353"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${operationstatusretryinterval}+1</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.354" starttime="20180528 16:48:30.353"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.354" starttime="20180528 16:48:30.353"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${S_TIME_FAIL_RESPONSE}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.354" starttime="20180528 16:48:30.354"></status>
</kw>
<kw name="Calculator Waiting Response The Time Value" library="Common_FM_Keyword">
<assign>
<var>${S_DELAY_RESPONSE_TIME}</var>
</assign>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${Dict__FM_Timer_Configuration['ClientReceiveTimeout']}</arg>
</arguments>
<assign>
<var>${ClientReceiveTimeout}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.355" starttime="20180528 16:48:30.355"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${ClientReceiveTimeout}+${G_DELAY_TIME}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.355" starttime="20180528 16:48:30.355"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.355" starttime="20180528 16:48:30.354"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${S_DELAY_RESPONSE_TIME}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.355" starttime="20180528 16:48:30.355"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.355" starttime="20180528 16:48:30.331"></status>
</kw>
<test id="s1-s1-t1" name="Alarm Upload Operation From NetAct">
<kw type="setup" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Clear BTS Alarm</arg>
<arg>AND</arg>
<arg>Sleep</arg>
<arg>1</arg>
<arg>ensure clear notif be received by NetAct</arg>
<arg>AND</arg>
<arg>Clear NetAct Buffer And Reset NetAct Response</arg>
</arguments>
<kw name="Clear BTS Alarm">
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.358" starttime="20180528 16:48:30.358"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.358" starttime="20180528 16:48:30.357"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.358" starttime="20180528 16:48:30.358"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.358" starttime="20180528 16:48:30.358"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.358" starttime="20180528 16:48:30.357"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.359" starttime="20180528 16:48:30.356"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
<arg>ensure clear notif be received by NetAct</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.359" starttime="20180528 16:48:30.359"></status>
</kw>
<kw name="Clear NetAct Buffer And Reset NetAct Response" library="Common_FM_Keyword">
<kw name="Get Netact Received Messages" library="NbsLibrary">
<doc>:param timeout: exhausted time</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.359" starttime="20180528 16:48:30.359"></status>
</kw>
<kw name="Reset Netact Response Except Default" library="NbsLibrary">
<doc>Reset all NetAct response settings except default</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.360" starttime="20180528 16:48:30.360"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.360" starttime="20180528 16:48:30.359"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.360" starttime="20180528 16:48:30.356"></status>
</kw>
<kw name="BTS Send Alarm Then NetAct Receive Notification" library="Common_FM_Keyword">
<arguments>
<arg>${G_ALARM_NEW}</arg>
<arg>${S_ALARM_DN}</arg>
<arg>${S_ALARM_CONT}</arg>
</arguments>
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
<arg>${cont}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.361" starttime="20180528 16:48:30.361"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.362" starttime="20180528 16:48:30.361"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.362" starttime="20180528 16:48:30.362"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.362" starttime="20180528 16:48:30.362"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.362" starttime="20180528 16:48:30.361"></status>
</kw>
<kw name="Get Then Validate NetAct Received Alarms" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${cont}</arg>
</arguments>
<kw name="Get NetAct Received Specified Msgs" library="Common_FM_Keyword">
<arguments>
<arg>${G_NE3S_OFAS}</arg>
</arguments>
<assign>
<var>${alarm_netact_list}</var>
</assign>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<assign>
<var>${alarm_list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.363" starttime="20180528 16:48:30.363"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${alarm_list}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${alarm_msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.364" starttime="20180528 16:48:30.364"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.364" starttime="20180528 16:48:30.363"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm_netact_list[0]}</arg>
</arguments>
<assign>
<var>${alarm_netact}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.364" starttime="20180528 16:48:30.364"></status>
</kw>
<kw name="Validate NetAct Received Alarms" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${alarm_netact}</arg>
<arg>${alarm_bts}</arg>
</arguments>
<kw name="Validate FM Notification Content" library="Common_FM_Keyword">
<arguments>
<arg>${alarm_netact}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${alarm['notificationType']}</arg>
<arg>ne3s_fm_alarmEventNotification</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of notificationType is ne3s_fm_alarmEventNotification</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.365" starttime="20180528 16:48:30.365"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${alarm['attachmentProperties']['compression']}</arg>
<arg>none</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of compression is none</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.365" starttime="20180528 16:48:30.365"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.366" starttime="20180528 16:48:30.365"></status>
</kw>
<kw name="Get Ofas Attachment From FM Notification" library="Common_FM_Keyword">
<arguments>
<arg>${alarm_netact}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${ofas}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm['notificationContent']}</arg>
</arguments>
<assign>
<var>${file}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.366" starttime="20180528 16:48:30.366"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm['${file}']}</arg>
</arguments>
<assign>
<var>${attfile_ofas}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.367" starttime="20180528 16:48:30.366"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${attfile_ofas['notification']}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${ofas}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.367" starttime="20180528 16:48:30.367"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.367" starttime="20180528 16:48:30.366"></status>
</kw>
<kw name="Validate Ofas Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${alarm_bts}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${ofas['alarmId']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of alarmId is not empty</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.368" starttime="20180528 16:48:30.368"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>/${ofas['@systemDN']}</arg>
<arg>${bts['alarmingResourceDN']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of @systemDN is ${bts['alarmingResourceDN']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.369" starttime="20180528 16:48:30.368"></status>
</kw>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['eventType']}</arg>
<arg>${bts['eventType']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.369" starttime="20180528 16:48:30.369"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['specificProblem']}</arg>
<arg>${bts['alarmNumber']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of specificProblem is ${bts['alarmNumber']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.369" starttime="20180528 16:48:30.369"></status>
</kw>
<kw name="Validate Ofas Attachment Persev Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>cleared</arg>
<arg>${bts['alarmSeverity']}</arg>
</arguments>
<assign>
<var>${expect}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.370" starttime="20180528 16:48:30.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.371" starttime="20180528 16:48:30.371"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.371" starttime="20180528 16:48:30.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Similar Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.371" starttime="20180528 16:48:30.371"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.371" starttime="20180528 16:48:30.371"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.371" starttime="20180528 16:48:30.369"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_New}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.372" starttime="20180528 16:48:30.372"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.372" starttime="20180528 16:48:30.372"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CHANGE}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.373" starttime="20180528 16:48:30.373"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.373" starttime="20180528 16:48:30.372"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Not Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Not Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.374" starttime="20180528 16:48:30.373"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.374" starttime="20180528 16:48:30.373"></status>
</kw>
<kw name="Key In Dictionary" library="common_lib">
<arguments>
<arg>${bts['alarmText']}</arg>
<arg>alarmAdditionalInfo</arg>
</arguments>
<assign>
<var>${has_addtext}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.374" starttime="20180528 16:48:30.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_addtext}</arg>
<arg>Validate Ofas Attachment Addtext1 Content</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Validate Ofas Attachment Addtext1 Content" library="Common_FM_Keyword">
<arguments>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['alarmAdditionalInfo']['shared']}</arg>
</arguments>
<assign>
<var>${shared}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.375" starttime="20180528 16:48:30.375"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['faultDescription']}</arg>
</arguments>
<assign>
<var>${fault_des}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.375" starttime="20180528 16:48:30.375"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fault_des};${shared}</arg>
</arguments>
<assign>
<var>${expect_addtext1}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.376" starttime="20180528 16:48:30.375"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${shared}'== '${G_SHARE_TPYE}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.376" starttime="20180528 16:48:30.376"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.377" starttime="20180528 16:48:30.376"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.377" starttime="20180528 16:48:30.376"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.377" starttime="20180528 16:48:30.374"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.377" starttime="20180528 16:48:30.374"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.377" starttime="20180528 16:48:30.368"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.377" starttime="20180528 16:48:30.364"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.377" starttime="20180528 16:48:30.362"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.377" starttime="20180528 16:48:30.360"></status>
</kw>
<kw name="NetAct Perform Alarm Upload And Validate Response" library="Common_FM_Keyword">
<arguments>
<arg>${EVENTID()}</arg>
</arguments>
<kw name="Upload" library="NbsLibrary">
<arguments>
<arg>managerRegistrationId=mgr</arg>
<arg>managerRegistrationKey=ODYzNTQ0NTg0</arg>
<arg>operationId=${id}</arg>
<arg>timeout=${timeout}</arg>
<arg>filter.uploadType=active_faults</arg>
<arg>filter.objects.sdn=PLMN-1/S3SN-4</arg>
<arg>filter.objects.depth=1</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.378" starttime="20180528 16:48:30.378"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp['timeout']}</arg>
<arg>${timeout}</arg>
<arg>msg=NetAct receive the upload response message and verify the value of timeout is ${timeout}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.378" starttime="20180528 16:48:30.378"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.378" starttime="20180528 16:48:30.377"></status>
</kw>
<kw name="Get Then Validate Alarm Upload Result">
<kw name="Get NetAct Received Specified Msgs" library="Common_FM_Keyword">
<arguments>
<arg>${G_NE3S_REPORT_OFAS}</arg>
</arguments>
<assign>
<var>${ofas_res}</var>
</assign>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<assign>
<var>${alarm_list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.379" starttime="20180528 16:48:30.379"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${alarm_list}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${alarm_msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.380" starttime="20180528 16:48:30.380"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.380" starttime="20180528 16:48:30.379"></status>
</kw>
<kw name="Validate Alarm Upload Ofas Result">
<arguments>
<arg>${ofas_res[0]}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_res['attachmentProperties']['compression']}</arg>
<arg>${G_OFAS_COMP}</arg>
<arg>msg=NetAct receive reportoperationstatus contain ofas message and verify the value of compression is ${G_OFAS_COMP}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.380" starttime="20180528 16:48:30.380"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_res['attachmentProperties']['contentType']}</arg>
<arg>${G_OFAS_CONTTYPE}</arg>
<arg>msg=NetAct receive reportoperationstatus contain ofas message and verify the value of contentType is ${G_OFAS_CONTTYPE}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.381" starttime="20180528 16:48:30.381"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_res['pageSequenceNumber']}</arg>
<arg>1</arg>
<arg>msg=NetAct receive reportoperationstatus contain ofas message and verify the value of pageSequenceNumber is 1</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.381" starttime="20180528 16:48:30.381"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${ofas_res['operationStatusContent']}</arg>
</arguments>
<assign>
<var>${cid}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.382" starttime="20180528 16:48:30.381"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${ofas_res['${cid}']['alarmSynchronisation']}</arg>
<arg>${G_ALARM_NEW}</arg>
</arguments>
<assign>
<var>${ofas_cont}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.382" starttime="20180528 16:48:30.382"></status>
</kw>
<kw name="Validate Ofas Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${G_ALARM_NEW}</arg>
<arg>${ofas_cont}</arg>
<arg>${S_ALARM_CONT}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${ofas['alarmId']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of alarmId is not empty</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.383" starttime="20180528 16:48:30.382"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>/${ofas['@systemDN']}</arg>
<arg>${bts['alarmingResourceDN']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of @systemDN is ${bts['alarmingResourceDN']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.383" starttime="20180528 16:48:30.383"></status>
</kw>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['eventType']}</arg>
<arg>${bts['eventType']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.383" starttime="20180528 16:48:30.383"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['specificProblem']}</arg>
<arg>${bts['alarmNumber']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of specificProblem is ${bts['alarmNumber']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.384" starttime="20180528 16:48:30.383"></status>
</kw>
<kw name="Validate Ofas Attachment Persev Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>cleared</arg>
<arg>${bts['alarmSeverity']}</arg>
</arguments>
<assign>
<var>${expect}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.384" starttime="20180528 16:48:30.384"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.385" starttime="20180528 16:48:30.385"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.385" starttime="20180528 16:48:30.384"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Similar Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.386" starttime="20180528 16:48:30.385"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.386" starttime="20180528 16:48:30.385"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.386" starttime="20180528 16:48:30.384"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_New}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.386" starttime="20180528 16:48:30.386"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.386" starttime="20180528 16:48:30.386"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CHANGE}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.387" starttime="20180528 16:48:30.387"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.387" starttime="20180528 16:48:30.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Not Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Not Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.388" starttime="20180528 16:48:30.388"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.388" starttime="20180528 16:48:30.387"></status>
</kw>
<kw name="Key In Dictionary" library="common_lib">
<arguments>
<arg>${bts['alarmText']}</arg>
<arg>alarmAdditionalInfo</arg>
</arguments>
<assign>
<var>${has_addtext}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.388" starttime="20180528 16:48:30.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_addtext}</arg>
<arg>Validate Ofas Attachment Addtext1 Content</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Validate Ofas Attachment Addtext1 Content" library="Common_FM_Keyword">
<arguments>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['alarmAdditionalInfo']['shared']}</arg>
</arguments>
<assign>
<var>${shared}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.389" starttime="20180528 16:48:30.389"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['faultDescription']}</arg>
</arguments>
<assign>
<var>${fault_des}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.390" starttime="20180528 16:48:30.390"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fault_des};${shared}</arg>
</arguments>
<assign>
<var>${expect_addtext1}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.390" starttime="20180528 16:48:30.390"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${shared}'== '${G_SHARE_TPYE}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.391" starttime="20180528 16:48:30.391"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.391" starttime="20180528 16:48:30.391"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.391" starttime="20180528 16:48:30.390"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.391" starttime="20180528 16:48:30.388"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.391" starttime="20180528 16:48:30.388"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.391" starttime="20180528 16:48:30.382"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.391" starttime="20180528 16:48:30.380"></status>
</kw>
<kw name="Get NetAct Received Specified Msgs" library="Common_FM_Keyword">
<arguments>
<arg>${G_NE3S_REPORT_FB}</arg>
</arguments>
<assign>
<var>${fb_res}</var>
</assign>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<assign>
<var>${alarm_list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.392" starttime="20180528 16:48:30.392"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${alarm_list}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${alarm_msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.392" starttime="20180528 16:48:30.392"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.392" starttime="20180528 16:48:30.392"></status>
</kw>
<kw name="Validate Alarm Upload Feedback Result" library="Common_FM_Keyword">
<arguments>
<arg>${fb_res[0]}</arg>
<arg>2</arg>
<arg>ok</arg>
<arg>1</arg>
<arg>0</arg>
<arg>${S_UPLOAD_FEEDBACK_OK}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb_res['attachmentProperties']['compression']}</arg>
<arg>${G_OFAS_COMP}</arg>
<arg>msg=NetAct receive reportoperationstatus contain feedback message and verify the value of compression is ${G_OFAS_COMP}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.393" starttime="20180528 16:48:30.393"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb_res['attachmentProperties']['contentType']}</arg>
<arg>${G_FB_CONTTYPE}</arg>
<arg>msg=NetAct receive reportoperationstatus contain feedback message and verify the value of contentType is ${G_FB_CONTTYPE}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.394" starttime="20180528 16:48:30.393"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb_res['pageSequenceNumber']}</arg>
<arg>${seq}</arg>
<arg>msg=NetAct receive reportoperationstatus contain feedback message and verify the value of pageSequenceNumber is ${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.394" starttime="20180528 16:48:30.394"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fb_res['operationStatusContent']}</arg>
</arguments>
<assign>
<var>${cid}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.394" starttime="20180528 16:48:30.394"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${fb_res['${cid}']}</arg>
<arg>NE3SFeedback</arg>
</arguments>
<assign>
<var>${fb_cont}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.395" starttime="20180528 16:48:30.394"></status>
</kw>
<kw name="Validate Operation Feedback Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${fb_cont}</arg>
<arg>${status}</arg>
<arg>${succ}</arg>
<arg>${unsucc}</arg>
<arg>${msg}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb['@status']}</arg>
<arg>${status}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of @status is ${status}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.395" starttime="20180528 16:48:30.395"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb['@successful']}</arg>
<arg>${succ}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of @successful is ${succ}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.396" starttime="20180528 16:48:30.396"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb['@unsuccessful']}</arg>
<arg>${unsucc}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of @unsuccessful is ${unsucc}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.396" starttime="20180528 16:48:30.396"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${fb['message_result']}</arg>
<arg>${msg_add}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of message_result contain ${msg_add}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.396" starttime="20180528 16:48:30.396"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.396" starttime="20180528 16:48:30.395"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.396" starttime="20180528 16:48:30.393"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.396" starttime="20180528 16:48:30.378"></status>
</kw>
<kw type="teardown" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Clear BTS Alarm</arg>
</arguments>
<kw name="Clear BTS Alarm">
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.398" starttime="20180528 16:48:30.398"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.399" starttime="20180528 16:48:30.398"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.399" starttime="20180528 16:48:30.399"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.400" starttime="20180528 16:48:30.399"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.400" starttime="20180528 16:48:30.398"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.400" starttime="20180528 16:48:30.397"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.400" starttime="20180528 16:48:30.397"></status>
</kw>
<tags>
<tag>acc-LTE3435-A-c.1.1</tag>
<tag>feature-LTE3435-A-c</tag>
<tag>owner-jason.w.ye</tag>
<tag>release-SRAN17</tag>
<tag>status-RT</tag>
<tag>team-SISOET</tag>
<tag>type-normal</tag>
</tags>
<status status="PASS" endtime="20180528 16:48:30.400" critical="yes" starttime="20180528 16:48:30.356"></status>
</test>
<test id="s1-s1-t2" name="Alarm Upload Exception when BTS Disconnect with BTSMED">
<kw type="setup" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Clear BTS Alarm</arg>
<arg>AND</arg>
<arg>Sleep</arg>
<arg>1</arg>
<arg>ensure clear notif be received by NetAct</arg>
<arg>AND</arg>
<arg>Clear NetAct Buffer And Reset NetAct Response</arg>
</arguments>
<kw name="Clear BTS Alarm">
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.403" starttime="20180528 16:48:30.402"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.403" starttime="20180528 16:48:30.402"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.403" starttime="20180528 16:48:30.403"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.403" starttime="20180528 16:48:30.403"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.403" starttime="20180528 16:48:30.402"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.403" starttime="20180528 16:48:30.401"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
<arg>ensure clear notif be received by NetAct</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.404" starttime="20180528 16:48:30.404"></status>
</kw>
<kw name="Clear NetAct Buffer And Reset NetAct Response" library="Common_FM_Keyword">
<kw name="Get Netact Received Messages" library="NbsLibrary">
<doc>:param timeout: exhausted time</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.404" starttime="20180528 16:48:30.404"></status>
</kw>
<kw name="Reset Netact Response Except Default" library="NbsLibrary">
<doc>Reset all NetAct response settings except default</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.405" starttime="20180528 16:48:30.405"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.405" starttime="20180528 16:48:30.404"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.405" starttime="20180528 16:48:30.401"></status>
</kw>
<kw name="BTS Send Alarm Then NetAct Receive Notification" library="Common_FM_Keyword">
<arguments>
<arg>${G_ALARM_NEW}</arg>
<arg>${S_ALARM_DN}</arg>
<arg>${S_ALARM_CONT}</arg>
</arguments>
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
<arg>${cont}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.407" starttime="20180528 16:48:30.406"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.407" starttime="20180528 16:48:30.406"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.407" starttime="20180528 16:48:30.407"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.407" starttime="20180528 16:48:30.407"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.407" starttime="20180528 16:48:30.406"></status>
</kw>
<kw name="Get Then Validate NetAct Received Alarms" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${cont}</arg>
</arguments>
<kw name="Get NetAct Received Specified Msgs" library="Common_FM_Keyword">
<arguments>
<arg>${G_NE3S_OFAS}</arg>
</arguments>
<assign>
<var>${alarm_netact_list}</var>
</assign>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<assign>
<var>${alarm_list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.409" starttime="20180528 16:48:30.409"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${alarm_list}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${alarm_msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.409" starttime="20180528 16:48:30.409"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.409" starttime="20180528 16:48:30.408"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm_netact_list[0]}</arg>
</arguments>
<assign>
<var>${alarm_netact}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.409" starttime="20180528 16:48:30.409"></status>
</kw>
<kw name="Validate NetAct Received Alarms" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${alarm_netact}</arg>
<arg>${alarm_bts}</arg>
</arguments>
<kw name="Validate FM Notification Content" library="Common_FM_Keyword">
<arguments>
<arg>${alarm_netact}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${alarm['notificationType']}</arg>
<arg>ne3s_fm_alarmEventNotification</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of notificationType is ne3s_fm_alarmEventNotification</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.411" starttime="20180528 16:48:30.411"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${alarm['attachmentProperties']['compression']}</arg>
<arg>none</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of compression is none</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.411" starttime="20180528 16:48:30.411"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.411" starttime="20180528 16:48:30.410"></status>
</kw>
<kw name="Get Ofas Attachment From FM Notification" library="Common_FM_Keyword">
<arguments>
<arg>${alarm_netact}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${ofas}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm['notificationContent']}</arg>
</arguments>
<assign>
<var>${file}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.412" starttime="20180528 16:48:30.412"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm['${file}']}</arg>
</arguments>
<assign>
<var>${attfile_ofas}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.413" starttime="20180528 16:48:30.412"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${attfile_ofas['notification']}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${ofas}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.413" starttime="20180528 16:48:30.413"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.413" starttime="20180528 16:48:30.412"></status>
</kw>
<kw name="Validate Ofas Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${alarm_bts}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${ofas['alarmId']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of alarmId is not empty</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.414" starttime="20180528 16:48:30.414"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>/${ofas['@systemDN']}</arg>
<arg>${bts['alarmingResourceDN']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of @systemDN is ${bts['alarmingResourceDN']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.414" starttime="20180528 16:48:30.414"></status>
</kw>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['eventType']}</arg>
<arg>${bts['eventType']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.414" starttime="20180528 16:48:30.414"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['specificProblem']}</arg>
<arg>${bts['alarmNumber']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of specificProblem is ${bts['alarmNumber']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.415" starttime="20180528 16:48:30.415"></status>
</kw>
<kw name="Validate Ofas Attachment Persev Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>cleared</arg>
<arg>${bts['alarmSeverity']}</arg>
</arguments>
<assign>
<var>${expect}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.415" starttime="20180528 16:48:30.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.416" starttime="20180528 16:48:30.416"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.416" starttime="20180528 16:48:30.416"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Similar Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.417" starttime="20180528 16:48:30.417"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.417" starttime="20180528 16:48:30.416"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.417" starttime="20180528 16:48:30.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_New}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.418" starttime="20180528 16:48:30.418"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.418" starttime="20180528 16:48:30.417"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CHANGE}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.418" starttime="20180528 16:48:30.418"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.418" starttime="20180528 16:48:30.418"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Not Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Not Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.419" starttime="20180528 16:48:30.419"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.419" starttime="20180528 16:48:30.419"></status>
</kw>
<kw name="Key In Dictionary" library="common_lib">
<arguments>
<arg>${bts['alarmText']}</arg>
<arg>alarmAdditionalInfo</arg>
</arguments>
<assign>
<var>${has_addtext}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.419" starttime="20180528 16:48:30.419"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_addtext}</arg>
<arg>Validate Ofas Attachment Addtext1 Content</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Validate Ofas Attachment Addtext1 Content" library="Common_FM_Keyword">
<arguments>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['alarmAdditionalInfo']['shared']}</arg>
</arguments>
<assign>
<var>${shared}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.421" starttime="20180528 16:48:30.420"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['faultDescription']}</arg>
</arguments>
<assign>
<var>${fault_des}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.421" starttime="20180528 16:48:30.421"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fault_des};${shared}</arg>
</arguments>
<assign>
<var>${expect_addtext1}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.421" starttime="20180528 16:48:30.421"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${shared}'== '${G_SHARE_TPYE}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.422" starttime="20180528 16:48:30.422"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.422" starttime="20180528 16:48:30.422"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.422" starttime="20180528 16:48:30.421"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.422" starttime="20180528 16:48:30.420"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.422" starttime="20180528 16:48:30.420"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.422" starttime="20180528 16:48:30.413"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.423" starttime="20180528 16:48:30.410"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.423" starttime="20180528 16:48:30.408"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.423" starttime="20180528 16:48:30.405"></status>
</kw>
<kw name="Make BTS Offline And Validate Alarm 8502">
<kw name="Make BTS Offline" library="Common_Bts_Keyword">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>150ms</arg>
<arg>wait for alarm 8502 inteval time</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.424" starttime="20180528 16:48:30.424"></status>
</kw>
<kw name="Stop Bts" library="NbsLibrary">
<doc>stop the specified bts, default is present running bts.</doc>
<arguments>
<arg>${btsid}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.424" starttime="20180528 16:48:30.424"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.424" starttime="20180528 16:48:30.423"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 sec</arg>
<arg>10ms</arg>
<arg>Validate New Alarm 8502</arg>
<arg>MRBTS-6</arg>
</arguments>
<kw name="Validate New Alarm 8502">
<arguments>
<arg>MRBTS-6</arg>
</arguments>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>2</arg>
<arg>${S_NE3S_OFAS}</arg>
</arguments>
<assign>
<var>${NA received msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.425" starttime="20180528 16:48:30.425"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${NA received msg}</arg>
<arg>${S_NE3S_OFAS}</arg>
</arguments>
<assign>
<var>${alarm msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.425" starttime="20180528 16:48:30.425"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm msg[0]}</arg>
</arguments>
<assign>
<var>${alarm}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.426" starttime="20180528 16:48:30.426"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm['${alarm['notificationContent']}']['notification']['alarmNew']}</arg>
</arguments>
<assign>
<var>${ofas_elements}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.426" starttime="20180528 16:48:30.426"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${ofas_elements['specificProblem']}</arg>
<arg>8502</arg>
<arg>msg=Validate the specificProblem is 8502</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.427" starttime="20180528 16:48:30.426"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_elements['@systemDN']}</arg>
<arg>${neDN}</arg>
<arg>msg=Validate the systemDN</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.427" starttime="20180528 16:48:30.427"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.427" starttime="20180528 16:48:30.425"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.427" starttime="20180528 16:48:30.424"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.427" starttime="20180528 16:48:30.423"></status>
</kw>
<kw name="NetAct Perform Alarm Upload And Validate Response" library="Common_FM_Keyword">
<arguments>
<arg>${EVENTID()}</arg>
</arguments>
<kw name="Upload" library="NbsLibrary">
<arguments>
<arg>managerRegistrationId=mgr</arg>
<arg>managerRegistrationKey=ODYzNTQ0NTg0</arg>
<arg>operationId=${id}</arg>
<arg>timeout=${timeout}</arg>
<arg>filter.uploadType=active_faults</arg>
<arg>filter.objects.sdn=PLMN-1/S3SN-4</arg>
<arg>filter.objects.depth=1</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.428" starttime="20180528 16:48:30.428"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp['timeout']}</arg>
<arg>${timeout}</arg>
<arg>msg=NetAct receive the upload response message and verify the value of timeout is ${timeout}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.428" starttime="20180528 16:48:30.428"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.428" starttime="20180528 16:48:30.427"></status>
</kw>
<kw name="Get Then Validate Alarm Upload Exception Result" library="Common_FM_Keyword">
<kw name="Get NetAct Received Specified Msgs" library="Common_FM_Keyword">
<arguments>
<arg>${G_NE3S_REPORT_FB}</arg>
</arguments>
<assign>
<var>${fb_res}</var>
</assign>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<assign>
<var>${alarm_list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.430" starttime="20180528 16:48:30.430"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${alarm_list}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${alarm_msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.430" starttime="20180528 16:48:30.430"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.430" starttime="20180528 16:48:30.429"></status>
</kw>
<kw name="Validate Alarm Upload Feedback Result" library="Common_FM_Keyword">
<arguments>
<arg>${fb_res[0]}</arg>
<arg>1</arg>
<arg>not_ok</arg>
<arg>0</arg>
<arg>1</arg>
<arg>${G_UPLOAD_FEEDBACK_NO_CONNECTIVITY}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb_res['attachmentProperties']['compression']}</arg>
<arg>${G_OFAS_COMP}</arg>
<arg>msg=NetAct receive reportoperationstatus contain feedback message and verify the value of compression is ${G_OFAS_COMP}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.431" starttime="20180528 16:48:30.431"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb_res['attachmentProperties']['contentType']}</arg>
<arg>${G_FB_CONTTYPE}</arg>
<arg>msg=NetAct receive reportoperationstatus contain feedback message and verify the value of contentType is ${G_FB_CONTTYPE}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.431" starttime="20180528 16:48:30.431"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb_res['pageSequenceNumber']}</arg>
<arg>${seq}</arg>
<arg>msg=NetAct receive reportoperationstatus contain feedback message and verify the value of pageSequenceNumber is ${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.432" starttime="20180528 16:48:30.432"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fb_res['operationStatusContent']}</arg>
</arguments>
<assign>
<var>${cid}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.432" starttime="20180528 16:48:30.432"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${fb_res['${cid}']}</arg>
<arg>NE3SFeedback</arg>
</arguments>
<assign>
<var>${fb_cont}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.432" starttime="20180528 16:48:30.432"></status>
</kw>
<kw name="Validate Operation Feedback Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${fb_cont}</arg>
<arg>${status}</arg>
<arg>${succ}</arg>
<arg>${unsucc}</arg>
<arg>${msg}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb['@status']}</arg>
<arg>${status}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of @status is ${status}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.433" starttime="20180528 16:48:30.433"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb['@successful']}</arg>
<arg>${succ}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of @successful is ${succ}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.434" starttime="20180528 16:48:30.433"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb['@unsuccessful']}</arg>
<arg>${unsucc}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of @unsuccessful is ${unsucc}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.434" starttime="20180528 16:48:30.434"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${fb['message_result']}</arg>
<arg>${msg_add}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of message_result contain ${msg_add}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.434" starttime="20180528 16:48:30.434"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.434" starttime="20180528 16:48:30.433"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.434" starttime="20180528 16:48:30.430"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.434" starttime="20180528 16:48:30.429"></status>
</kw>
<kw type="teardown" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>BTS Start Up</arg>
<arg>Clear BTS Alarm</arg>
</arguments>
<kw name="BTS Start Up" library="Common_Bts_Keyword">
<kw name="BTS Connect To BTSMED" library="Common_Bts_Keyword">
<arguments>
<arg>${btsid}</arg>
<arg>${heartbeatInterval}</arg>
<arg>${heartbeatLostThreshold}</arg>
<arg>${SessionID}</arg>
<arg>port=${port}</arg>
<arg>cerpath=${cerpath}</arg>
<arg>enb_sw_version=${enb_sw_version}</arg>
<arg>protocol=${protocol}</arg>
<arg>version=${version}</arg>
</arguments>
<kw name="BTS Send Version Response To BTSMED" library="Common_Bts_Keyword">
<arguments>
<arg>${btsid}</arg>
<arg>port=${port}</arg>
<arg>cerpath=${cerpath}</arg>
<arg>enb_sw_version=${enb_sw_version}</arg>
<arg>protocol=${protocol}</arg>
<arg>btsmedid=${btsmedid}</arg>
<arg>option=${option}</arg>
<arg>version=${version}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${port}==8102</arg>
<arg>Init BTS</arg>
<arg>${port}</arg>
<arg>${btsid}</arg>
<arg>protocol=${protocol}</arg>
<arg>version=${version}</arg>
</arguments>
<kw name="Init Bts" library="NbsLibrary">
<doc>init  a single bts with default setting;</doc>
<arguments>
<arg>${port}</arg>
<arg>${btsid}</arg>
<arg>protocol=${protocol}</arg>
<arg>version=${version}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.438" starttime="20180528 16:48:30.437"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.438" starttime="20180528 16:48:30.437"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${port}==8103</arg>
<arg>Init BTS</arg>
<arg>${port}</arg>
<arg>${btsid}</arg>
<arg>${cerpath}</arg>
<arg>protocol=${protocol}</arg>
<arg>version=${version}</arg>
</arguments>
<kw name="Init Bts" library="NbsLibrary">
<doc>init  a single bts with default setting;</doc>
<arguments>
<arg>${port}</arg>
<arg>${btsid}</arg>
<arg>${cerpath}</arg>
<arg>protocol=${protocol}</arg>
<arg>version=${version}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.438" starttime="20180528 16:48:30.438"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.438" starttime="20180528 16:48:30.438"></status>
</kw>
<kw name="Specified Messages Received BTS" library="Common_Bts_Keyword">
<arguments>
<arg>${G_WAIT_TIMEOUT}</arg>
<arg>@type=VersionRequest</arg>
<arg>1</arg>
<arg>${btsid}</arg>
<arg>${btsmedid}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<kw name="Get Specified Messages Received Bts" library="NbsLibrary">
<doc>:param timeout:exhausted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${expr}</arg>
<arg>${amount}</arg>
<arg>${alias}</arg>
<arg>${btsmedid}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.439" starttime="20180528 16:48:30.439"></status>
</kw>
<kw type="for" name="${m} IN [ @{msg} ]">
<kw type="foritem" name="${m} = ${m}">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${m["@type"]}'=='IMContent'</arg>
<arg>Send Back Received IMContent Message</arg>
<arg>${alias}</arg>
<arg>${m}</arg>
<arg>${option}</arg>
</arguments>
<kw name="Send Back Received IMContent Message" library="Common_Bts_Keyword">
<arguments>
<arg>${alias}</arg>
<arg>${m}</arg>
<arg>${option}</arg>
</arguments>
<kw name="Copy Dictionary" library="Collections">
<doc>Returns a copy of the given dictionary.</doc>
<arguments>
<arg>${msg}</arg>
</arguments>
<assign>
<var>${m}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.440" starttime="20180528 16:48:30.440"></status>
</kw>
<kw name="Remove From Dictionary" library="Collections">
<doc>Removes the given ``keys`` from the ``dictionary``.</doc>
<arguments>
<arg>${m}</arg>
<arg>@type</arg>
<arg>@id</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.441" starttime="20180528 16:48:30.441"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${m})</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.441" starttime="20180528 16:48:30.441"></status>
</kw>
<kw name="Send Back Message To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send message flow to BTSMED</doc>
<arguments>
<arg>IMContent</arg>
<arg>${alias}</arg>
<arg>${str}</arg>
<arg>${option}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.441" starttime="20180528 16:48:30.441"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.442" starttime="20180528 16:48:30.440"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.442" starttime="20180528 16:48:30.440"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.442" starttime="20180528 16:48:30.439"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.442" starttime="20180528 16:48:30.439"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.442" starttime="20180528 16:48:30.439"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${msg[-1]['@type']}</arg>
<arg>VersionRequest</arg>
<arg>msg=Verify BTS receive version request message from BTSMED</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.442" starttime="20180528 16:48:30.442"></status>
</kw>
<kw name="Get Current Timestamp" library="common_lib">
<assign>
<var>${timestamp}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.442" starttime="20180528 16:48:30.442"></status>
</kw>
<kw name="Send Message To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send message flow to BTSMED</doc>
<arguments>
<arg>msg_type=VersionResponse</arg>
<arg>option=${option}</arg>
<arg>header={'timestamp':'${timestamp}'}</arg>
<arg>soamIfVersion=${G_SOAMIFVERSION}</arg>
<arg>btsId=${btsid}</arg>
<arg>swVersion=${enb_sw_version}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.443" starttime="20180528 16:48:30.443"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.443" starttime="20180528 16:48:30.437"></status>
</kw>
<kw name="BTS Establish Session With BTSMED" library="Common_Bts_Keyword">
<arguments>
<arg>${heartbeatInterval}</arg>
<arg>${heartbeatLostThreshold}</arg>
<arg>${SessionID}</arg>
<arg>${btsid}</arg>
<arg>${btsmedid}</arg>
<arg>option=${option}</arg>
</arguments>
<kw name="Specified Messages Received BTS" library="Common_Bts_Keyword">
<arguments>
<arg>${G_BTS_SESSION_ESTABLISHMENT_TIMEOUT_ADAPTATION}</arg>
<arg>@type=EstablishSession</arg>
<arg>1</arg>
<arg>${btsid}</arg>
<arg>${btsmedid}</arg>
<arg>${option}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<kw name="Get Specified Messages Received Bts" library="NbsLibrary">
<doc>:param timeout:exhausted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${expr}</arg>
<arg>${amount}</arg>
<arg>${alias}</arg>
<arg>${btsmedid}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.444" starttime="20180528 16:48:30.444"></status>
</kw>
<kw type="for" name="${m} IN [ @{msg} ]">
<kw type="foritem" name="${m} = ${m}">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${m["@type"]}'=='IMContent'</arg>
<arg>Send Back Received IMContent Message</arg>
<arg>${alias}</arg>
<arg>${m}</arg>
<arg>${option}</arg>
</arguments>
<kw name="Send Back Received IMContent Message" library="Common_Bts_Keyword">
<arguments>
<arg>${alias}</arg>
<arg>${m}</arg>
<arg>${option}</arg>
</arguments>
<kw name="Copy Dictionary" library="Collections">
<doc>Returns a copy of the given dictionary.</doc>
<arguments>
<arg>${msg}</arg>
</arguments>
<assign>
<var>${m}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.445" starttime="20180528 16:48:30.445"></status>
</kw>
<kw name="Remove From Dictionary" library="Collections">
<doc>Removes the given ``keys`` from the ``dictionary``.</doc>
<arguments>
<arg>${m}</arg>
<arg>@type</arg>
<arg>@id</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.446" starttime="20180528 16:48:30.445"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${m})</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.446" starttime="20180528 16:48:30.446"></status>
</kw>
<kw name="Send Back Message To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send message flow to BTSMED</doc>
<arguments>
<arg>IMContent</arg>
<arg>${alias}</arg>
<arg>${str}</arg>
<arg>${option}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.446" starttime="20180528 16:48:30.446"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.446" starttime="20180528 16:48:30.445"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.446" starttime="20180528 16:48:30.444"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.446" starttime="20180528 16:48:30.444"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.446" starttime="20180528 16:48:30.444"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.447" starttime="20180528 16:48:30.443"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${msg[0]['@type']}</arg>
<arg>EstablishSession</arg>
<arg>msg=Verify BTS receive establish session message from BTSMED</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.447" starttime="20180528 16:48:30.447"></status>
</kw>
<kw name="Get Current Timestamp" library="common_lib">
<assign>
<var>${timestamp}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.447" starttime="20180528 16:48:30.447"></status>
</kw>
<kw name="Send Message To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send message flow to BTSMED</doc>
<arguments>
<arg>msg_type=SessionEstablished</arg>
<arg>option=${option}</arg>
<arg>header={'timestamp':'${timestamp}'}</arg>
<arg>result=1</arg>
<arg>successResp={'assignedSessionId':'${SessionID}', 'sessionObjectDistname':'/MRBTS-1/RAT-1/URI-1/SESSION-1', 'embeddedClientVersion':'1', 'embeddedClientVersionHash':'1', 'updateIntervalMin':'10', 'heartbeatInterval':${heartbeatInterval}, 'heartbeatLostThreshold':${heartbeatLostThreshold}}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.448" starttime="20180528 16:48:30.447"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.448" starttime="20180528 16:48:30.443"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.448" starttime="20180528 16:48:30.436"></status>
</kw>
<kw name="BTS Get Then Validate Reveiced Sync Message From BTSMED" library="Common_Bts_Keyword">
<arguments>
<arg>${G_SYNC_MSG}</arg>
<arg>${btsid}</arg>
<arg>timeout=10</arg>
<arg>btsmedid=${btsmedid}</arg>
<arg>option=${option}</arg>
</arguments>
<assign>
<var>${synctype}</var>
<var>${ackseq}</var>
</assign>
<kw name="Specified Messages Received BTS" library="Common_Bts_Keyword">
<arguments>
<arg>${timeout}</arg>
<arg>${msg_type}</arg>
<arg>alias=${btsid}</arg>
<arg>btsmedid=${btsmedid}</arg>
<arg>option=${option}</arg>
</arguments>
<assign>
<var>${Msg}</var>
</assign>
<kw name="Get Specified Messages Received Bts" library="NbsLibrary">
<doc>:param timeout:exhausted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${expr}</arg>
<arg>${amount}</arg>
<arg>${alias}</arg>
<arg>${btsmedid}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.449" starttime="20180528 16:48:30.449"></status>
</kw>
<kw type="for" name="${m} IN [ @{msg} ]">
<kw type="foritem" name="${m} = ${m}">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${m["@type"]}'=='IMContent'</arg>
<arg>Send Back Received IMContent Message</arg>
<arg>${alias}</arg>
<arg>${m}</arg>
<arg>${option}</arg>
</arguments>
<kw name="Send Back Received IMContent Message" library="Common_Bts_Keyword">
<arguments>
<arg>${alias}</arg>
<arg>${m}</arg>
<arg>${option}</arg>
</arguments>
<kw name="Copy Dictionary" library="Collections">
<doc>Returns a copy of the given dictionary.</doc>
<arguments>
<arg>${msg}</arg>
</arguments>
<assign>
<var>${m}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.450" starttime="20180528 16:48:30.450"></status>
</kw>
<kw name="Remove From Dictionary" library="Collections">
<doc>Removes the given ``keys`` from the ``dictionary``.</doc>
<arguments>
<arg>${m}</arg>
<arg>@type</arg>
<arg>@id</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.451" starttime="20180528 16:48:30.450"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${m})</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.451" starttime="20180528 16:48:30.451"></status>
</kw>
<kw name="Send Back Message To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send message flow to BTSMED</doc>
<arguments>
<arg>IMContent</arg>
<arg>${alias}</arg>
<arg>${str}</arg>
<arg>${option}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.451" starttime="20180528 16:48:30.451"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.451" starttime="20180528 16:48:30.450"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.451" starttime="20180528 16:48:30.449"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.451" starttime="20180528 16:48:30.449"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.451" starttime="20180528 16:48:30.449"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.451" starttime="20180528 16:48:30.448"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${Msg}</arg>
<arg>${msg_type}</arg>
</arguments>
<assign>
<var>${message}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.452" starttime="20180528 16:48:30.452"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${message}</arg>
<arg>msg=Validate BTS receive sync message is not empty from BTSMED</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.452" starttime="20180528 16:48:30.452"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${message[0]['type']}</arg>
</arguments>
<assign>
<var>${synctype}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.452" starttime="20180528 16:48:30.452"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${message[0]['header']['ackInfo']['ackSeq']}</arg>
</arguments>
<assign>
<var>${ackseq}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.453" starttime="20180528 16:48:30.453"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.453" starttime="20180528 16:48:30.448"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int("${ackseq}")+1</arg>
</arguments>
<assign>
<var>${newseq}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.453" starttime="20180528 16:48:30.453"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${synctype}" == "DELTA_SYNC"</arg>
<arg>BTS Send Initial MO To BTSMED</arg>
<arg>${btsid}</arg>
<arg>CCN_MRBTS_DISTNAME=${CCN_MRBTS_DISTNAME}</arg>
<arg>seq=${newseq}</arg>
<arg>ELSE</arg>
<arg>BTS Send Initial Full Plan To BTSMED</arg>
<arg>${scf}</arg>
</arguments>
<kw name="BTS Send Initial MO To BTSMED" library="Common_Bts_Keyword">
<arguments>
<arg>${btsid}</arg>
<arg>CCN_MRBTS_DISTNAME=${CCN_MRBTS_DISTNAME}</arg>
<arg>seq=${newseq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>alias=${bts_id_num}</arg>
<arg>distname=${G_CCN_MRBTS_DISTNAME_BTS_CONF}</arg>
<arg>content=${G_CCN_MRBTS_CONTENT_BTS_CONF}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.454" starttime="20180528 16:48:30.454"></status>
</kw>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>alias=${bts_id_num}</arg>
<arg>distname=${CCN_MRBTS_DISTNAME}</arg>
<arg>content=${G_CCN_MRBTS_CONTENT}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.455" starttime="20180528 16:48:30.455"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.455" starttime="20180528 16:48:30.454"></status>
</kw>
<kw name="BTS Send Initial Full Plan To BTSMED" library="Common_Bts_Keyword">
<arguments>
<arg>${scf}</arg>
</arguments>
<kw name="Send Scf To BTSMED" library="NbsLibrary">
<doc>SOAM BTS send IM Updates in SCF file to BTSMED</doc>
<arguments>
<arg>rootpath=/</arg>
<arg>scf=${scf}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.455" starttime="20180528 16:48:30.455"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.456" starttime="20180528 16:48:30.455"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.456" starttime="20180528 16:48:30.453"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.456" starttime="20180528 16:48:30.435"></status>
</kw>
<kw name="Clear BTS Alarm">
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.458" starttime="20180528 16:48:30.457"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.458" starttime="20180528 16:48:30.457"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.458" starttime="20180528 16:48:30.458"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.458" starttime="20180528 16:48:30.458"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.458" starttime="20180528 16:48:30.456"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.458" starttime="20180528 16:48:30.456"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.458" starttime="20180528 16:48:30.435"></status>
</kw>
<tags>
<tag>acc-LTE3435-A-c.1.3</tag>
<tag>feature-LTE3435-A-c</tag>
<tag>owner-jason.w.ye</tag>
<tag>release-SRAN17</tag>
<tag>status-RT</tag>
<tag>team-SISOET</tag>
<tag>type-exception</tag>
</tags>
<status status="PASS" endtime="20180528 16:48:30.459" critical="yes" starttime="20180528 16:48:30.400"></status>
</test>
<test id="s1-s1-t3" name="Alarm Upload Exception when BTSMED Receive Soapfault Response from NetAct and Retry Succeed">
<kw type="setup" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Clear BTS Alarm</arg>
<arg>AND</arg>
<arg>Sleep</arg>
<arg>1</arg>
<arg>ensure clear notif be received by NetAct</arg>
<arg>AND</arg>
<arg>Clear NetAct Buffer And Reset NetAct Response</arg>
</arguments>
<kw name="Clear BTS Alarm">
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.461" starttime="20180528 16:48:30.461"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.461" starttime="20180528 16:48:30.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.462" starttime="20180528 16:48:30.462"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.462" starttime="20180528 16:48:30.462"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.462" starttime="20180528 16:48:30.460"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.462" starttime="20180528 16:48:30.460"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
<arg>ensure clear notif be received by NetAct</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.463" starttime="20180528 16:48:30.463"></status>
</kw>
<kw name="Clear NetAct Buffer And Reset NetAct Response" library="Common_FM_Keyword">
<kw name="Get Netact Received Messages" library="NbsLibrary">
<doc>:param timeout: exhausted time</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.463" starttime="20180528 16:48:30.463"></status>
</kw>
<kw name="Reset Netact Response Except Default" library="NbsLibrary">
<doc>Reset all NetAct response settings except default</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.464" starttime="20180528 16:48:30.464"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.464" starttime="20180528 16:48:30.463"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.464" starttime="20180528 16:48:30.460"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EVENTID()}</arg>
</arguments>
<assign>
<var>${oper_id}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.464" starttime="20180528 16:48:30.464"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>NoResourcesException</arg>
</arguments>
<assign>
<var>${fault}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.465" starttime="20180528 16:48:30.465"></status>
</kw>
<kw name="Set Netact Soapfault Response Several Times" library="NbsLibrary">
<doc>:param expr:messge type like @type=transferNotification</doc>
<arguments>
<arg>${G_NE3S_REPORT_OFAS} and operationId=${oper_id}</arg>
<arg>1</arg>
<arg>soapenv:Service.${fault}</arg>
<arg>ne3s:${fault}</arg>
<arg>ne3s:${fault}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.465" starttime="20180528 16:48:30.465"></status>
</kw>
<kw name="Alarm Upload Exception When Unexpected Response From NetAct And BTSMED Retry To Send Ofas Successfully">
<arguments>
<arg>${oper_id}</arg>
<arg>${S_TIME_FAIL_RESPONSE}</arg>
</arguments>
<kw name="BTS Send Alarm Then NetAct Receive Notification" library="Common_FM_Keyword">
<arguments>
<arg>${G_ALARM_NEW}</arg>
<arg>${S_ALARM_DN}</arg>
<arg>${S_ALARM_CONT}</arg>
</arguments>
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
<arg>${cont}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.467" starttime="20180528 16:48:30.467"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.467" starttime="20180528 16:48:30.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.468" starttime="20180528 16:48:30.468"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.468" starttime="20180528 16:48:30.468"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.468" starttime="20180528 16:48:30.466"></status>
</kw>
<kw name="Get Then Validate NetAct Received Alarms" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${cont}</arg>
</arguments>
<kw name="Get NetAct Received Specified Msgs" library="Common_FM_Keyword">
<arguments>
<arg>${G_NE3S_OFAS}</arg>
</arguments>
<assign>
<var>${alarm_netact_list}</var>
</assign>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<assign>
<var>${alarm_list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.469" starttime="20180528 16:48:30.469"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${alarm_list}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${alarm_msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.470" starttime="20180528 16:48:30.470"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.470" starttime="20180528 16:48:30.469"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm_netact_list[0]}</arg>
</arguments>
<assign>
<var>${alarm_netact}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.470" starttime="20180528 16:48:30.470"></status>
</kw>
<kw name="Validate NetAct Received Alarms" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${alarm_netact}</arg>
<arg>${alarm_bts}</arg>
</arguments>
<kw name="Validate FM Notification Content" library="Common_FM_Keyword">
<arguments>
<arg>${alarm_netact}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${alarm['notificationType']}</arg>
<arg>ne3s_fm_alarmEventNotification</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of notificationType is ne3s_fm_alarmEventNotification</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.471" starttime="20180528 16:48:30.471"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${alarm['attachmentProperties']['compression']}</arg>
<arg>none</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of compression is none</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.472" starttime="20180528 16:48:30.471"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.472" starttime="20180528 16:48:30.471"></status>
</kw>
<kw name="Get Ofas Attachment From FM Notification" library="Common_FM_Keyword">
<arguments>
<arg>${alarm_netact}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${ofas}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm['notificationContent']}</arg>
</arguments>
<assign>
<var>${file}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.472" starttime="20180528 16:48:30.472"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm['${file}']}</arg>
</arguments>
<assign>
<var>${attfile_ofas}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.473" starttime="20180528 16:48:30.473"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${attfile_ofas['notification']}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${ofas}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.473" starttime="20180528 16:48:30.473"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.473" starttime="20180528 16:48:30.472"></status>
</kw>
<kw name="Validate Ofas Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${alarm_bts}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${ofas['alarmId']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of alarmId is not empty</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.474" starttime="20180528 16:48:30.474"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>/${ofas['@systemDN']}</arg>
<arg>${bts['alarmingResourceDN']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of @systemDN is ${bts['alarmingResourceDN']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.474" starttime="20180528 16:48:30.474"></status>
</kw>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['eventType']}</arg>
<arg>${bts['eventType']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.475" starttime="20180528 16:48:30.475"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['specificProblem']}</arg>
<arg>${bts['alarmNumber']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of specificProblem is ${bts['alarmNumber']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.475" starttime="20180528 16:48:30.475"></status>
</kw>
<kw name="Validate Ofas Attachment Persev Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>cleared</arg>
<arg>${bts['alarmSeverity']}</arg>
</arguments>
<assign>
<var>${expect}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.476" starttime="20180528 16:48:30.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.477" starttime="20180528 16:48:30.477"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.477" starttime="20180528 16:48:30.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Similar Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.478" starttime="20180528 16:48:30.477"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.478" starttime="20180528 16:48:30.477"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.478" starttime="20180528 16:48:30.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_New}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.478" starttime="20180528 16:48:30.478"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.478" starttime="20180528 16:48:30.478"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CHANGE}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.479" starttime="20180528 16:48:30.479"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.479" starttime="20180528 16:48:30.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Not Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Not Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.480" starttime="20180528 16:48:30.480"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.480" starttime="20180528 16:48:30.479"></status>
</kw>
<kw name="Key In Dictionary" library="common_lib">
<arguments>
<arg>${bts['alarmText']}</arg>
<arg>alarmAdditionalInfo</arg>
</arguments>
<assign>
<var>${has_addtext}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.480" starttime="20180528 16:48:30.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_addtext}</arg>
<arg>Validate Ofas Attachment Addtext1 Content</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Validate Ofas Attachment Addtext1 Content" library="Common_FM_Keyword">
<arguments>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['alarmAdditionalInfo']['shared']}</arg>
</arguments>
<assign>
<var>${shared}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.481" starttime="20180528 16:48:30.481"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['faultDescription']}</arg>
</arguments>
<assign>
<var>${fault_des}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.481" starttime="20180528 16:48:30.481"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fault_des};${shared}</arg>
</arguments>
<assign>
<var>${expect_addtext1}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.482" starttime="20180528 16:48:30.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${shared}'== '${G_SHARE_TPYE}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.482" starttime="20180528 16:48:30.482"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.483" starttime="20180528 16:48:30.483"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.483" starttime="20180528 16:48:30.482"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.483" starttime="20180528 16:48:30.480"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.483" starttime="20180528 16:48:30.480"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.483" starttime="20180528 16:48:30.473"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.483" starttime="20180528 16:48:30.470"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.483" starttime="20180528 16:48:30.468"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.483" starttime="20180528 16:48:30.466"></status>
</kw>
<kw name="NetAct Perform Alarm Upload And Validate Response" library="Common_FM_Keyword">
<arguments>
<arg>${oper_id}</arg>
</arguments>
<kw name="Upload" library="NbsLibrary">
<arguments>
<arg>managerRegistrationId=mgr</arg>
<arg>managerRegistrationKey=ODYzNTQ0NTg0</arg>
<arg>operationId=${id}</arg>
<arg>timeout=${timeout}</arg>
<arg>filter.uploadType=active_faults</arg>
<arg>filter.objects.sdn=PLMN-1/S3SN-4</arg>
<arg>filter.objects.depth=1</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.484" starttime="20180528 16:48:30.484"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp['timeout']}</arg>
<arg>${timeout}</arg>
<arg>msg=NetAct receive the upload response message and verify the value of timeout is ${timeout}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.484" starttime="20180528 16:48:30.484"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.484" starttime="20180528 16:48:30.483"></status>
</kw>
<kw name="Get NetAct Received Specified Msgs" library="Common_FM_Keyword">
<arguments>
<arg>${G_NE3S_REPORT_OFAS} and operationId=${oper_id}</arg>
<arg>2</arg>
<arg>${timeout}</arg>
</arguments>
<assign>
<var>${ofas_res}</var>
</assign>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<assign>
<var>${alarm_list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.485" starttime="20180528 16:48:30.485"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${alarm_list}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${alarm_msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.485" starttime="20180528 16:48:30.485"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.485" starttime="20180528 16:48:30.484"></status>
</kw>
<kw name="Validate Alarm Upload Ofas Result">
<arguments>
<arg>${ofas_res[0]}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_res['attachmentProperties']['compression']}</arg>
<arg>${G_OFAS_COMP}</arg>
<arg>msg=NetAct receive reportoperationstatus contain ofas message and verify the value of compression is ${G_OFAS_COMP}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.486" starttime="20180528 16:48:30.486"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_res['attachmentProperties']['contentType']}</arg>
<arg>${G_OFAS_CONTTYPE}</arg>
<arg>msg=NetAct receive reportoperationstatus contain ofas message and verify the value of contentType is ${G_OFAS_CONTTYPE}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.486" starttime="20180528 16:48:30.486"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_res['pageSequenceNumber']}</arg>
<arg>1</arg>
<arg>msg=NetAct receive reportoperationstatus contain ofas message and verify the value of pageSequenceNumber is 1</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.487" starttime="20180528 16:48:30.487"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${ofas_res['operationStatusContent']}</arg>
</arguments>
<assign>
<var>${cid}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.487" starttime="20180528 16:48:30.487"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${ofas_res['${cid}']['alarmSynchronisation']}</arg>
<arg>${G_ALARM_NEW}</arg>
</arguments>
<assign>
<var>${ofas_cont}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.487" starttime="20180528 16:48:30.487"></status>
</kw>
<kw name="Validate Ofas Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${G_ALARM_NEW}</arg>
<arg>${ofas_cont}</arg>
<arg>${S_ALARM_CONT}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${ofas['alarmId']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of alarmId is not empty</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.488" starttime="20180528 16:48:30.488"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>/${ofas['@systemDN']}</arg>
<arg>${bts['alarmingResourceDN']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of @systemDN is ${bts['alarmingResourceDN']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.488" starttime="20180528 16:48:30.488"></status>
</kw>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['eventType']}</arg>
<arg>${bts['eventType']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.489" starttime="20180528 16:48:30.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['specificProblem']}</arg>
<arg>${bts['alarmNumber']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of specificProblem is ${bts['alarmNumber']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.489" starttime="20180528 16:48:30.489"></status>
</kw>
<kw name="Validate Ofas Attachment Persev Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>cleared</arg>
<arg>${bts['alarmSeverity']}</arg>
</arguments>
<assign>
<var>${expect}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.490" starttime="20180528 16:48:30.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.490" starttime="20180528 16:48:30.490"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.491" starttime="20180528 16:48:30.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Similar Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.491" starttime="20180528 16:48:30.491"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.491" starttime="20180528 16:48:30.491"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.491" starttime="20180528 16:48:30.489"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_New}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.492" starttime="20180528 16:48:30.492"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.492" starttime="20180528 16:48:30.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CHANGE}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.493" starttime="20180528 16:48:30.492"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.493" starttime="20180528 16:48:30.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Not Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Not Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.493" starttime="20180528 16:48:30.493"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.493" starttime="20180528 16:48:30.493"></status>
</kw>
<kw name="Key In Dictionary" library="common_lib">
<arguments>
<arg>${bts['alarmText']}</arg>
<arg>alarmAdditionalInfo</arg>
</arguments>
<assign>
<var>${has_addtext}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.494" starttime="20180528 16:48:30.494"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_addtext}</arg>
<arg>Validate Ofas Attachment Addtext1 Content</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Validate Ofas Attachment Addtext1 Content" library="Common_FM_Keyword">
<arguments>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['alarmAdditionalInfo']['shared']}</arg>
</arguments>
<assign>
<var>${shared}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.495" starttime="20180528 16:48:30.495"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['faultDescription']}</arg>
</arguments>
<assign>
<var>${fault_des}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.495" starttime="20180528 16:48:30.495"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fault_des};${shared}</arg>
</arguments>
<assign>
<var>${expect_addtext1}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.495" starttime="20180528 16:48:30.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${shared}'== '${G_SHARE_TPYE}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.496" starttime="20180528 16:48:30.496"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.496" starttime="20180528 16:48:30.496"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.496" starttime="20180528 16:48:30.495"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.496" starttime="20180528 16:48:30.494"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.496" starttime="20180528 16:48:30.494"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.496" starttime="20180528 16:48:30.488"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.497" starttime="20180528 16:48:30.485"></status>
</kw>
<kw name="Validate Alarm Upload Ofas Result">
<arguments>
<arg>${ofas_res[1]}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_res['attachmentProperties']['compression']}</arg>
<arg>${G_OFAS_COMP}</arg>
<arg>msg=NetAct receive reportoperationstatus contain ofas message and verify the value of compression is ${G_OFAS_COMP}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.497" starttime="20180528 16:48:30.497"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_res['attachmentProperties']['contentType']}</arg>
<arg>${G_OFAS_CONTTYPE}</arg>
<arg>msg=NetAct receive reportoperationstatus contain ofas message and verify the value of contentType is ${G_OFAS_CONTTYPE}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.497" starttime="20180528 16:48:30.497"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_res['pageSequenceNumber']}</arg>
<arg>1</arg>
<arg>msg=NetAct receive reportoperationstatus contain ofas message and verify the value of pageSequenceNumber is 1</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.498" starttime="20180528 16:48:30.498"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${ofas_res['operationStatusContent']}</arg>
</arguments>
<assign>
<var>${cid}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.498" starttime="20180528 16:48:30.498"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${ofas_res['${cid}']['alarmSynchronisation']}</arg>
<arg>${G_ALARM_NEW}</arg>
</arguments>
<assign>
<var>${ofas_cont}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.498" starttime="20180528 16:48:30.498"></status>
</kw>
<kw name="Validate Ofas Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${G_ALARM_NEW}</arg>
<arg>${ofas_cont}</arg>
<arg>${S_ALARM_CONT}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${ofas['alarmId']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of alarmId is not empty</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.499" starttime="20180528 16:48:30.499"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>/${ofas['@systemDN']}</arg>
<arg>${bts['alarmingResourceDN']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of @systemDN is ${bts['alarmingResourceDN']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.500" starttime="20180528 16:48:30.499"></status>
</kw>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['eventType']}</arg>
<arg>${bts['eventType']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.500" starttime="20180528 16:48:30.500"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['specificProblem']}</arg>
<arg>${bts['alarmNumber']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of specificProblem is ${bts['alarmNumber']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.500" starttime="20180528 16:48:30.500"></status>
</kw>
<kw name="Validate Ofas Attachment Persev Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>cleared</arg>
<arg>${bts['alarmSeverity']}</arg>
</arguments>
<assign>
<var>${expect}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.501" starttime="20180528 16:48:30.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.502" starttime="20180528 16:48:30.502"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.502" starttime="20180528 16:48:30.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Similar Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.503" starttime="20180528 16:48:30.503"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.503" starttime="20180528 16:48:30.502"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.503" starttime="20180528 16:48:30.500"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_New}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.503" starttime="20180528 16:48:30.503"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.503" starttime="20180528 16:48:30.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CHANGE}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.504" starttime="20180528 16:48:30.504"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.504" starttime="20180528 16:48:30.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Not Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Not Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.505" starttime="20180528 16:48:30.505"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.505" starttime="20180528 16:48:30.504"></status>
</kw>
<kw name="Key In Dictionary" library="common_lib">
<arguments>
<arg>${bts['alarmText']}</arg>
<arg>alarmAdditionalInfo</arg>
</arguments>
<assign>
<var>${has_addtext}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.505" starttime="20180528 16:48:30.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_addtext}</arg>
<arg>Validate Ofas Attachment Addtext1 Content</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Validate Ofas Attachment Addtext1 Content" library="Common_FM_Keyword">
<arguments>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['alarmAdditionalInfo']['shared']}</arg>
</arguments>
<assign>
<var>${shared}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.506" starttime="20180528 16:48:30.506"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['faultDescription']}</arg>
</arguments>
<assign>
<var>${fault_des}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.506" starttime="20180528 16:48:30.506"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fault_des};${shared}</arg>
</arguments>
<assign>
<var>${expect_addtext1}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.507" starttime="20180528 16:48:30.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${shared}'== '${G_SHARE_TPYE}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.507" starttime="20180528 16:48:30.507"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.508" starttime="20180528 16:48:30.508"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.508" starttime="20180528 16:48:30.507"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.508" starttime="20180528 16:48:30.506"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.508" starttime="20180528 16:48:30.505"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.508" starttime="20180528 16:48:30.499"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.508" starttime="20180528 16:48:30.497"></status>
</kw>
<kw name="Get NetAct Received Specified Msgs" library="Common_FM_Keyword">
<arguments>
<arg>${G_NE3S_REPORT_FB}</arg>
</arguments>
<assign>
<var>${fb_res}</var>
</assign>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<assign>
<var>${alarm_list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.509" starttime="20180528 16:48:30.509"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${alarm_list}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${alarm_msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.509" starttime="20180528 16:48:30.509"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.509" starttime="20180528 16:48:30.508"></status>
</kw>
<kw name="Validate Alarm Upload Feedback Result" library="Common_FM_Keyword">
<arguments>
<arg>${fb_res[0]}</arg>
<arg>2</arg>
<arg>ok</arg>
<arg>1</arg>
<arg>0</arg>
<arg>${S_UPLOAD_FEEDBACK_OK}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb_res['attachmentProperties']['compression']}</arg>
<arg>${G_OFAS_COMP}</arg>
<arg>msg=NetAct receive reportoperationstatus contain feedback message and verify the value of compression is ${G_OFAS_COMP}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.510" starttime="20180528 16:48:30.510"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb_res['attachmentProperties']['contentType']}</arg>
<arg>${G_FB_CONTTYPE}</arg>
<arg>msg=NetAct receive reportoperationstatus contain feedback message and verify the value of contentType is ${G_FB_CONTTYPE}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.510" starttime="20180528 16:48:30.510"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb_res['pageSequenceNumber']}</arg>
<arg>${seq}</arg>
<arg>msg=NetAct receive reportoperationstatus contain feedback message and verify the value of pageSequenceNumber is ${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.511" starttime="20180528 16:48:30.511"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fb_res['operationStatusContent']}</arg>
</arguments>
<assign>
<var>${cid}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.511" starttime="20180528 16:48:30.511"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${fb_res['${cid}']}</arg>
<arg>NE3SFeedback</arg>
</arguments>
<assign>
<var>${fb_cont}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.511" starttime="20180528 16:48:30.511"></status>
</kw>
<kw name="Validate Operation Feedback Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${fb_cont}</arg>
<arg>${status}</arg>
<arg>${succ}</arg>
<arg>${unsucc}</arg>
<arg>${msg}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb['@status']}</arg>
<arg>${status}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of @status is ${status}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.512" starttime="20180528 16:48:30.512"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb['@successful']}</arg>
<arg>${succ}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of @successful is ${succ}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.512" starttime="20180528 16:48:30.512"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb['@unsuccessful']}</arg>
<arg>${unsucc}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of @unsuccessful is ${unsucc}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.513" starttime="20180528 16:48:30.513"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${fb['message_result']}</arg>
<arg>${msg_add}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of message_result contain ${msg_add}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.513" starttime="20180528 16:48:30.513"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.513" starttime="20180528 16:48:30.512"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.513" starttime="20180528 16:48:30.509"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.513" starttime="20180528 16:48:30.465"></status>
</kw>
<kw type="teardown" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Clear BTS Alarm</arg>
</arguments>
<kw name="Clear BTS Alarm">
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.515" starttime="20180528 16:48:30.515"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.515" starttime="20180528 16:48:30.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.516" starttime="20180528 16:48:30.516"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.516" starttime="20180528 16:48:30.516"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.516" starttime="20180528 16:48:30.514"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.516" starttime="20180528 16:48:30.514"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.516" starttime="20180528 16:48:30.514"></status>
</kw>
<tags>
<tag>acc-LTE3435-A-c.1.10</tag>
<tag>feature-LTE3435-A-c</tag>
<tag>owner-jason.w.ye</tag>
<tag>release-SRAN17</tag>
<tag>status-done</tag>
<tag>team-SISOET</tag>
<tag>type-exception</tag>
</tags>
<status status="PASS" endtime="20180528 16:48:30.516" critical="yes" starttime="20180528 16:48:30.459"></status>
</test>
<test id="s1-s1-t4" name="Alarm Upload Exception when BTSMED Receive Soapfault Response from NetAct and Retry Failed">
<kw type="setup" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Clear BTS Alarm</arg>
<arg>AND</arg>
<arg>Sleep</arg>
<arg>1</arg>
<arg>ensure clear notif be received by NetAct</arg>
<arg>AND</arg>
<arg>Clear NetAct Buffer And Reset NetAct Response</arg>
</arguments>
<kw name="Clear BTS Alarm">
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.519" starttime="20180528 16:48:30.519"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.519" starttime="20180528 16:48:30.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.520" starttime="20180528 16:48:30.520"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.520" starttime="20180528 16:48:30.519"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.520" starttime="20180528 16:48:30.518"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.520" starttime="20180528 16:48:30.518"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
<arg>ensure clear notif be received by NetAct</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.520" starttime="20180528 16:48:30.520"></status>
</kw>
<kw name="Clear NetAct Buffer And Reset NetAct Response" library="Common_FM_Keyword">
<kw name="Get Netact Received Messages" library="NbsLibrary">
<doc>:param timeout: exhausted time</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.521" starttime="20180528 16:48:30.521"></status>
</kw>
<kw name="Reset Netact Response Except Default" library="NbsLibrary">
<doc>Reset all NetAct response settings except default</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.521" starttime="20180528 16:48:30.521"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.521" starttime="20180528 16:48:30.520"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.521" starttime="20180528 16:48:30.517"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EVENTID()}</arg>
</arguments>
<assign>
<var>${oper_id}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.522" starttime="20180528 16:48:30.522"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>NoResourcesException</arg>
</arguments>
<assign>
<var>${fault}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.522" starttime="20180528 16:48:30.522"></status>
</kw>
<kw name="Set Netact Soapfault Response For Specified Msgs" library="NbsLibrary">
<doc>set the NetAct soapfault  response for specific messages type</doc>
<arguments>
<arg>${G_NE3S_REPORT_OFAS} and operationId=${oper_id}</arg>
<arg>soapenv:Service.${fault}</arg>
<arg>ne3s:${fault}</arg>
<arg>ne3s:${fault}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.523" starttime="20180528 16:48:30.523"></status>
</kw>
<kw name="BTS Send Alarm Then NetAct Receive Notification" library="Common_FM_Keyword">
<arguments>
<arg>${G_ALARM_NEW}</arg>
<arg>${S_ALARM_DN}</arg>
<arg>${S_ALARM_CONT}</arg>
</arguments>
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
<arg>${cont}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.525" starttime="20180528 16:48:30.525"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.525" starttime="20180528 16:48:30.524"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.525" starttime="20180528 16:48:30.525"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.525" starttime="20180528 16:48:30.525"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.526" starttime="20180528 16:48:30.523"></status>
</kw>
<kw name="Get Then Validate NetAct Received Alarms" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${cont}</arg>
</arguments>
<kw name="Get NetAct Received Specified Msgs" library="Common_FM_Keyword">
<arguments>
<arg>${G_NE3S_OFAS}</arg>
</arguments>
<assign>
<var>${alarm_netact_list}</var>
</assign>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<assign>
<var>${alarm_list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.527" starttime="20180528 16:48:30.527"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${alarm_list}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${alarm_msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.527" starttime="20180528 16:48:30.527"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.527" starttime="20180528 16:48:30.527"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm_netact_list[0]}</arg>
</arguments>
<assign>
<var>${alarm_netact}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.528" starttime="20180528 16:48:30.528"></status>
</kw>
<kw name="Validate NetAct Received Alarms" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${alarm_netact}</arg>
<arg>${alarm_bts}</arg>
</arguments>
<kw name="Validate FM Notification Content" library="Common_FM_Keyword">
<arguments>
<arg>${alarm_netact}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${alarm['notificationType']}</arg>
<arg>ne3s_fm_alarmEventNotification</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of notificationType is ne3s_fm_alarmEventNotification</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.529" starttime="20180528 16:48:30.529"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${alarm['attachmentProperties']['compression']}</arg>
<arg>none</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of compression is none</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.529" starttime="20180528 16:48:30.529"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.529" starttime="20180528 16:48:30.528"></status>
</kw>
<kw name="Get Ofas Attachment From FM Notification" library="Common_FM_Keyword">
<arguments>
<arg>${alarm_netact}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${ofas}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm['notificationContent']}</arg>
</arguments>
<assign>
<var>${file}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.530" starttime="20180528 16:48:30.530"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm['${file}']}</arg>
</arguments>
<assign>
<var>${attfile_ofas}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.530" starttime="20180528 16:48:30.530"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${attfile_ofas['notification']}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${ofas}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.531" starttime="20180528 16:48:30.531"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.531" starttime="20180528 16:48:30.530"></status>
</kw>
<kw name="Validate Ofas Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${alarm_bts}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${ofas['alarmId']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of alarmId is not empty</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.531" starttime="20180528 16:48:30.531"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>/${ofas['@systemDN']}</arg>
<arg>${bts['alarmingResourceDN']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of @systemDN is ${bts['alarmingResourceDN']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.532" starttime="20180528 16:48:30.532"></status>
</kw>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['eventType']}</arg>
<arg>${bts['eventType']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.532" starttime="20180528 16:48:30.532"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['specificProblem']}</arg>
<arg>${bts['alarmNumber']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of specificProblem is ${bts['alarmNumber']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.532" starttime="20180528 16:48:30.532"></status>
</kw>
<kw name="Validate Ofas Attachment Persev Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>cleared</arg>
<arg>${bts['alarmSeverity']}</arg>
</arguments>
<assign>
<var>${expect}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.533" starttime="20180528 16:48:30.533"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.534" starttime="20180528 16:48:30.534"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.534" starttime="20180528 16:48:30.533"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Similar Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.535" starttime="20180528 16:48:30.534"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.535" starttime="20180528 16:48:30.534"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.535" starttime="20180528 16:48:30.533"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_New}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.535" starttime="20180528 16:48:30.535"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.535" starttime="20180528 16:48:30.535"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CHANGE}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.536" starttime="20180528 16:48:30.536"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.536" starttime="20180528 16:48:30.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Not Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Not Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.537" starttime="20180528 16:48:30.537"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.537" starttime="20180528 16:48:30.536"></status>
</kw>
<kw name="Key In Dictionary" library="common_lib">
<arguments>
<arg>${bts['alarmText']}</arg>
<arg>alarmAdditionalInfo</arg>
</arguments>
<assign>
<var>${has_addtext}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.537" starttime="20180528 16:48:30.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_addtext}</arg>
<arg>Validate Ofas Attachment Addtext1 Content</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Validate Ofas Attachment Addtext1 Content" library="Common_FM_Keyword">
<arguments>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['alarmAdditionalInfo']['shared']}</arg>
</arguments>
<assign>
<var>${shared}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.538" starttime="20180528 16:48:30.538"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['faultDescription']}</arg>
</arguments>
<assign>
<var>${fault_des}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.538" starttime="20180528 16:48:30.538"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fault_des};${shared}</arg>
</arguments>
<assign>
<var>${expect_addtext1}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.539" starttime="20180528 16:48:30.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${shared}'== '${G_SHARE_TPYE}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.539" starttime="20180528 16:48:30.539"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.540" starttime="20180528 16:48:30.540"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.540" starttime="20180528 16:48:30.539"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.540" starttime="20180528 16:48:30.537"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.540" starttime="20180528 16:48:30.537"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.540" starttime="20180528 16:48:30.531"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.540" starttime="20180528 16:48:30.528"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.540" starttime="20180528 16:48:30.526"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.540" starttime="20180528 16:48:30.523"></status>
</kw>
<kw name="NetAct Perform Alarm Upload And Validate Response" library="Common_FM_Keyword">
<arguments>
<arg>${oper_id}</arg>
</arguments>
<kw name="Upload" library="NbsLibrary">
<arguments>
<arg>managerRegistrationId=mgr</arg>
<arg>managerRegistrationKey=ODYzNTQ0NTg0</arg>
<arg>operationId=${id}</arg>
<arg>timeout=${timeout}</arg>
<arg>filter.uploadType=active_faults</arg>
<arg>filter.objects.sdn=PLMN-1/S3SN-4</arg>
<arg>filter.objects.depth=1</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.541" starttime="20180528 16:48:30.541"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp['timeout']}</arg>
<arg>${timeout}</arg>
<arg>msg=NetAct receive the upload response message and verify the value of timeout is ${timeout}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.541" starttime="20180528 16:48:30.541"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.541" starttime="20180528 16:48:30.540"></status>
</kw>
<kw type="teardown" name="Recovery Env">
<arguments>
<arg>${S_TIME_FAIL_RESPONSE}</arg>
</arguments>
<kw name="Recovery Exception Response And Retry Failed Env">
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<kw name="Reset Netact Response Except Default" library="NbsLibrary">
<doc>Reset all NetAct response settings except default</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.543" starttime="20180528 16:48:30.543"></status>
</kw>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.543" starttime="20180528 16:48:30.543"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.543" starttime="20180528 16:48:30.542"></status>
</kw>
<kw name="Clear BTS Alarm">
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.544" starttime="20180528 16:48:30.544"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.544" starttime="20180528 16:48:30.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.545" starttime="20180528 16:48:30.545"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.545" starttime="20180528 16:48:30.545"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.545" starttime="20180528 16:48:30.543"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.545" starttime="20180528 16:48:30.543"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.545" starttime="20180528 16:48:30.542"></status>
</kw>
<tags>
<tag>acc-LTE3435-A-c.1.7</tag>
<tag>feature-LTE3435-A-c</tag>
<tag>owner-jason.w.ye</tag>
<tag>release-SRAN17</tag>
<tag>status-debug</tag>
<tag>team-SISOET</tag>
<tag>type-exception</tag>
</tags>
<status status="PASS" endtime="20180528 16:48:30.545" critical="yes" starttime="20180528 16:48:30.517"></status>
</test>
<test id="s1-s1-t5" name="Alarm Upload Exception when BTSMED not Receive Ofas Result and Retry Succeed">
<kw type="setup" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Clear BTS Alarm</arg>
<arg>AND</arg>
<arg>Sleep</arg>
<arg>1</arg>
<arg>ensure clear notif be received by NetAct</arg>
<arg>AND</arg>
<arg>Clear NetAct Buffer And Reset NetAct Response</arg>
</arguments>
<kw name="Clear BTS Alarm">
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.548" starttime="20180528 16:48:30.548"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.548" starttime="20180528 16:48:30.548"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.549" starttime="20180528 16:48:30.549"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.549" starttime="20180528 16:48:30.549"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.549" starttime="20180528 16:48:30.547"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.549" starttime="20180528 16:48:30.547"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
<arg>ensure clear notif be received by NetAct</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.550" starttime="20180528 16:48:30.549"></status>
</kw>
<kw name="Clear NetAct Buffer And Reset NetAct Response" library="Common_FM_Keyword">
<kw name="Get Netact Received Messages" library="NbsLibrary">
<doc>:param timeout: exhausted time</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.550" starttime="20180528 16:48:30.550"></status>
</kw>
<kw name="Reset Netact Response Except Default" library="NbsLibrary">
<doc>Reset all NetAct response settings except default</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.551" starttime="20180528 16:48:30.550"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.551" starttime="20180528 16:48:30.550"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.551" starttime="20180528 16:48:30.546"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EVENTID()}</arg>
</arguments>
<assign>
<var>${oper_id}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.551" starttime="20180528 16:48:30.551"></status>
</kw>
<kw name="Set Netact None Response Several Times" library="NbsLibrary">
<doc>:param expr:messge type like @type=transferNotification</doc>
<arguments>
<arg>${G_NE3S_REPORT_OFAS} and operationId=${oper_id}</arg>
<arg>1</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.552" starttime="20180528 16:48:30.551"></status>
</kw>
<kw name="Alarm Upload Exception When Unexpected Response From NetAct And BTSMED Retry To Send Ofas Successfully">
<arguments>
<arg>${oper_id}</arg>
<arg>${S_TIME_NO_RESPONSE}</arg>
</arguments>
<kw name="BTS Send Alarm Then NetAct Receive Notification" library="Common_FM_Keyword">
<arguments>
<arg>${G_ALARM_NEW}</arg>
<arg>${S_ALARM_DN}</arg>
<arg>${S_ALARM_CONT}</arg>
</arguments>
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
<arg>${cont}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.554" starttime="20180528 16:48:30.553"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.554" starttime="20180528 16:48:30.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.554" starttime="20180528 16:48:30.554"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.554" starttime="20180528 16:48:30.554"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.554" starttime="20180528 16:48:30.553"></status>
</kw>
<kw name="Get Then Validate NetAct Received Alarms" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${cont}</arg>
</arguments>
<kw name="Get NetAct Received Specified Msgs" library="Common_FM_Keyword">
<arguments>
<arg>${G_NE3S_OFAS}</arg>
</arguments>
<assign>
<var>${alarm_netact_list}</var>
</assign>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<assign>
<var>${alarm_list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.555" starttime="20180528 16:48:30.555"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${alarm_list}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${alarm_msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.556" starttime="20180528 16:48:30.556"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.556" starttime="20180528 16:48:30.555"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm_netact_list[0]}</arg>
</arguments>
<assign>
<var>${alarm_netact}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.556" starttime="20180528 16:48:30.556"></status>
</kw>
<kw name="Validate NetAct Received Alarms" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${alarm_netact}</arg>
<arg>${alarm_bts}</arg>
</arguments>
<kw name="Validate FM Notification Content" library="Common_FM_Keyword">
<arguments>
<arg>${alarm_netact}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${alarm['notificationType']}</arg>
<arg>ne3s_fm_alarmEventNotification</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of notificationType is ne3s_fm_alarmEventNotification</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.557" starttime="20180528 16:48:30.557"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${alarm['attachmentProperties']['compression']}</arg>
<arg>none</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of compression is none</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.558" starttime="20180528 16:48:30.558"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.558" starttime="20180528 16:48:30.557"></status>
</kw>
<kw name="Get Ofas Attachment From FM Notification" library="Common_FM_Keyword">
<arguments>
<arg>${alarm_netact}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${ofas}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm['notificationContent']}</arg>
</arguments>
<assign>
<var>${file}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.559" starttime="20180528 16:48:30.558"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm['${file}']}</arg>
</arguments>
<assign>
<var>${attfile_ofas}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.559" starttime="20180528 16:48:30.559"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${attfile_ofas['notification']}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${ofas}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.559" starttime="20180528 16:48:30.559"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.559" starttime="20180528 16:48:30.558"></status>
</kw>
<kw name="Validate Ofas Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${alarm_bts}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${ofas['alarmId']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of alarmId is not empty</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.560" starttime="20180528 16:48:30.560"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>/${ofas['@systemDN']}</arg>
<arg>${bts['alarmingResourceDN']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of @systemDN is ${bts['alarmingResourceDN']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.560" starttime="20180528 16:48:30.560"></status>
</kw>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['eventType']}</arg>
<arg>${bts['eventType']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.561" starttime="20180528 16:48:30.560"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['specificProblem']}</arg>
<arg>${bts['alarmNumber']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of specificProblem is ${bts['alarmNumber']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.561" starttime="20180528 16:48:30.561"></status>
</kw>
<kw name="Validate Ofas Attachment Persev Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>cleared</arg>
<arg>${bts['alarmSeverity']}</arg>
</arguments>
<assign>
<var>${expect}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.562" starttime="20180528 16:48:30.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.562" starttime="20180528 16:48:30.562"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.562" starttime="20180528 16:48:30.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Similar Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.563" starttime="20180528 16:48:30.563"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.563" starttime="20180528 16:48:30.563"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.563" starttime="20180528 16:48:30.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_New}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.564" starttime="20180528 16:48:30.564"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.564" starttime="20180528 16:48:30.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CHANGE}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.565" starttime="20180528 16:48:30.564"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.565" starttime="20180528 16:48:30.564"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Not Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Not Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.565" starttime="20180528 16:48:30.565"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.565" starttime="20180528 16:48:30.565"></status>
</kw>
<kw name="Key In Dictionary" library="common_lib">
<arguments>
<arg>${bts['alarmText']}</arg>
<arg>alarmAdditionalInfo</arg>
</arguments>
<assign>
<var>${has_addtext}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.566" starttime="20180528 16:48:30.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_addtext}</arg>
<arg>Validate Ofas Attachment Addtext1 Content</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Validate Ofas Attachment Addtext1 Content" library="Common_FM_Keyword">
<arguments>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['alarmAdditionalInfo']['shared']}</arg>
</arguments>
<assign>
<var>${shared}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.568" starttime="20180528 16:48:30.567"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['faultDescription']}</arg>
</arguments>
<assign>
<var>${fault_des}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.568" starttime="20180528 16:48:30.568"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fault_des};${shared}</arg>
</arguments>
<assign>
<var>${expect_addtext1}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.568" starttime="20180528 16:48:30.568"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${shared}'== '${G_SHARE_TPYE}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.569" starttime="20180528 16:48:30.569"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.569" starttime="20180528 16:48:30.569"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.570" starttime="20180528 16:48:30.569"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.570" starttime="20180528 16:48:30.566"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.570" starttime="20180528 16:48:30.566"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.570" starttime="20180528 16:48:30.559"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.570" starttime="20180528 16:48:30.556"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.570" starttime="20180528 16:48:30.554"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.570" starttime="20180528 16:48:30.552"></status>
</kw>
<kw name="NetAct Perform Alarm Upload And Validate Response" library="Common_FM_Keyword">
<arguments>
<arg>${oper_id}</arg>
</arguments>
<kw name="Upload" library="NbsLibrary">
<arguments>
<arg>managerRegistrationId=mgr</arg>
<arg>managerRegistrationKey=ODYzNTQ0NTg0</arg>
<arg>operationId=${id}</arg>
<arg>timeout=${timeout}</arg>
<arg>filter.uploadType=active_faults</arg>
<arg>filter.objects.sdn=PLMN-1/S3SN-4</arg>
<arg>filter.objects.depth=1</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.571" starttime="20180528 16:48:30.570"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp['timeout']}</arg>
<arg>${timeout}</arg>
<arg>msg=NetAct receive the upload response message and verify the value of timeout is ${timeout}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.571" starttime="20180528 16:48:30.571"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.571" starttime="20180528 16:48:30.570"></status>
</kw>
<kw name="Get NetAct Received Specified Msgs" library="Common_FM_Keyword">
<arguments>
<arg>${G_NE3S_REPORT_OFAS} and operationId=${oper_id}</arg>
<arg>2</arg>
<arg>${timeout}</arg>
</arguments>
<assign>
<var>${ofas_res}</var>
</assign>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<assign>
<var>${alarm_list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.572" starttime="20180528 16:48:30.572"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${alarm_list}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${alarm_msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.572" starttime="20180528 16:48:30.572"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.572" starttime="20180528 16:48:30.571"></status>
</kw>
<kw name="Validate Alarm Upload Ofas Result">
<arguments>
<arg>${ofas_res[0]}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_res['attachmentProperties']['compression']}</arg>
<arg>${G_OFAS_COMP}</arg>
<arg>msg=NetAct receive reportoperationstatus contain ofas message and verify the value of compression is ${G_OFAS_COMP}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.573" starttime="20180528 16:48:30.573"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_res['attachmentProperties']['contentType']}</arg>
<arg>${G_OFAS_CONTTYPE}</arg>
<arg>msg=NetAct receive reportoperationstatus contain ofas message and verify the value of contentType is ${G_OFAS_CONTTYPE}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.573" starttime="20180528 16:48:30.573"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_res['pageSequenceNumber']}</arg>
<arg>1</arg>
<arg>msg=NetAct receive reportoperationstatus contain ofas message and verify the value of pageSequenceNumber is 1</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.573" starttime="20180528 16:48:30.573"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${ofas_res['operationStatusContent']}</arg>
</arguments>
<assign>
<var>${cid}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.574" starttime="20180528 16:48:30.574"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${ofas_res['${cid}']['alarmSynchronisation']}</arg>
<arg>${G_ALARM_NEW}</arg>
</arguments>
<assign>
<var>${ofas_cont}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.574" starttime="20180528 16:48:30.574"></status>
</kw>
<kw name="Validate Ofas Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${G_ALARM_NEW}</arg>
<arg>${ofas_cont}</arg>
<arg>${S_ALARM_CONT}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${ofas['alarmId']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of alarmId is not empty</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.575" starttime="20180528 16:48:30.575"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>/${ofas['@systemDN']}</arg>
<arg>${bts['alarmingResourceDN']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of @systemDN is ${bts['alarmingResourceDN']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.575" starttime="20180528 16:48:30.575"></status>
</kw>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['eventType']}</arg>
<arg>${bts['eventType']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.575" starttime="20180528 16:48:30.575"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['specificProblem']}</arg>
<arg>${bts['alarmNumber']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of specificProblem is ${bts['alarmNumber']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.576" starttime="20180528 16:48:30.576"></status>
</kw>
<kw name="Validate Ofas Attachment Persev Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>cleared</arg>
<arg>${bts['alarmSeverity']}</arg>
</arguments>
<assign>
<var>${expect}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.576" starttime="20180528 16:48:30.576"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.577" starttime="20180528 16:48:30.577"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.577" starttime="20180528 16:48:30.577"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Similar Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.578" starttime="20180528 16:48:30.578"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.578" starttime="20180528 16:48:30.577"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.578" starttime="20180528 16:48:30.576"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_New}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.579" starttime="20180528 16:48:30.579"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.579" starttime="20180528 16:48:30.578"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CHANGE}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.579" starttime="20180528 16:48:30.579"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.579" starttime="20180528 16:48:30.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Not Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Not Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.580" starttime="20180528 16:48:30.580"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.580" starttime="20180528 16:48:30.580"></status>
</kw>
<kw name="Key In Dictionary" library="common_lib">
<arguments>
<arg>${bts['alarmText']}</arg>
<arg>alarmAdditionalInfo</arg>
</arguments>
<assign>
<var>${has_addtext}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.580" starttime="20180528 16:48:30.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_addtext}</arg>
<arg>Validate Ofas Attachment Addtext1 Content</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Validate Ofas Attachment Addtext1 Content" library="Common_FM_Keyword">
<arguments>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['alarmAdditionalInfo']['shared']}</arg>
</arguments>
<assign>
<var>${shared}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.581" starttime="20180528 16:48:30.581"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['faultDescription']}</arg>
</arguments>
<assign>
<var>${fault_des}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.582" starttime="20180528 16:48:30.582"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fault_des};${shared}</arg>
</arguments>
<assign>
<var>${expect_addtext1}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.582" starttime="20180528 16:48:30.582"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${shared}'== '${G_SHARE_TPYE}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.583" starttime="20180528 16:48:30.583"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.583" starttime="20180528 16:48:30.583"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.583" starttime="20180528 16:48:30.582"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.583" starttime="20180528 16:48:30.581"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.583" starttime="20180528 16:48:30.581"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.583" starttime="20180528 16:48:30.574"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.583" starttime="20180528 16:48:30.572"></status>
</kw>
<kw name="Validate Alarm Upload Ofas Result">
<arguments>
<arg>${ofas_res[1]}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_res['attachmentProperties']['compression']}</arg>
<arg>${G_OFAS_COMP}</arg>
<arg>msg=NetAct receive reportoperationstatus contain ofas message and verify the value of compression is ${G_OFAS_COMP}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.584" starttime="20180528 16:48:30.584"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_res['attachmentProperties']['contentType']}</arg>
<arg>${G_OFAS_CONTTYPE}</arg>
<arg>msg=NetAct receive reportoperationstatus contain ofas message and verify the value of contentType is ${G_OFAS_CONTTYPE}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.584" starttime="20180528 16:48:30.584"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_res['pageSequenceNumber']}</arg>
<arg>1</arg>
<arg>msg=NetAct receive reportoperationstatus contain ofas message and verify the value of pageSequenceNumber is 1</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.585" starttime="20180528 16:48:30.584"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${ofas_res['operationStatusContent']}</arg>
</arguments>
<assign>
<var>${cid}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.585" starttime="20180528 16:48:30.585"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${ofas_res['${cid}']['alarmSynchronisation']}</arg>
<arg>${G_ALARM_NEW}</arg>
</arguments>
<assign>
<var>${ofas_cont}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.585" starttime="20180528 16:48:30.585"></status>
</kw>
<kw name="Validate Ofas Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${G_ALARM_NEW}</arg>
<arg>${ofas_cont}</arg>
<arg>${S_ALARM_CONT}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${ofas['alarmId']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of alarmId is not empty</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.586" starttime="20180528 16:48:30.586"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>/${ofas['@systemDN']}</arg>
<arg>${bts['alarmingResourceDN']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of @systemDN is ${bts['alarmingResourceDN']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.586" starttime="20180528 16:48:30.586"></status>
</kw>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['eventType']}</arg>
<arg>${bts['eventType']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.587" starttime="20180528 16:48:30.587"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['specificProblem']}</arg>
<arg>${bts['alarmNumber']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of specificProblem is ${bts['alarmNumber']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.587" starttime="20180528 16:48:30.587"></status>
</kw>
<kw name="Validate Ofas Attachment Persev Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>cleared</arg>
<arg>${bts['alarmSeverity']}</arg>
</arguments>
<assign>
<var>${expect}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.588" starttime="20180528 16:48:30.588"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.588" starttime="20180528 16:48:30.588"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.588" starttime="20180528 16:48:30.588"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Similar Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.589" starttime="20180528 16:48:30.589"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.589" starttime="20180528 16:48:30.589"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.589" starttime="20180528 16:48:30.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_New}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.590" starttime="20180528 16:48:30.590"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.590" starttime="20180528 16:48:30.589"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CHANGE}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.590" starttime="20180528 16:48:30.590"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.591" starttime="20180528 16:48:30.590"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Not Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Not Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.591" starttime="20180528 16:48:30.591"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.591" starttime="20180528 16:48:30.591"></status>
</kw>
<kw name="Key In Dictionary" library="common_lib">
<arguments>
<arg>${bts['alarmText']}</arg>
<arg>alarmAdditionalInfo</arg>
</arguments>
<assign>
<var>${has_addtext}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.592" starttime="20180528 16:48:30.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_addtext}</arg>
<arg>Validate Ofas Attachment Addtext1 Content</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Validate Ofas Attachment Addtext1 Content" library="Common_FM_Keyword">
<arguments>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['alarmAdditionalInfo']['shared']}</arg>
</arguments>
<assign>
<var>${shared}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.593" starttime="20180528 16:48:30.593"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['faultDescription']}</arg>
</arguments>
<assign>
<var>${fault_des}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.593" starttime="20180528 16:48:30.593"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fault_des};${shared}</arg>
</arguments>
<assign>
<var>${expect_addtext1}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.593" starttime="20180528 16:48:30.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${shared}'== '${G_SHARE_TPYE}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.594" starttime="20180528 16:48:30.594"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.595" starttime="20180528 16:48:30.594"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.595" starttime="20180528 16:48:30.594"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.595" starttime="20180528 16:48:30.592"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.595" starttime="20180528 16:48:30.592"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.595" starttime="20180528 16:48:30.585"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.595" starttime="20180528 16:48:30.583"></status>
</kw>
<kw name="Get NetAct Received Specified Msgs" library="Common_FM_Keyword">
<arguments>
<arg>${G_NE3S_REPORT_FB}</arg>
</arguments>
<assign>
<var>${fb_res}</var>
</assign>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<assign>
<var>${alarm_list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.595" starttime="20180528 16:48:30.595"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${alarm_list}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${alarm_msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.596" starttime="20180528 16:48:30.596"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.596" starttime="20180528 16:48:30.595"></status>
</kw>
<kw name="Validate Alarm Upload Feedback Result" library="Common_FM_Keyword">
<arguments>
<arg>${fb_res[0]}</arg>
<arg>2</arg>
<arg>ok</arg>
<arg>1</arg>
<arg>0</arg>
<arg>${S_UPLOAD_FEEDBACK_OK}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb_res['attachmentProperties']['compression']}</arg>
<arg>${G_OFAS_COMP}</arg>
<arg>msg=NetAct receive reportoperationstatus contain feedback message and verify the value of compression is ${G_OFAS_COMP}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.597" starttime="20180528 16:48:30.596"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb_res['attachmentProperties']['contentType']}</arg>
<arg>${G_FB_CONTTYPE}</arg>
<arg>msg=NetAct receive reportoperationstatus contain feedback message and verify the value of contentType is ${G_FB_CONTTYPE}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.597" starttime="20180528 16:48:30.597"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb_res['pageSequenceNumber']}</arg>
<arg>${seq}</arg>
<arg>msg=NetAct receive reportoperationstatus contain feedback message and verify the value of pageSequenceNumber is ${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.597" starttime="20180528 16:48:30.597"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fb_res['operationStatusContent']}</arg>
</arguments>
<assign>
<var>${cid}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.598" starttime="20180528 16:48:30.597"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${fb_res['${cid}']}</arg>
<arg>NE3SFeedback</arg>
</arguments>
<assign>
<var>${fb_cont}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.598" starttime="20180528 16:48:30.598"></status>
</kw>
<kw name="Validate Operation Feedback Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${fb_cont}</arg>
<arg>${status}</arg>
<arg>${succ}</arg>
<arg>${unsucc}</arg>
<arg>${msg}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb['@status']}</arg>
<arg>${status}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of @status is ${status}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.599" starttime="20180528 16:48:30.599"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb['@successful']}</arg>
<arg>${succ}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of @successful is ${succ}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.599" starttime="20180528 16:48:30.599"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb['@unsuccessful']}</arg>
<arg>${unsucc}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of @unsuccessful is ${unsucc}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.599" starttime="20180528 16:48:30.599"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${fb['message_result']}</arg>
<arg>${msg_add}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of message_result contain ${msg_add}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.600" starttime="20180528 16:48:30.600"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.600" starttime="20180528 16:48:30.598"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.600" starttime="20180528 16:48:30.596"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.600" starttime="20180528 16:48:30.552"></status>
</kw>
<kw type="teardown" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Clear BTS Alarm</arg>
</arguments>
<kw name="Clear BTS Alarm">
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.602" starttime="20180528 16:48:30.602"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.602" starttime="20180528 16:48:30.601"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.602" starttime="20180528 16:48:30.602"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.602" starttime="20180528 16:48:30.602"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.602" starttime="20180528 16:48:30.601"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.602" starttime="20180528 16:48:30.600"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.602" starttime="20180528 16:48:30.600"></status>
</kw>
<tags>
<tag>acc-LTE3435-A-c.1.8</tag>
<tag>feature-LTE3435-A-c</tag>
<tag>owner-jason.w.ye</tag>
<tag>release-SRAN17</tag>
<tag>status-done</tag>
<tag>team-SISOET</tag>
<tag>type-exception</tag>
</tags>
<status status="PASS" endtime="20180528 16:48:30.603" critical="yes" starttime="20180528 16:48:30.546"></status>
</test>
<test id="s1-s1-t6" name="Alarm Upload Exception when BTSMED not Receive Ofas Result and Retry Failed">
<kw type="setup" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Clear BTS Alarm</arg>
<arg>AND</arg>
<arg>Sleep</arg>
<arg>1</arg>
<arg>ensure clear notif be received by NetAct</arg>
<arg>AND</arg>
<arg>Clear NetAct Buffer And Reset NetAct Response</arg>
</arguments>
<kw name="Clear BTS Alarm">
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.605" starttime="20180528 16:48:30.605"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.605" starttime="20180528 16:48:30.605"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.606" starttime="20180528 16:48:30.606"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.606" starttime="20180528 16:48:30.605"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.606" starttime="20180528 16:48:30.604"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.606" starttime="20180528 16:48:30.604"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
<arg>ensure clear notif be received by NetAct</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.606" starttime="20180528 16:48:30.606"></status>
</kw>
<kw name="Clear NetAct Buffer And Reset NetAct Response" library="Common_FM_Keyword">
<kw name="Get Netact Received Messages" library="NbsLibrary">
<doc>:param timeout: exhausted time</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.607" starttime="20180528 16:48:30.607"></status>
</kw>
<kw name="Reset Netact Response Except Default" library="NbsLibrary">
<doc>Reset all NetAct response settings except default</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.607" starttime="20180528 16:48:30.607"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.607" starttime="20180528 16:48:30.607"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.607" starttime="20180528 16:48:30.604"></status>
</kw>
<kw name="Alarm Upload Exception When BTSMED Not Receive Report Result And Retry Failed">
<arguments>
<arg>${G_NE3S_REPORT_OFAS}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EVENTID()}</arg>
</arguments>
<assign>
<var>${oper_id}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.608" starttime="20180528 16:48:30.608"></status>
</kw>
<kw name="Set Netact None Response For Specified Msgs" library="NbsLibrary">
<doc>set the NetAct no response for specific messages type</doc>
<arguments>
<arg>${res_type} and operationId=${oper_id}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.608" starttime="20180528 16:48:30.608"></status>
</kw>
<kw name="BTS Send Alarm Then NetAct Receive Notification" library="Common_FM_Keyword">
<arguments>
<arg>${G_ALARM_NEW}</arg>
<arg>${S_ALARM_DN}</arg>
<arg>${S_ALARM_CONT}</arg>
</arguments>
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
<arg>${cont}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.610" starttime="20180528 16:48:30.610"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.610" starttime="20180528 16:48:30.610"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.611" starttime="20180528 16:48:30.611"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.611" starttime="20180528 16:48:30.610"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.611" starttime="20180528 16:48:30.609"></status>
</kw>
<kw name="Get Then Validate NetAct Received Alarms" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${cont}</arg>
</arguments>
<kw name="Get NetAct Received Specified Msgs" library="Common_FM_Keyword">
<arguments>
<arg>${G_NE3S_OFAS}</arg>
</arguments>
<assign>
<var>${alarm_netact_list}</var>
</assign>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<assign>
<var>${alarm_list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.612" starttime="20180528 16:48:30.612"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${alarm_list}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${alarm_msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.612" starttime="20180528 16:48:30.612"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.612" starttime="20180528 16:48:30.611"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm_netact_list[0]}</arg>
</arguments>
<assign>
<var>${alarm_netact}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.613" starttime="20180528 16:48:30.613"></status>
</kw>
<kw name="Validate NetAct Received Alarms" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${alarm_netact}</arg>
<arg>${alarm_bts}</arg>
</arguments>
<kw name="Validate FM Notification Content" library="Common_FM_Keyword">
<arguments>
<arg>${alarm_netact}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${alarm['notificationType']}</arg>
<arg>ne3s_fm_alarmEventNotification</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of notificationType is ne3s_fm_alarmEventNotification</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.614" starttime="20180528 16:48:30.614"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${alarm['attachmentProperties']['compression']}</arg>
<arg>none</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of compression is none</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.614" starttime="20180528 16:48:30.614"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.615" starttime="20180528 16:48:30.614"></status>
</kw>
<kw name="Get Ofas Attachment From FM Notification" library="Common_FM_Keyword">
<arguments>
<arg>${alarm_netact}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${ofas}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm['notificationContent']}</arg>
</arguments>
<assign>
<var>${file}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.615" starttime="20180528 16:48:30.615"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm['${file}']}</arg>
</arguments>
<assign>
<var>${attfile_ofas}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.616" starttime="20180528 16:48:30.615"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${attfile_ofas['notification']}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${ofas}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.616" starttime="20180528 16:48:30.616"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.616" starttime="20180528 16:48:30.615"></status>
</kw>
<kw name="Validate Ofas Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${alarm_bts}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${ofas['alarmId']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of alarmId is not empty</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.617" starttime="20180528 16:48:30.616"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>/${ofas['@systemDN']}</arg>
<arg>${bts['alarmingResourceDN']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of @systemDN is ${bts['alarmingResourceDN']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.617" starttime="20180528 16:48:30.617"></status>
</kw>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['eventType']}</arg>
<arg>${bts['eventType']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.617" starttime="20180528 16:48:30.617"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['specificProblem']}</arg>
<arg>${bts['alarmNumber']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of specificProblem is ${bts['alarmNumber']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.618" starttime="20180528 16:48:30.617"></status>
</kw>
<kw name="Validate Ofas Attachment Persev Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>cleared</arg>
<arg>${bts['alarmSeverity']}</arg>
</arguments>
<assign>
<var>${expect}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.618" starttime="20180528 16:48:30.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.619" starttime="20180528 16:48:30.619"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.619" starttime="20180528 16:48:30.619"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Similar Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.620" starttime="20180528 16:48:30.620"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.620" starttime="20180528 16:48:30.619"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.620" starttime="20180528 16:48:30.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_New}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.620" starttime="20180528 16:48:30.620"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.620" starttime="20180528 16:48:30.620"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CHANGE}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.621" starttime="20180528 16:48:30.621"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.621" starttime="20180528 16:48:30.621"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Not Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Not Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.622" starttime="20180528 16:48:30.622"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.622" starttime="20180528 16:48:30.621"></status>
</kw>
<kw name="Key In Dictionary" library="common_lib">
<arguments>
<arg>${bts['alarmText']}</arg>
<arg>alarmAdditionalInfo</arg>
</arguments>
<assign>
<var>${has_addtext}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.622" starttime="20180528 16:48:30.622"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_addtext}</arg>
<arg>Validate Ofas Attachment Addtext1 Content</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Validate Ofas Attachment Addtext1 Content" library="Common_FM_Keyword">
<arguments>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['alarmAdditionalInfo']['shared']}</arg>
</arguments>
<assign>
<var>${shared}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.623" starttime="20180528 16:48:30.623"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['faultDescription']}</arg>
</arguments>
<assign>
<var>${fault_des}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.623" starttime="20180528 16:48:30.623"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fault_des};${shared}</arg>
</arguments>
<assign>
<var>${expect_addtext1}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.624" starttime="20180528 16:48:30.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${shared}'== '${G_SHARE_TPYE}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.624" starttime="20180528 16:48:30.624"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.625" starttime="20180528 16:48:30.625"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.625" starttime="20180528 16:48:30.624"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.625" starttime="20180528 16:48:30.623"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.625" starttime="20180528 16:48:30.622"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.625" starttime="20180528 16:48:30.616"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.625" starttime="20180528 16:48:30.613"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.625" starttime="20180528 16:48:30.611"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.625" starttime="20180528 16:48:30.609"></status>
</kw>
<kw name="NetAct Perform Alarm Upload And Validate Response" library="Common_FM_Keyword">
<arguments>
<arg>${oper_id}</arg>
</arguments>
<kw name="Upload" library="NbsLibrary">
<arguments>
<arg>managerRegistrationId=mgr</arg>
<arg>managerRegistrationKey=ODYzNTQ0NTg0</arg>
<arg>operationId=${id}</arg>
<arg>timeout=${timeout}</arg>
<arg>filter.uploadType=active_faults</arg>
<arg>filter.objects.sdn=PLMN-1/S3SN-4</arg>
<arg>filter.objects.depth=1</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.626" starttime="20180528 16:48:30.626"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp['timeout']}</arg>
<arg>${timeout}</arg>
<arg>msg=NetAct receive the upload response message and verify the value of timeout is ${timeout}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.626" starttime="20180528 16:48:30.626"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.626" starttime="20180528 16:48:30.625"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.626" starttime="20180528 16:48:30.608"></status>
</kw>
<kw type="teardown" name="Recovery Env">
<arguments>
<arg>${S_TIME_NO_RESPONSE}</arg>
</arguments>
<kw name="Recovery Exception Response And Retry Failed Env">
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<kw name="Reset Netact Response Except Default" library="NbsLibrary">
<doc>Reset all NetAct response settings except default</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.627" starttime="20180528 16:48:30.627"></status>
</kw>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.628" starttime="20180528 16:48:30.628"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.628" starttime="20180528 16:48:30.627"></status>
</kw>
<kw name="Clear BTS Alarm">
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.629" starttime="20180528 16:48:30.629"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.629" starttime="20180528 16:48:30.629"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.630" starttime="20180528 16:48:30.630"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.630" starttime="20180528 16:48:30.629"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.630" starttime="20180528 16:48:30.628"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.630" starttime="20180528 16:48:30.628"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.630" starttime="20180528 16:48:30.627"></status>
</kw>
<tags>
<tag>acc-LTE3435-A-c.1.5</tag>
<tag>feature-LTE3435-A-c</tag>
<tag>owner-jason.w.ye</tag>
<tag>release-SRAN17</tag>
<tag>status-debug</tag>
<tag>team-SISOET</tag>
<tag>type-exception</tag>
</tags>
<status status="PASS" endtime="20180528 16:48:30.630" critical="yes" starttime="20180528 16:48:30.603"></status>
</test>
<test id="s1-s1-t7" name="Alarm Upload Exception when BTSMED not Receive Feedback Result and Retry Succeed">
<kw type="setup" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Clear BTS Alarm</arg>
<arg>AND</arg>
<arg>Sleep</arg>
<arg>1</arg>
<arg>ensure clear notif be received by NetAct</arg>
<arg>AND</arg>
<arg>Clear NetAct Buffer And Reset NetAct Response</arg>
</arguments>
<kw name="Clear BTS Alarm">
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.633" starttime="20180528 16:48:30.633"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.633" starttime="20180528 16:48:30.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.634" starttime="20180528 16:48:30.633"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.634" starttime="20180528 16:48:30.633"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.634" starttime="20180528 16:48:30.632"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.634" starttime="20180528 16:48:30.631"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
<arg>ensure clear notif be received by NetAct</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.634" starttime="20180528 16:48:30.634"></status>
</kw>
<kw name="Clear NetAct Buffer And Reset NetAct Response" library="Common_FM_Keyword">
<kw name="Get Netact Received Messages" library="NbsLibrary">
<doc>:param timeout: exhausted time</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.635" starttime="20180528 16:48:30.635"></status>
</kw>
<kw name="Reset Netact Response Except Default" library="NbsLibrary">
<doc>Reset all NetAct response settings except default</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.635" starttime="20180528 16:48:30.635"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.635" starttime="20180528 16:48:30.634"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.635" starttime="20180528 16:48:30.631"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EVENTID()}</arg>
</arguments>
<assign>
<var>${oper_id}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.636" starttime="20180528 16:48:30.636"></status>
</kw>
<kw name="Set Netact None Response Several Times" library="NbsLibrary">
<doc>:param expr:messge type like @type=transferNotification</doc>
<arguments>
<arg>${G_NE3S_REPORT_FB} and operationId=${oper_id}</arg>
<arg>1</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.636" starttime="20180528 16:48:30.636"></status>
</kw>
<kw name="BTS Send Alarm Then NetAct Receive Notification" library="Common_FM_Keyword">
<arguments>
<arg>${G_ALARM_NEW}</arg>
<arg>${S_ALARM_DN}</arg>
<arg>${S_ALARM_CONT}</arg>
</arguments>
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
<arg>${cont}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.638" starttime="20180528 16:48:30.638"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.638" starttime="20180528 16:48:30.638"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.639" starttime="20180528 16:48:30.639"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.639" starttime="20180528 16:48:30.638"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.639" starttime="20180528 16:48:30.637"></status>
</kw>
<kw name="Get Then Validate NetAct Received Alarms" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${cont}</arg>
</arguments>
<kw name="Get NetAct Received Specified Msgs" library="Common_FM_Keyword">
<arguments>
<arg>${G_NE3S_OFAS}</arg>
</arguments>
<assign>
<var>${alarm_netact_list}</var>
</assign>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<assign>
<var>${alarm_list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.640" starttime="20180528 16:48:30.640"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${alarm_list}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${alarm_msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.640" starttime="20180528 16:48:30.640"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.640" starttime="20180528 16:48:30.640"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm_netact_list[0]}</arg>
</arguments>
<assign>
<var>${alarm_netact}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.641" starttime="20180528 16:48:30.641"></status>
</kw>
<kw name="Validate NetAct Received Alarms" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${alarm_netact}</arg>
<arg>${alarm_bts}</arg>
</arguments>
<kw name="Validate FM Notification Content" library="Common_FM_Keyword">
<arguments>
<arg>${alarm_netact}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${alarm['notificationType']}</arg>
<arg>ne3s_fm_alarmEventNotification</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of notificationType is ne3s_fm_alarmEventNotification</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.642" starttime="20180528 16:48:30.642"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${alarm['attachmentProperties']['compression']}</arg>
<arg>none</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of compression is none</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.642" starttime="20180528 16:48:30.642"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.642" starttime="20180528 16:48:30.641"></status>
</kw>
<kw name="Get Ofas Attachment From FM Notification" library="Common_FM_Keyword">
<arguments>
<arg>${alarm_netact}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${ofas}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm['notificationContent']}</arg>
</arguments>
<assign>
<var>${file}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.643" starttime="20180528 16:48:30.643"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm['${file}']}</arg>
</arguments>
<assign>
<var>${attfile_ofas}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.643" starttime="20180528 16:48:30.643"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${attfile_ofas['notification']}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${ofas}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.644" starttime="20180528 16:48:30.644"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.644" starttime="20180528 16:48:30.642"></status>
</kw>
<kw name="Validate Ofas Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${alarm_bts}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${ofas['alarmId']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of alarmId is not empty</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.644" starttime="20180528 16:48:30.644"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>/${ofas['@systemDN']}</arg>
<arg>${bts['alarmingResourceDN']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of @systemDN is ${bts['alarmingResourceDN']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.645" starttime="20180528 16:48:30.645"></status>
</kw>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['eventType']}</arg>
<arg>${bts['eventType']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.645" starttime="20180528 16:48:30.645"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['specificProblem']}</arg>
<arg>${bts['alarmNumber']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of specificProblem is ${bts['alarmNumber']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.645" starttime="20180528 16:48:30.645"></status>
</kw>
<kw name="Validate Ofas Attachment Persev Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>cleared</arg>
<arg>${bts['alarmSeverity']}</arg>
</arguments>
<assign>
<var>${expect}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.646" starttime="20180528 16:48:30.646"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.647" starttime="20180528 16:48:30.647"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.647" starttime="20180528 16:48:30.646"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Similar Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.647" starttime="20180528 16:48:30.647"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.647" starttime="20180528 16:48:30.647"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.648" starttime="20180528 16:48:30.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_New}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.648" starttime="20180528 16:48:30.648"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.648" starttime="20180528 16:48:30.648"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CHANGE}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.649" starttime="20180528 16:48:30.649"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.649" starttime="20180528 16:48:30.648"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Not Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Not Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.650" starttime="20180528 16:48:30.650"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.650" starttime="20180528 16:48:30.649"></status>
</kw>
<kw name="Key In Dictionary" library="common_lib">
<arguments>
<arg>${bts['alarmText']}</arg>
<arg>alarmAdditionalInfo</arg>
</arguments>
<assign>
<var>${has_addtext}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.650" starttime="20180528 16:48:30.650"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_addtext}</arg>
<arg>Validate Ofas Attachment Addtext1 Content</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Validate Ofas Attachment Addtext1 Content" library="Common_FM_Keyword">
<arguments>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['alarmAdditionalInfo']['shared']}</arg>
</arguments>
<assign>
<var>${shared}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.651" starttime="20180528 16:48:30.651"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['faultDescription']}</arg>
</arguments>
<assign>
<var>${fault_des}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.651" starttime="20180528 16:48:30.651"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fault_des};${shared}</arg>
</arguments>
<assign>
<var>${expect_addtext1}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.652" starttime="20180528 16:48:30.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${shared}'== '${G_SHARE_TPYE}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.652" starttime="20180528 16:48:30.652"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.653" starttime="20180528 16:48:30.653"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.653" starttime="20180528 16:48:30.652"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.653" starttime="20180528 16:48:30.651"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.653" starttime="20180528 16:48:30.650"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.653" starttime="20180528 16:48:30.644"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.653" starttime="20180528 16:48:30.641"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.653" starttime="20180528 16:48:30.639"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.653" starttime="20180528 16:48:30.637"></status>
</kw>
<kw name="NetAct Perform Alarm Upload And Validate Response" library="Common_FM_Keyword">
<arguments>
<arg>${oper_id}</arg>
</arguments>
<kw name="Upload" library="NbsLibrary">
<arguments>
<arg>managerRegistrationId=mgr</arg>
<arg>managerRegistrationKey=ODYzNTQ0NTg0</arg>
<arg>operationId=${id}</arg>
<arg>timeout=${timeout}</arg>
<arg>filter.uploadType=active_faults</arg>
<arg>filter.objects.sdn=PLMN-1/S3SN-4</arg>
<arg>filter.objects.depth=1</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.654" starttime="20180528 16:48:30.654"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp['timeout']}</arg>
<arg>${timeout}</arg>
<arg>msg=NetAct receive the upload response message and verify the value of timeout is ${timeout}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.654" starttime="20180528 16:48:30.654"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.654" starttime="20180528 16:48:30.653"></status>
</kw>
<kw name="Get NetAct Received Specified Msgs" library="Common_FM_Keyword">
<arguments>
<arg>${G_NE3S_REPORT_OFAS} and operationId=${oper_id}</arg>
</arguments>
<assign>
<var>${ofas_res}</var>
</assign>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<assign>
<var>${alarm_list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.655" starttime="20180528 16:48:30.655"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${alarm_list}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${alarm_msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.656" starttime="20180528 16:48:30.656"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.656" starttime="20180528 16:48:30.655"></status>
</kw>
<kw name="Validate Alarm Upload Ofas Result">
<arguments>
<arg>${ofas_res[0]}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_res['attachmentProperties']['compression']}</arg>
<arg>${G_OFAS_COMP}</arg>
<arg>msg=NetAct receive reportoperationstatus contain ofas message and verify the value of compression is ${G_OFAS_COMP}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.657" starttime="20180528 16:48:30.657"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_res['attachmentProperties']['contentType']}</arg>
<arg>${G_OFAS_CONTTYPE}</arg>
<arg>msg=NetAct receive reportoperationstatus contain ofas message and verify the value of contentType is ${G_OFAS_CONTTYPE}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.657" starttime="20180528 16:48:30.657"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_res['pageSequenceNumber']}</arg>
<arg>1</arg>
<arg>msg=NetAct receive reportoperationstatus contain ofas message and verify the value of pageSequenceNumber is 1</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.657" starttime="20180528 16:48:30.657"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${ofas_res['operationStatusContent']}</arg>
</arguments>
<assign>
<var>${cid}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.658" starttime="20180528 16:48:30.658"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${ofas_res['${cid}']['alarmSynchronisation']}</arg>
<arg>${G_ALARM_NEW}</arg>
</arguments>
<assign>
<var>${ofas_cont}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.658" starttime="20180528 16:48:30.658"></status>
</kw>
<kw name="Validate Ofas Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${G_ALARM_NEW}</arg>
<arg>${ofas_cont}</arg>
<arg>${S_ALARM_CONT}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${ofas['alarmId']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of alarmId is not empty</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.659" starttime="20180528 16:48:30.659"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>/${ofas['@systemDN']}</arg>
<arg>${bts['alarmingResourceDN']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of @systemDN is ${bts['alarmingResourceDN']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.660" starttime="20180528 16:48:30.659"></status>
</kw>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['eventType']}</arg>
<arg>${bts['eventType']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.660" starttime="20180528 16:48:30.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['specificProblem']}</arg>
<arg>${bts['alarmNumber']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of specificProblem is ${bts['alarmNumber']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.660" starttime="20180528 16:48:30.660"></status>
</kw>
<kw name="Validate Ofas Attachment Persev Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>cleared</arg>
<arg>${bts['alarmSeverity']}</arg>
</arguments>
<assign>
<var>${expect}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.661" starttime="20180528 16:48:30.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.662" starttime="20180528 16:48:30.661"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.662" starttime="20180528 16:48:30.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Similar Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.662" starttime="20180528 16:48:30.662"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.662" starttime="20180528 16:48:30.662"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.662" starttime="20180528 16:48:30.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_New}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.663" starttime="20180528 16:48:30.663"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.663" starttime="20180528 16:48:30.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CHANGE}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.664" starttime="20180528 16:48:30.664"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.664" starttime="20180528 16:48:30.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Not Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Not Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.664" starttime="20180528 16:48:30.664"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.664" starttime="20180528 16:48:30.664"></status>
</kw>
<kw name="Key In Dictionary" library="common_lib">
<arguments>
<arg>${bts['alarmText']}</arg>
<arg>alarmAdditionalInfo</arg>
</arguments>
<assign>
<var>${has_addtext}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.665" starttime="20180528 16:48:30.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_addtext}</arg>
<arg>Validate Ofas Attachment Addtext1 Content</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Validate Ofas Attachment Addtext1 Content" library="Common_FM_Keyword">
<arguments>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['alarmAdditionalInfo']['shared']}</arg>
</arguments>
<assign>
<var>${shared}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.666" starttime="20180528 16:48:30.666"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['faultDescription']}</arg>
</arguments>
<assign>
<var>${fault_des}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.666" starttime="20180528 16:48:30.666"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fault_des};${shared}</arg>
</arguments>
<assign>
<var>${expect_addtext1}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.667" starttime="20180528 16:48:30.666"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${shared}'== '${G_SHARE_TPYE}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.667" starttime="20180528 16:48:30.667"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.668" starttime="20180528 16:48:30.667"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.668" starttime="20180528 16:48:30.667"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.668" starttime="20180528 16:48:30.665"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.668" starttime="20180528 16:48:30.665"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.668" starttime="20180528 16:48:30.659"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.668" starttime="20180528 16:48:30.656"></status>
</kw>
<kw name="Get NetAct Received Specified Msgs" library="Common_FM_Keyword">
<arguments>
<arg>${G_NE3S_REPORT_FB}</arg>
<arg>2</arg>
<arg>${S_TIME_NO_RESPONSE}</arg>
</arguments>
<assign>
<var>${fb_res}</var>
</assign>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<assign>
<var>${alarm_list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.669" starttime="20180528 16:48:30.669"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${alarm_list}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${alarm_msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.669" starttime="20180528 16:48:30.669"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.669" starttime="20180528 16:48:30.668"></status>
</kw>
<kw name="Validate Alarm Upload Feedback Result" library="Common_FM_Keyword">
<arguments>
<arg>${fb_res[0]}</arg>
<arg>2</arg>
<arg>ok</arg>
<arg>1</arg>
<arg>0</arg>
<arg>${S_UPLOAD_FEEDBACK_OK}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb_res['attachmentProperties']['compression']}</arg>
<arg>${G_OFAS_COMP}</arg>
<arg>msg=NetAct receive reportoperationstatus contain feedback message and verify the value of compression is ${G_OFAS_COMP}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.670" starttime="20180528 16:48:30.670"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb_res['attachmentProperties']['contentType']}</arg>
<arg>${G_FB_CONTTYPE}</arg>
<arg>msg=NetAct receive reportoperationstatus contain feedback message and verify the value of contentType is ${G_FB_CONTTYPE}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.670" starttime="20180528 16:48:30.670"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb_res['pageSequenceNumber']}</arg>
<arg>${seq}</arg>
<arg>msg=NetAct receive reportoperationstatus contain feedback message and verify the value of pageSequenceNumber is ${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.671" starttime="20180528 16:48:30.671"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fb_res['operationStatusContent']}</arg>
</arguments>
<assign>
<var>${cid}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.671" starttime="20180528 16:48:30.671"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${fb_res['${cid}']}</arg>
<arg>NE3SFeedback</arg>
</arguments>
<assign>
<var>${fb_cont}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.671" starttime="20180528 16:48:30.671"></status>
</kw>
<kw name="Validate Operation Feedback Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${fb_cont}</arg>
<arg>${status}</arg>
<arg>${succ}</arg>
<arg>${unsucc}</arg>
<arg>${msg}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb['@status']}</arg>
<arg>${status}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of @status is ${status}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.672" starttime="20180528 16:48:30.672"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb['@successful']}</arg>
<arg>${succ}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of @successful is ${succ}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.673" starttime="20180528 16:48:30.672"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb['@unsuccessful']}</arg>
<arg>${unsucc}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of @unsuccessful is ${unsucc}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.673" starttime="20180528 16:48:30.673"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${fb['message_result']}</arg>
<arg>${msg_add}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of message_result contain ${msg_add}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.673" starttime="20180528 16:48:30.673"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.673" starttime="20180528 16:48:30.672"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.673" starttime="20180528 16:48:30.669"></status>
</kw>
<kw name="Validate Alarm Upload Feedback Result" library="Common_FM_Keyword">
<arguments>
<arg>${fb_res[1]}</arg>
<arg>2</arg>
<arg>ok</arg>
<arg>1</arg>
<arg>0</arg>
<arg>${S_UPLOAD_FEEDBACK_OK}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb_res['attachmentProperties']['compression']}</arg>
<arg>${G_OFAS_COMP}</arg>
<arg>msg=NetAct receive reportoperationstatus contain feedback message and verify the value of compression is ${G_OFAS_COMP}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.674" starttime="20180528 16:48:30.674"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb_res['attachmentProperties']['contentType']}</arg>
<arg>${G_FB_CONTTYPE}</arg>
<arg>msg=NetAct receive reportoperationstatus contain feedback message and verify the value of contentType is ${G_FB_CONTTYPE}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.675" starttime="20180528 16:48:30.675"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb_res['pageSequenceNumber']}</arg>
<arg>${seq}</arg>
<arg>msg=NetAct receive reportoperationstatus contain feedback message and verify the value of pageSequenceNumber is ${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.675" starttime="20180528 16:48:30.675"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fb_res['operationStatusContent']}</arg>
</arguments>
<assign>
<var>${cid}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.675" starttime="20180528 16:48:30.675"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${fb_res['${cid}']}</arg>
<arg>NE3SFeedback</arg>
</arguments>
<assign>
<var>${fb_cont}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.676" starttime="20180528 16:48:30.676"></status>
</kw>
<kw name="Validate Operation Feedback Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${fb_cont}</arg>
<arg>${status}</arg>
<arg>${succ}</arg>
<arg>${unsucc}</arg>
<arg>${msg}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb['@status']}</arg>
<arg>${status}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of @status is ${status}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.676" starttime="20180528 16:48:30.676"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb['@successful']}</arg>
<arg>${succ}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of @successful is ${succ}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.677" starttime="20180528 16:48:30.677"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb['@unsuccessful']}</arg>
<arg>${unsucc}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of @unsuccessful is ${unsucc}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.677" starttime="20180528 16:48:30.677"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${fb['message_result']}</arg>
<arg>${msg_add}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of message_result contain ${msg_add}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.677" starttime="20180528 16:48:30.677"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.677" starttime="20180528 16:48:30.676"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.677" starttime="20180528 16:48:30.674"></status>
</kw>
<kw type="teardown" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Clear BTS Alarm</arg>
</arguments>
<kw name="Clear BTS Alarm">
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.679" starttime="20180528 16:48:30.679"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.679" starttime="20180528 16:48:30.679"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.680" starttime="20180528 16:48:30.680"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.680" starttime="20180528 16:48:30.680"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.680" starttime="20180528 16:48:30.678"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.680" starttime="20180528 16:48:30.678"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.680" starttime="20180528 16:48:30.678"></status>
</kw>
<tags>
<tag>acc-LTE3435-A-c.1.9</tag>
<tag>feature-LTE3435-A-c</tag>
<tag>owner-jason.w.ye</tag>
<tag>release-SRAN17</tag>
<tag>status-done</tag>
<tag>team-SISOET</tag>
<tag>type-exception</tag>
</tags>
<status status="PASS" endtime="20180528 16:48:30.680" critical="yes" starttime="20180528 16:48:30.630"></status>
</test>
<test id="s1-s1-t8" name="Alarm Upload Exception when BTSMED not Receive Feedback Result and Retry Failed">
<kw type="setup" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Clear BTS Alarm</arg>
<arg>AND</arg>
<arg>Sleep</arg>
<arg>1</arg>
<arg>ensure clear notif be received by NetAct</arg>
<arg>AND</arg>
<arg>Clear NetAct Buffer And Reset NetAct Response</arg>
</arguments>
<kw name="Clear BTS Alarm">
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.683" starttime="20180528 16:48:30.683"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.683" starttime="20180528 16:48:30.683"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.684" starttime="20180528 16:48:30.684"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.684" starttime="20180528 16:48:30.684"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.684" starttime="20180528 16:48:30.682"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.684" starttime="20180528 16:48:30.682"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
<arg>ensure clear notif be received by NetAct</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.685" starttime="20180528 16:48:30.684"></status>
</kw>
<kw name="Clear NetAct Buffer And Reset NetAct Response" library="Common_FM_Keyword">
<kw name="Get Netact Received Messages" library="NbsLibrary">
<doc>:param timeout: exhausted time</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.685" starttime="20180528 16:48:30.685"></status>
</kw>
<kw name="Reset Netact Response Except Default" library="NbsLibrary">
<doc>Reset all NetAct response settings except default</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.686" starttime="20180528 16:48:30.685"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.686" starttime="20180528 16:48:30.685"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.686" starttime="20180528 16:48:30.681"></status>
</kw>
<kw name="Alarm Upload Exception When BTSMED Not Receive Report Result And Retry Failed">
<arguments>
<arg>${G_NE3S_REPORT_FB}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EVENTID()}</arg>
</arguments>
<assign>
<var>${oper_id}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.686" starttime="20180528 16:48:30.686"></status>
</kw>
<kw name="Set Netact None Response For Specified Msgs" library="NbsLibrary">
<doc>set the NetAct no response for specific messages type</doc>
<arguments>
<arg>${res_type} and operationId=${oper_id}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.687" starttime="20180528 16:48:30.687"></status>
</kw>
<kw name="BTS Send Alarm Then NetAct Receive Notification" library="Common_FM_Keyword">
<arguments>
<arg>${G_ALARM_NEW}</arg>
<arg>${S_ALARM_DN}</arg>
<arg>${S_ALARM_CONT}</arg>
</arguments>
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
<arg>${cont}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.688" starttime="20180528 16:48:30.688"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.688" starttime="20180528 16:48:30.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.689" starttime="20180528 16:48:30.689"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.689" starttime="20180528 16:48:30.688"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.689" starttime="20180528 16:48:30.687"></status>
</kw>
<kw name="Get Then Validate NetAct Received Alarms" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${cont}</arg>
</arguments>
<kw name="Get NetAct Received Specified Msgs" library="Common_FM_Keyword">
<arguments>
<arg>${G_NE3S_OFAS}</arg>
</arguments>
<assign>
<var>${alarm_netact_list}</var>
</assign>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<assign>
<var>${alarm_list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.690" starttime="20180528 16:48:30.690"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${alarm_list}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${alarm_msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.690" starttime="20180528 16:48:30.690"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.690" starttime="20180528 16:48:30.689"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm_netact_list[0]}</arg>
</arguments>
<assign>
<var>${alarm_netact}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.691" starttime="20180528 16:48:30.691"></status>
</kw>
<kw name="Validate NetAct Received Alarms" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${alarm_netact}</arg>
<arg>${alarm_bts}</arg>
</arguments>
<kw name="Validate FM Notification Content" library="Common_FM_Keyword">
<arguments>
<arg>${alarm_netact}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${alarm['notificationType']}</arg>
<arg>ne3s_fm_alarmEventNotification</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of notificationType is ne3s_fm_alarmEventNotification</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.692" starttime="20180528 16:48:30.692"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${alarm['attachmentProperties']['compression']}</arg>
<arg>none</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of compression is none</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.692" starttime="20180528 16:48:30.692"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.692" starttime="20180528 16:48:30.691"></status>
</kw>
<kw name="Get Ofas Attachment From FM Notification" library="Common_FM_Keyword">
<arguments>
<arg>${alarm_netact}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${ofas}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm['notificationContent']}</arg>
</arguments>
<assign>
<var>${file}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.693" starttime="20180528 16:48:30.693"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${alarm['${file}']}</arg>
</arguments>
<assign>
<var>${attfile_ofas}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.693" starttime="20180528 16:48:30.693"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${attfile_ofas['notification']}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${ofas}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.693" starttime="20180528 16:48:30.693"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.694" starttime="20180528 16:48:30.692"></status>
</kw>
<kw name="Validate Ofas Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${alarm_bts}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${ofas['alarmId']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of alarmId is not empty</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.694" starttime="20180528 16:48:30.694"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>/${ofas['@systemDN']}</arg>
<arg>${bts['alarmingResourceDN']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of @systemDN is ${bts['alarmingResourceDN']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.695" starttime="20180528 16:48:30.695"></status>
</kw>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['eventType']}</arg>
<arg>${bts['eventType']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.695" starttime="20180528 16:48:30.695"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['specificProblem']}</arg>
<arg>${bts['alarmNumber']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of specificProblem is ${bts['alarmNumber']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.695" starttime="20180528 16:48:30.695"></status>
</kw>
<kw name="Validate Ofas Attachment Persev Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>cleared</arg>
<arg>${bts['alarmSeverity']}</arg>
</arguments>
<assign>
<var>${expect}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.696" starttime="20180528 16:48:30.696"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.697" starttime="20180528 16:48:30.697"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.697" starttime="20180528 16:48:30.696"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Similar Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.697" starttime="20180528 16:48:30.697"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.697" starttime="20180528 16:48:30.697"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.697" starttime="20180528 16:48:30.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_New}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.698" starttime="20180528 16:48:30.698"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.698" starttime="20180528 16:48:30.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CHANGE}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.699" starttime="20180528 16:48:30.699"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.699" starttime="20180528 16:48:30.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Not Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Not Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.700" starttime="20180528 16:48:30.700"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.700" starttime="20180528 16:48:30.699"></status>
</kw>
<kw name="Key In Dictionary" library="common_lib">
<arguments>
<arg>${bts['alarmText']}</arg>
<arg>alarmAdditionalInfo</arg>
</arguments>
<assign>
<var>${has_addtext}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.700" starttime="20180528 16:48:30.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_addtext}</arg>
<arg>Validate Ofas Attachment Addtext1 Content</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Validate Ofas Attachment Addtext1 Content" library="Common_FM_Keyword">
<arguments>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['alarmAdditionalInfo']['shared']}</arg>
</arguments>
<assign>
<var>${shared}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.702" starttime="20180528 16:48:30.701"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['faultDescription']}</arg>
</arguments>
<assign>
<var>${fault_des}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.702" starttime="20180528 16:48:30.702"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fault_des};${shared}</arg>
</arguments>
<assign>
<var>${expect_addtext1}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.702" starttime="20180528 16:48:30.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${shared}'== '${G_SHARE_TPYE}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.703" starttime="20180528 16:48:30.703"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.703" starttime="20180528 16:48:30.703"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.703" starttime="20180528 16:48:30.702"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.703" starttime="20180528 16:48:30.701"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.703" starttime="20180528 16:48:30.700"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.703" starttime="20180528 16:48:30.694"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.703" starttime="20180528 16:48:30.691"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.704" starttime="20180528 16:48:30.689"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.704" starttime="20180528 16:48:30.687"></status>
</kw>
<kw name="NetAct Perform Alarm Upload And Validate Response" library="Common_FM_Keyword">
<arguments>
<arg>${oper_id}</arg>
</arguments>
<kw name="Upload" library="NbsLibrary">
<arguments>
<arg>managerRegistrationId=mgr</arg>
<arg>managerRegistrationKey=ODYzNTQ0NTg0</arg>
<arg>operationId=${id}</arg>
<arg>timeout=${timeout}</arg>
<arg>filter.uploadType=active_faults</arg>
<arg>filter.objects.sdn=PLMN-1/S3SN-4</arg>
<arg>filter.objects.depth=1</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.704" starttime="20180528 16:48:30.704"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp['timeout']}</arg>
<arg>${timeout}</arg>
<arg>msg=NetAct receive the upload response message and verify the value of timeout is ${timeout}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.705" starttime="20180528 16:48:30.705"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.705" starttime="20180528 16:48:30.704"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.705" starttime="20180528 16:48:30.686"></status>
</kw>
<kw name="Get Then Validate Alarm Upload Result">
<kw name="Get NetAct Received Specified Msgs" library="Common_FM_Keyword">
<arguments>
<arg>${G_NE3S_REPORT_OFAS}</arg>
</arguments>
<assign>
<var>${ofas_res}</var>
</assign>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<assign>
<var>${alarm_list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.706" starttime="20180528 16:48:30.706"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${alarm_list}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${alarm_msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.706" starttime="20180528 16:48:30.706"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.706" starttime="20180528 16:48:30.705"></status>
</kw>
<kw name="Validate Alarm Upload Ofas Result">
<arguments>
<arg>${ofas_res[0]}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_res['attachmentProperties']['compression']}</arg>
<arg>${G_OFAS_COMP}</arg>
<arg>msg=NetAct receive reportoperationstatus contain ofas message and verify the value of compression is ${G_OFAS_COMP}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.707" starttime="20180528 16:48:30.707"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_res['attachmentProperties']['contentType']}</arg>
<arg>${G_OFAS_CONTTYPE}</arg>
<arg>msg=NetAct receive reportoperationstatus contain ofas message and verify the value of contentType is ${G_OFAS_CONTTYPE}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.707" starttime="20180528 16:48:30.707"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas_res['pageSequenceNumber']}</arg>
<arg>1</arg>
<arg>msg=NetAct receive reportoperationstatus contain ofas message and verify the value of pageSequenceNumber is 1</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.708" starttime="20180528 16:48:30.708"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${ofas_res['operationStatusContent']}</arg>
</arguments>
<assign>
<var>${cid}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.708" starttime="20180528 16:48:30.708"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${ofas_res['${cid}']['alarmSynchronisation']}</arg>
<arg>${G_ALARM_NEW}</arg>
</arguments>
<assign>
<var>${ofas_cont}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.708" starttime="20180528 16:48:30.708"></status>
</kw>
<kw name="Validate Ofas Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${G_ALARM_NEW}</arg>
<arg>${ofas_cont}</arg>
<arg>${S_ALARM_CONT}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${ofas['alarmId']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of alarmId is not empty</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.709" starttime="20180528 16:48:30.709"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>/${ofas['@systemDN']}</arg>
<arg>${bts['alarmingResourceDN']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of @systemDN is ${bts['alarmingResourceDN']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.709" starttime="20180528 16:48:30.709"></status>
</kw>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['eventType']}</arg>
<arg>${bts['eventType']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.710" starttime="20180528 16:48:30.710"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['specificProblem']}</arg>
<arg>${bts['alarmNumber']}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of specificProblem is ${bts['alarmNumber']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.710" starttime="20180528 16:48:30.710"></status>
</kw>
<kw name="Validate Ofas Attachment Persev Content" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>cleared</arg>
<arg>${bts['alarmSeverity']}</arg>
</arguments>
<assign>
<var>${expect}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.711" starttime="20180528 16:48:30.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of perceivedSeverity is ${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.711" starttime="20180528 16:48:30.711"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.712" starttime="20180528 16:48:30.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Equal As Similar Strings</arg>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<kw name="Should Be Equal As Similar Strings" library="common_lib">
<arguments>
<arg>${ofas['perceivedSeverity']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.712" starttime="20180528 16:48:30.712"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.712" starttime="20180528 16:48:30.712"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.712" starttime="20180528 16:48:30.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_New}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.713" starttime="20180528 16:48:30.713"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.713" starttime="20180528 16:48:30.712"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CHANGE}'</arg>
<arg>Should Be Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<kw name="Should Be Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['lastUpdateTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.714" starttime="20180528 16:48:30.713"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.714" starttime="20180528 16:48:30.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Should Be Not Equal As Timestamp Strings</arg>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<kw name="Should Be Not Equal As Timestamp Strings" library="common_lib">
<arguments>
<arg>${ofas['eventTime']}</arg>
<arg>${bts['observationTime']}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.714" starttime="20180528 16:48:30.714"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.714" starttime="20180528 16:48:30.714"></status>
</kw>
<kw name="Key In Dictionary" library="common_lib">
<arguments>
<arg>${bts['alarmText']}</arg>
<arg>alarmAdditionalInfo</arg>
</arguments>
<assign>
<var>${has_addtext}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.715" starttime="20180528 16:48:30.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_addtext}</arg>
<arg>Validate Ofas Attachment Addtext1 Content</arg>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Validate Ofas Attachment Addtext1 Content" library="Common_FM_Keyword">
<arguments>
<arg>${ofas}</arg>
<arg>${bts}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['alarmAdditionalInfo']['shared']}</arg>
</arguments>
<assign>
<var>${shared}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.716" starttime="20180528 16:48:30.715"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${bts['alarmText']['faultDescription']}</arg>
</arguments>
<assign>
<var>${fault_des}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.716" starttime="20180528 16:48:30.716"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fault_des};${shared}</arg>
</arguments>
<assign>
<var>${expect_addtext1}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.716" starttime="20180528 16:48:30.716"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${shared}'== '${G_SHARE_TPYE}'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${fault_des}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.717" starttime="20180528 16:48:30.717"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ofas['additionalText1']}</arg>
<arg>${expect_addtext1}</arg>
<arg>msg=NetAct receive the alarm notification message and verify the value of additionalText1 is ${expect_addtext1}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.717" starttime="20180528 16:48:30.717"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.717" starttime="20180528 16:48:30.716"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.717" starttime="20180528 16:48:30.715"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.717" starttime="20180528 16:48:30.715"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.717" starttime="20180528 16:48:30.709"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.718" starttime="20180528 16:48:30.706"></status>
</kw>
<kw name="Get NetAct Received Specified Msgs" library="Common_FM_Keyword">
<arguments>
<arg>${G_NE3S_REPORT_FB}</arg>
</arguments>
<assign>
<var>${fb_res}</var>
</assign>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<assign>
<var>${alarm_list}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.718" starttime="20180528 16:48:30.718"></status>
</kw>
<kw name="Filter Msg" library="NbsLibrary">
<doc>:param messages:a dict for messages</doc>
<arguments>
<arg>${alarm_list}</arg>
<arg>${type}</arg>
</arguments>
<assign>
<var>${alarm_msg}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.719" starttime="20180528 16:48:30.718"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.719" starttime="20180528 16:48:30.718"></status>
</kw>
<kw name="Validate Alarm Upload Feedback Result" library="Common_FM_Keyword">
<arguments>
<arg>${fb_res[0]}</arg>
<arg>2</arg>
<arg>ok</arg>
<arg>1</arg>
<arg>0</arg>
<arg>${S_UPLOAD_FEEDBACK_OK}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb_res['attachmentProperties']['compression']}</arg>
<arg>${G_OFAS_COMP}</arg>
<arg>msg=NetAct receive reportoperationstatus contain feedback message and verify the value of compression is ${G_OFAS_COMP}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.719" starttime="20180528 16:48:30.719"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb_res['attachmentProperties']['contentType']}</arg>
<arg>${G_FB_CONTTYPE}</arg>
<arg>msg=NetAct receive reportoperationstatus contain feedback message and verify the value of contentType is ${G_FB_CONTTYPE}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.720" starttime="20180528 16:48:30.720"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb_res['pageSequenceNumber']}</arg>
<arg>${seq}</arg>
<arg>msg=NetAct receive reportoperationstatus contain feedback message and verify the value of pageSequenceNumber is ${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.720" starttime="20180528 16:48:30.720"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${fb_res['operationStatusContent']}</arg>
</arguments>
<assign>
<var>${cid}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.720" starttime="20180528 16:48:30.720"></status>
</kw>
<kw name="Should Dict Has Key And Get Value" library="common_lib">
<arguments>
<arg>${fb_res['${cid}']}</arg>
<arg>NE3SFeedback</arg>
</arguments>
<assign>
<var>${fb_cont}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.721" starttime="20180528 16:48:30.721"></status>
</kw>
<kw name="Validate Operation Feedback Attachment Content" library="Common_FM_Keyword">
<arguments>
<arg>${fb_cont}</arg>
<arg>${status}</arg>
<arg>${succ}</arg>
<arg>${unsucc}</arg>
<arg>${msg}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb['@status']}</arg>
<arg>${status}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of @status is ${status}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.721" starttime="20180528 16:48:30.721"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb['@successful']}</arg>
<arg>${succ}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of @successful is ${succ}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.722" starttime="20180528 16:48:30.722"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${fb['@unsuccessful']}</arg>
<arg>${unsucc}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of @unsuccessful is ${unsucc}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.722" starttime="20180528 16:48:30.722"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${fb['message_result']}</arg>
<arg>${msg_add}</arg>
<arg>msg=NetAct receive the reportoperationstatus contain feedback message and verify the value of message_result contain ${msg_add}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.722" starttime="20180528 16:48:30.722"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.722" starttime="20180528 16:48:30.721"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.722" starttime="20180528 16:48:30.719"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.723" starttime="20180528 16:48:30.705"></status>
</kw>
<kw type="teardown" name="Recovery Env">
<arguments>
<arg>${S_TIME_NO_RESPONSE}</arg>
</arguments>
<kw name="Recovery Exception Response And Retry Failed Env">
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<kw name="Reset Netact Response Except Default" library="NbsLibrary">
<doc>Reset all NetAct response settings except default</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.724" starttime="20180528 16:48:30.724"></status>
</kw>
<kw name="Wait Until Specified Messages Received" library="NbsLibrary">
<doc>:param timeout: echasuted time</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${type}</arg>
<arg>${num}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.724" starttime="20180528 16:48:30.724"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.724" starttime="20180528 16:48:30.723"></status>
</kw>
<kw name="Clear BTS Alarm">
<kw name="BTS Send Alarm" library="Common_FM_Keyword">
<arguments>
<arg>${type}</arg>
<arg>${dn}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' != '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Update To BTSMED</arg>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<kw name="Send Mo Update To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send MO update to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
<arg>content=${cont}</arg>
<arg>seq=${seq}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.726" starttime="20180528 16:48:30.726"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.726" starttime="20180528 16:48:30.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == '${G_ALARM_CLEAR}'</arg>
<arg>Send MO Remove To BTSMED</arg>
<arg>distname=${dn}</arg>
</arguments>
<kw name="Send Mo Remove To Btsmed" library="NbsLibrary">
<doc>SOAM BTS send IMContent to BTSMED</doc>
<arguments>
<arg>distname=${dn}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.726" starttime="20180528 16:48:30.726"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.727" starttime="20180528 16:48:30.726"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.727" starttime="20180528 16:48:30.725"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.727" starttime="20180528 16:48:30.724"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.727" starttime="20180528 16:48:30.723"></status>
</kw>
<tags>
<tag>acc-LTE3435-A-c.1.6</tag>
<tag>feature-LTE3435-A-c</tag>
<tag>owner-jason.w.ye</tag>
<tag>release-SRAN17</tag>
<tag>status-debug</tag>
<tag>team-SISOET</tag>
<tag>type-exception</tag>
</tags>
<status status="PASS" endtime="20180528 16:48:30.727" critical="yes" starttime="20180528 16:48:30.681"></status>
</test>
<kw type="teardown" name="Make BTS Offline" library="Common_Bts_Keyword">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>150ms</arg>
<arg>wait for alarm 8502 inteval time</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.728" starttime="20180528 16:48:30.728"></status>
</kw>
<kw name="Stop Bts" library="NbsLibrary">
<doc>stop the specified bts, default is present running bts.</doc>
<arguments>
<arg>${btsid}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.728" starttime="20180528 16:48:30.728"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.728" starttime="20180528 16:48:30.727"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.728" starttime="20180528 16:48:30.261"></status>
</suite>
<kw type="teardown" name="ET Teardown">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Unregister Common BTS</arg>
</arguments>
<kw name="Unregister Common BTS" library="Common_NetAct_Keyword">
<kw name="Unregistration" library="Common_NetAct_Keyword">
<arguments>
<arg>${G_MRBTS_ID}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stop_session}'=='${True}'</arg>
<arg>Stop Agent Session</arg>
<arg>${mrbts_id}</arg>
</arguments>
<kw name="Stop Agent Session" library="NbsLibrary">
<doc>stop session with BTSMED</doc>
<arguments>
<arg>${mrbts_id}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.732" starttime="20180528 16:48:30.732"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.732" starttime="20180528 16:48:30.731"></status>
</kw>
<kw name="Unregister" library="NbsLibrary">
<arguments>
<arg>managerIdentity.uniqueId=${mgr}</arg>
<arg>managerIdentity.type=NetAct</arg>
<arg>managerIdentity.release=1.0</arg>
<arg>managerIdentity.vendor=NOKIA</arg>
<arg>managerRegistrationKey=${managerRegistrationKey}</arg>
<arg>@hostname=${mrbts_id}</arg>
</arguments>
<assign>
<var>${response_unregister}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.732" starttime="20180528 16:48:30.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${mrbts_id}'=='all'</arg>
<arg>Validate Unregistration All Response</arg>
<arg>${registration response}</arg>
<arg>${response_unregister}</arg>
<arg>ELSE</arg>
<arg>Validate Unregistration Response</arg>
<arg>${registration response}</arg>
<arg>${response_unregister}</arg>
<arg>${mrbts_id}</arg>
</arguments>
<kw name="Validate Unregistration All Response" library="Common_NetAct_Keyword">
<arguments>
<arg>${registration response}</arg>
<arg>${response_unregister}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${response_unregister[0]['agentIdentity']['uniqueId']}</arg>
<arg>msg=NetAct receive unregitration response and verify the value of uniqueId in response is not empty</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.733" starttime="20180528 16:48:30.733"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.733" starttime="20180528 16:48:30.733"></status>
</kw>
<kw name="Validate Unregistration Response" library="Common_NetAct_Keyword">
<arguments>
<arg>${registration response}</arg>
<arg>${response_unregister}</arg>
<arg>${mrbts_id}</arg>
</arguments>
<kw type="for" name="${index} IN [ @{response_unregister} ]">
<kw type="foritem" name="${index} = ${index}">
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${mrbts-id}</arg>
<arg>${index['agentIdentity']['uniqueId']}</arg>
<arg>msg=NetAct receive unregitration response and verify the value of uniqueId in response is contained by ${mrbts-id}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.734" starttime="20180528 16:48:30.734"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.734" starttime="20180528 16:48:30.734"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.734" starttime="20180528 16:48:30.734"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.734" starttime="20180528 16:48:30.733"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.734" starttime="20180528 16:48:30.732"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.734" starttime="20180528 16:48:30.731"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.734" starttime="20180528 16:48:30.731"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.734" starttime="20180528 16:48:30.730"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Unregister Common BTSMED</arg>
</arguments>
<kw name="Unregister Common BTSMED" library="Common_NetAct_Keyword">
<kw name="Unregistration" library="Common_NetAct_Keyword">
<arguments>
<arg>${G_BTSMED_ID}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stop_session}'=='${True}'</arg>
<arg>Stop Agent Session</arg>
<arg>${mrbts_id}</arg>
</arguments>
<kw name="Stop Agent Session" library="NbsLibrary">
<doc>stop session with BTSMED</doc>
<arguments>
<arg>${mrbts_id}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.736" starttime="20180528 16:48:30.736"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.736" starttime="20180528 16:48:30.736"></status>
</kw>
<kw name="Unregister" library="NbsLibrary">
<arguments>
<arg>managerIdentity.uniqueId=${mgr}</arg>
<arg>managerIdentity.type=NetAct</arg>
<arg>managerIdentity.release=1.0</arg>
<arg>managerIdentity.vendor=NOKIA</arg>
<arg>managerRegistrationKey=${managerRegistrationKey}</arg>
<arg>@hostname=${mrbts_id}</arg>
</arguments>
<assign>
<var>${response_unregister}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.736" starttime="20180528 16:48:30.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${mrbts_id}'=='all'</arg>
<arg>Validate Unregistration All Response</arg>
<arg>${registration response}</arg>
<arg>${response_unregister}</arg>
<arg>ELSE</arg>
<arg>Validate Unregistration Response</arg>
<arg>${registration response}</arg>
<arg>${response_unregister}</arg>
<arg>${mrbts_id}</arg>
</arguments>
<kw name="Validate Unregistration All Response" library="Common_NetAct_Keyword">
<arguments>
<arg>${registration response}</arg>
<arg>${response_unregister}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${response_unregister[0]['agentIdentity']['uniqueId']}</arg>
<arg>msg=NetAct receive unregitration response and verify the value of uniqueId in response is not empty</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.737" starttime="20180528 16:48:30.737"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.737" starttime="20180528 16:48:30.737"></status>
</kw>
<kw name="Validate Unregistration Response" library="Common_NetAct_Keyword">
<arguments>
<arg>${registration response}</arg>
<arg>${response_unregister}</arg>
<arg>${mrbts_id}</arg>
</arguments>
<kw type="for" name="${index} IN [ @{response_unregister} ]">
<kw type="foritem" name="${index} = ${index}">
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${mrbts-id}</arg>
<arg>${index['agentIdentity']['uniqueId']}</arg>
<arg>msg=NetAct receive unregitration response and verify the value of uniqueId in response is contained by ${mrbts-id}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.738" starttime="20180528 16:48:30.738"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.738" starttime="20180528 16:48:30.738"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.738" starttime="20180528 16:48:30.738"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.738" starttime="20180528 16:48:30.738"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.738" starttime="20180528 16:48:30.737"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.739" starttime="20180528 16:48:30.735"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.739" starttime="20180528 16:48:30.735"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.739" starttime="20180528 16:48:30.735"></status>
</kw>
<kw name="Recover Test Env For Lte3435" library="Common_NetAct_Keyword">
<kw name="Recover Test Env" library="Common_NetAct_Keyword">
<kw name="Stop Tcpdump Process" library="Common_Mixed_Keyword">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>pkill -x tcpdump</arg>
<arg>shell=${True}</arg>
<arg>cwd=/root/workspace/gerrit/IMP/test/ET/resources</arg>
<arg>timeout=${G_RUN_PROCESS_TIMEOUT}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.740" starttime="20180528 16:48:30.740"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.740" starttime="20180528 16:48:30.739"></status>
</kw>
<kw name="Stop Tail Process" library="Common_Mixed_Keyword">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>pkill -x tail</arg>
<arg>shell=${True}</arg>
<arg>cwd=/root/workspace/gerrit/IMP/test/ET/resources</arg>
<arg>timeout=${G_RUN_PROCESS_TIMEOUT}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.741" starttime="20180528 16:48:30.740"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.741" starttime="20180528 16:48:30.740"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.741" starttime="20180528 16:48:30.741"></status>
</kw>
<kw name="Stop Netact Server" library="NbsLibrary">
<doc>stop the simulated NetAct server</doc>
<status status="NOT_RUN" endtime="20180528 16:48:30.741" starttime="20180528 16:48:30.741"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.741" starttime="20180528 16:48:30.739"></status>
</kw>
<kw name="Run Keyword If Any Tests Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if one or more tests failed.</doc>
<arguments>
<arg>Restart BTSMED Solely</arg>
</arguments>
<kw name="Restart BTSMED Solely" library="Common_Mixed_Keyword">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Get BTSMED Process Id</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${process_id}</var>
</assign>
<kw name="Get Btsmed Process Id" library="common_lib">
<status status="NOT_RUN" endtime="20180528 16:48:30.743" starttime="20180528 16:48:30.743"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.743" starttime="20180528 16:48:30.742"></status>
</kw>
<kw name="BTSMED Server Restart Then Validate BTSMED Status" library="Common_Mixed_Keyword">
<arguments>
<arg>${process_id}</arg>
<arg>${G_BTSMED_START_TIMEOUT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>${G_BTSMED_RESTART_CMD}</arg>
<arg>shell=${True}</arg>
<arg>cwd=${G_BTSMED_PATH}/bin</arg>
<arg>timeout=60</arg>
<arg>stderr=STDOUT</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.744" starttime="20180528 16:48:30.743"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log</arg>
<arg>${result}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.744" starttime="20180528 16:48:30.744"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.744" starttime="20180528 16:48:30.744"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>0.2</arg>
<arg>BTSMED Process Should Be Startup</arg>
</arguments>
<kw name="BTSMED Process Should Be Startup" library="common_lib">
<status status="NOT_RUN" endtime="20180528 16:48:30.745" starttime="20180528 16:48:30.745"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.745" starttime="20180528 16:48:30.745"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>0.2</arg>
<arg>Validate BTSMED Special Port Startup</arg>
<arg>${G_BTSMED_SPECIAL_PORT}</arg>
</arguments>
<kw name="Validate BTSMED Special Port Startup" library="Common_Mixed_Keyword">
<arguments>
<arg>${G_BTSMED_SPECIAL_PORT}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>netstat -nap | grep ${port}|grep LISTEN</arg>
<arg>shell=${True}</arg>
<arg>timeout=${G_RUN_PROCESS_TIMEOUT}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.746" starttime="20180528 16:48:30.746"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>msg=verify port ${port} have been occupied</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.746" starttime="20180528 16:48:30.746"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.746" starttime="20180528 16:48:30.746"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.746" starttime="20180528 16:48:30.745"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>0.2</arg>
<arg>BTSMED Server Should Be Startup</arg>
</arguments>
<kw name="BTSMED Server Should Be Startup" library="Common_Mixed_Keyword">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${checkport}' == 'yes'</arg>
<arg>Validate BTSMED Special Port Startup</arg>
<arg>port=${port}</arg>
</arguments>
<kw name="Validate BTSMED Special Port Startup" library="Common_Mixed_Keyword">
<arguments>
<arg>port=${port}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>netstat -nap | grep ${port}|grep LISTEN</arg>
<arg>shell=${True}</arg>
<arg>timeout=${G_RUN_PROCESS_TIMEOUT}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.748" starttime="20180528 16:48:30.748"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>msg=verify port ${port} have been occupied</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.748" starttime="20180528 16:48:30.748"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.749" starttime="20180528 16:48:30.748"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.749" starttime="20180528 16:48:30.747"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.749" starttime="20180528 16:48:30.747"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.749" starttime="20180528 16:48:30.747"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>0.2</arg>
<arg>Validate BTSMED Port 8102 Or 8103 Startup</arg>
</arguments>
<kw name="Validate BTSMED Port 8102 Or 8103 Startup" library="Common_Mixed_Keyword">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>netstat -nap|grep -E '8102'|grep LISTEN</arg>
<arg>shell=${True}</arg>
<arg>timeout=${G_RUN_PROCESS_TIMEOUT}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.750" starttime="20180528 16:48:30.749"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>msg=verify port 8102 have been occupied</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.750" starttime="20180528 16:48:30.750"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>netstat -nap|grep -E '8103'|grep LISTEN</arg>
<arg>shell=${True}</arg>
<arg>timeout=${G_RUN_PROCESS_TIMEOUT}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.750" starttime="20180528 16:48:30.750"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>msg=verify port 8103 have been occupied</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.751" starttime="20180528 16:48:30.751"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.751" starttime="20180528 16:48:30.749"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.751" starttime="20180528 16:48:30.749"></status>
</kw>
<kw name="Get Btsmed Process Id" library="common_lib">
<assign>
<var>${new_pid}</var>
</assign>
<status status="NOT_RUN" endtime="20180528 16:48:30.751" starttime="20180528 16:48:30.751"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${new_pid}</arg>
<arg>${id}</arg>
<arg>msg=Get BTSMED process id ${new_pid} after restart BTSMED and verify it is not euqal with the original process id ${id}</arg>
</arguments>
<status status="NOT_RUN" endtime="20180528 16:48:30.751" starttime="20180528 16:48:30.751"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.751" starttime="20180528 16:48:30.743"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.751" starttime="20180528 16:48:30.742"></status>
</kw>
<status status="NOT_RUN" endtime="20180528 16:48:30.752" starttime="20180528 16:48:30.742"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.752" starttime="20180528 16:48:30.739"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.752" starttime="20180528 16:48:30.730"></status>
</kw>
<status status="PASS" endtime="20180528 16:48:30.752" starttime="20180528 16:48:26.264"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="8">Critical Tests</stat>
<stat fail="0" pass="8">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">acc-LTE3435-A-c.1.1</stat>
<stat fail="0" pass="1">acc-LTE3435-A-c.1.10</stat>
<stat fail="0" pass="1">acc-LTE3435-A-c.1.3</stat>
<stat fail="0" pass="1">acc-LTE3435-A-c.1.5</stat>
<stat fail="0" pass="1">acc-LTE3435-A-c.1.6</stat>
<stat fail="0" pass="1">acc-LTE3435-A-c.1.7</stat>
<stat fail="0" pass="1">acc-LTE3435-A-c.1.8</stat>
<stat fail="0" pass="1">acc-LTE3435-A-c.1.9</stat>
<stat fail="0" pass="8">feature-LTE3435-A-c</stat>
<stat fail="0" pass="8">owner-jason.w.ye</stat>
<stat fail="0" pass="8">release-SRAN17</stat>
<stat fail="0" pass="3">status-debug</stat>
<stat fail="0" pass="3">status-done</stat>
<stat fail="0" pass="2">status-RT</stat>
<stat fail="0" pass="8">team-SISOET</stat>
<stat fail="0" pass="7">type-exception</stat>
<stat fail="0" pass="1">type-normal</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="ET" pass="8">ET</stat>
<stat fail="0" id="s1-s1" name="FM Upload" pass="8">ET.FM Upload</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
